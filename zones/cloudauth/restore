#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

set -o errexit
#set -o xtrace

if [[ $# != 2 ]]; then
    echo "Usage: $0 <zone_name> <src_directory>"
    exit 1
fi

ZONE=$1
SRC_DIR=$2

TIMESTAMP=`TZ=UTC date "+%Y%m%dT%H%M%SZ"`
TEMP_NAME="zones/${ZONE}-${TIMESTAMP}"

if [[ ! -d "${SRC_DIR}" ]]; then
    echo "Invalid directory: '${SRC_DIR}'"
    exit 1
fi

# Halt the zone
echo "==> Halting zone '${ZONE}'"
/usr/sbin/zoneadm -z ${ZONE} halt
for (( i = 0 ; i <= 10 ; i++ )); do
    $(zoneadm list | grep '^${ZONE}$' && break || sleep 5)
done

# Rename the cur dataset
echo "==> Renaming zone"
/usr/sbin/zfs rename zones/${ZONE} ${TEMP_NAME}

# Restore the old dataset
echo "==> Receiving '${SRC_DIR}/${ZONE}.zfs'"
/usr/sbin/zfs receive -v zones/${ZONE} < ${SRC_DIR}/${ZONE}.zfs

# For rabbitmq we want to be careful not to start up with anything in the
# queue.  We don't want to resend provision or other messages which may
# cause actions to be performed.  We restore with an empty DB and later will
# re-add the users, etc.
if [[ ${ZONE} == "rabbitmq" ]]; then
    echo "==> Removing rabbitmq db"
    rm -rf /zones/rabbitmq/root/var/db/rabbitmq/*
fi

# Boot the zone 
echo "==> Receiving '${SRC_DIR}/${ZONE}.zfs'"
/usr/sbin/zoneadm -z ${ZONE} boot

echo "==> Waiting for 10 seconds for services to start"
sleep 10

# Do cleanup for the zone
case ${ZONE} in
    "rabbitmq")
        echo "==> Reconfiguring zone"
        zlogin ${ZONE} /opt/smartdc/bin/configure
    ;;
esac

# Destroy old dataset(s)
echo "==> Receiving '${SRC_DIR}/${ZONE}.zfs'"
/usr/sbin/zfs destroy -r "${TEMP_NAME}"

echo "==> Done!"

exit 0
