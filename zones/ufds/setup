#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

set -o xtrace

role=ufds
PATH=/opt/smartdc/ufds/build/node/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

# This includes the fatal function and downloads and installs files.
source /var/svc/setup.common

eval $(cat /opt/smartdc/etc/zoneconfig)

# Install UFDS
mkdir -p /opt/smartdc/ufds/ssl
chown -R nobody:nobody /opt/smartdc/ufds

echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 \
    -keyout /opt/smartdc/ufds/ssl/key.pem -out /opt/smartdc/ufds/ssl/cert.pem \
    -days 3650

/opt/smartdc/bin/configure || fatal "Unable to configure zone."

# Add build/node/bin and node_modules/.bin to PATH
echo "" >>/root/.profile
echo "export PATH=\$PATH:/opt/smartdc/$role/build/node/bin:/opt/smartdc/$role/node_modules/.bin" >>/root/.profile

UFDS_ADMIN_IP=$(echo "${UFDS_ADMIN_IPS}" | cut -d',' -f1)

# Wait up to 50s for UFDS to come up to load bootstrap data.
echo "Wait for ufds service to come online."
for i in 0 1 2 3 4 5 6 7 8 9; do
    echo "Is ufds up? (i=$i)"
    LDAPTLS_REQCERT=allow ldapwhoami \
        -H ldaps://${UFDS_ADMIN_IP} -x \
        -D ${UFDS_LDAP_ROOT_DN} -w ${UFDS_LDAP_ROOT_PW} \
        && break || true
    sleep 5
done

LDAPTLS_REQCERT=allow ldapwhoami -H ldaps://${UFDS_ADMIN_IP} -x \
    -D ${UFDS_LDAP_ROOT_DN} -w ${UFDS_LDAP_ROOT_PW}
if [ $? -ne 0 ]; then
    echo "Timeout waiting for ufds to come up."
    echo "Marking ufds SMF service as in maintenance."
    svcadm mark maintenance svc:/smartdc/application/ufds-master:default
    exit 1
fi

echo "Loading bootstrap data"
LDIF_IN=/opt/smartdc/$role/data/bootstrap.ldif.in
LDIF=/tmp/.bootstrap.ldif


# Update config file
cp $LDIF_IN $LDIF

echo "Getting package information"
packages=$(/usr/sbin/mdata-get packages)
# name:ram:swap:disk:cap:nlwp:iopri:uuid
for pkg in $packages
do
  name=$(echo ${pkg} | cut -d ':' -f 1)
  uuid=$(echo ${pkg} | cut -d ':' -f 8)
  # TBD: Decide if default package should be configurable
  # (can be changed from adminui post setup).
  if [ "${name}" == "sdc_128" ]; then
    default='true'
  else
    default='false'
  fi
  # Make sure we always have a new line before our stuff
  echo "
dn: uuid=${uuid}, ou=packages, o=smartdc
uuid: ${uuid}
active: true
cpu_cap: $(echo ${pkg} | cut -d ':' -f 5)
default: $default
max_lwps: $(echo ${pkg} | cut -d ':' -f 6)
max_physical_memory: $(echo ${pkg} | cut -d ':' -f 2)
max_swap: $(echo ${pkg} | cut -d ':' -f 3)
name: ${name}
quota: $(echo ${pkg} | cut -d ':' -f 4)
urn: sdc:UFDS_ADMIN_UUID:${name}:1.0.0
vcpus: 1
version: 1.0.0
zfs_io_priority: $(echo ${pkg} | cut -d ':' -f 7)
objectclass: sdcpackage" >> $LDIF
  # Cleanup variables before next loop iteration
  unset name
  unset uuid
done

gsed -i -e "s|UFDS_ADMIN_UUID|$UFDS_ADMIN_UUID|" $LDIF
gsed -i -e "s|UFDS_ADMIN_LOGIN|$UFDS_ADMIN_LOGIN|" $LDIF
gsed -i -e "s|UFDS_ADMIN_PW|$UFDS_ADMIN_PW|" $LDIF
gsed -i -e "s|UFDS_ADMIN_EMAIL|$UFDS_ADMIN_EMAIL|" $LDIF
gsed -i -e "s|DATACENTER_NAME|$DATACENTER_NAME|" $LDIF
gsed -i -e "s|DATECENTER_COMPANY_NAME|$DATACENTER_COMPANY_NAME|" $LDIF
gsed -i -e "s|DATACENTER_LOCATION|$DATACENTER_LOCATION|" $LDIF

LDAPTLS_REQCERT=allow ldapadd -H ldaps://${UFDS_ADMIN_IP} -x \
    -D ${UFDS_LDAP_ROOT_DN} -w ${UFDS_LDAP_ROOT_PW} \
    -f $LDIF

# 68 is entry already exists; if we're setting up a redundant UFDS, the entries
# will already exist. This is a little bit hacky, and a better way would be to
# pass in metadata to this script such that we can skip this altogether if
# provision > 1, but this works for now.
rc=$?
if [ $rc -ne 0 ] && [ $rc -ne 68 ]; then
    echo "Failed to load bootstrap data, exiting"
    echo "Marking ufds SMF service as in maintenance"
    svcadm mark maintenance svc:/smartdc/application/ufds-master:default
    exit 1
fi

rm -f $LDIF

touch /var/svc/setup_complete
echo "setup done"
(sleep 5; cp /var/svc/setup.log /var/svc/setup_init.log) &

exit 0
