#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

set -o xtrace

PATH=/opt/nodejs/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

# This includes the fatal function and downloads and installs files.
source /var/svc/setup.common

eval $(cat /opt/smartdc/etc/zoneconfig)

# Install UFDS
mkdir -p /opt/smartdc/ufds/ssl
chown -R nobody:nobody /opt/smartdc/ufds

# Setup HAProxy user/group
/usr/sbin/groupadd haproxy
/usr/sbin/useradd -d /tmp -g haproxy -s /usr/bin/false haproxy
/usr/bin/passwd -N haproxy

echo "Creating log directory"
mkdir -p /var/log/ufds
chown -R nobody:nobody /var/log/ufds

echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 \
    -keyout /opt/smartdc/ufds/ssl/key.pem -out /opt/smartdc/ufds/ssl/cert.pem \
    -days 365

/opt/smartdc/bin/configure || fatal "Unable to configure zone."

# Wait up to 50s for UFDS to come up to load bootstrap data.
echo "Wait for ufds service to come online."
for i in 0 1 2 3 4 5 6 7 8 9; do
    echo "Is ufds service online? (i=$i)"
    [ "$(/usr/bin/svcs -H -o state ufds)" == "online" ] && break
    sleep 5
done
if [[ "$(/usr/bin/svcs -H -o state ufds)" != "online" ]]; then
    echo "Timeout waiting for ufds service to come online."
    echo "Marking ufds SMF service as in maintenance."
    svcadm mark maintenance svc:/smartdc/site/ufds:default
    exit 1
fi

echo "Loading bootstrap data"
cat > /tmp/.bootstrap.ldif <<HERE
version: 1

dn: o=smartdc
objectclass: organization
o: smartdc

dn: ou=users, o=smartdc
objectclass: organizationalUnit
ou: users

dn: ou=groups, o=smartdc
objectclass: organizationalUnit
ou: groups

dn: uuid=${UFDS_ADMIN_UUID}, ou=users, o=smartdc
login: ${UFDS_ADMIN_LOGIN}
uuid: ${UFDS_ADMIN_UUID}
userpassword: ${UFDS_ADMIN_PW}
email: ${UFDS_ADMIN_EMAIL}
cn: Admin
sn: User
objectclass: sdcPerson

dn: cn=operators, ou=groups, o=smartdc
uniquemember: uuid=${UFDS_ADMIN_UUID}, ou=users, o=smartdc
objectclass: groupOfUniqueNames

dn: datacenter=${DATACENTER_NAME}, o=smartdc
datacenter: ${DATACENTER_NAME}
company: ${DATACENTER_COMPANY_NAME}
address: ${DATACENTER_LOCATION}
objectclass: datacenter

dn: ou=servers, datacenter=${DATACENTER_NAME}, o=smartdc
objectclass: organizationalUnit
ou: servers
HERE

cat /tmp/.bootstrap.ldif
LDAPTLS_REQCERT=allow /opt/local/bin/ldapadd -H ldaps://127.0.0.1:636 -x \
    -D ${UFDS_LDAP_ROOT_DN} -w ${UFDS_LDAP_ROOT_PW} -f /tmp/.bootstrap.ldif

# 68 is entry already exists; if we're setting up a redundant UFDS, the entries
# will already exist. This is a little bit hacky, and a better way would be to
# pass in metadata to this script such that we can skip this altogether if
# provision > 1, but this works for now.
rc=$?
if [ $rc -ne 0 ] && [ $rc -ne 68 ]; then
    echo "Failed to load bootstrap data, exiting"
    echo "Marking ufds SMF service as in maintenance"
    svcadm mark maintenance svc:/smartdc/site/ufds:default
    exit 1
fi

rm -f /tmp/.bootstrap.ldif

touch /var/svc/setup_complete
echo "setup done"
(sleep 5; cp /var/svc/setup.log /var/svc/setup_init.log) &

exit 0
