#!/usr/bin/bash

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin
export PATH

if [[ $# != 2 ]]; then
  echo "Usage: $0 <zone_name> <target_directory>"
  exit 1
fi

ZONE=$1
TARGET_DIR=$2
ROLE="usageapi"

STAMP=$(date +'%F-%H-%M-%S-%Z')
BACKUP_VERSION="${ROLE}-${STAMP}"

ZONE_DATASET=$(zfs list -H -o name|grep "${ZONE}$")
DATA_DATASET=$(zfs list -H -o name|grep "${ZONE}/data$")

# We cannot backup if cannot find zone's dataset:
if [[ -z $ZONE_DATASET ]]; then
  echo "FATAL: Cannot find '${ROLE}' dataset"
  exit 103
fi

# We cannot backup if cannot find data dataset:
if [[ -z $DATA_DATASET ]]; then
  echo "FATAL: Cannot find '${ROLE}' data dataset"
  exit 104
fi

# Create zone dataset backup
echo "==> Creating snapshot of '${ZONE}' dataset"
zfs snapshot "zones/${ZONE}@${BACKUP_VERSION}" 2>&1
if [[ $? -gt 0 ]]; then
    echo "FATAL: Unable to snapshot dataset"
    exit 105
fi

# Create data dataset backup
echo "==> Creating snapshot of '${ZONE}/data' dataset"
zfs snapshot "zones/${ZONE}/data@${BACKUP_VERSION}" 2>&1
if [[ $? -gt 0 ]]; then
  echo "FATAL: Unable to snapshot data dataset"
  exit 106
fi

# Create backup directory for the zone stuff:
echo "==> Creating backup directory '${TARGET_DIR}/${ROLE}'"
[[ ! -e "${TARGET_DIR}" ]] && mkdir -p "${TARGET_DIR}"
mkdir -p "${TARGET_DIR}/${ROLE}"

echo "==> Saving data dataset"
zfs send "zones/${ZONE}/data@${BACKUP_VERSION}" \
    > "${TARGET_DIR}/${ROLE}/data.zfs" 2>&1
if [[ $? -gt 0 ]]; then
  echo "Unable to zfs send data dataset"
  exit 107
fi

echo "==> Removing temporary data snapshot of '${ZONE}'"
/usr/sbin/zfs destroy "zones/${ZONE}/data@${BACKUP_VERSION}"

echo "==> Saving configs"
(cd "/zones/${ZONE}/.zfs/snapshot/${BACKUP_VERSION}/root/opt/smartdc/usageapi"; \
    tar cbzfE 512 "${TARGET_DIR}/${ROLE}/config.tar.gz" config/*)
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to backup configuration"
  exit 108
fi

echo "==> Saving logs"
(cd "/zones/${ZONE}/.zfs/snapshot/${BACKUP_VERSION}/root/var/svc"; \
    tar cbzfE 512 "${TARGET_DIR}/${ROLE}/logs.tar.gz" log/*usageapi*)

echo "==> Removing temporary zone snapshot of '${ZONE}'"
/usr/sbin/zfs destroy "zones/${ZONE}@${BACKUP_VERSION}"

echo "All done!!!"
exit 0
