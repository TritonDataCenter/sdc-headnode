#!/usr/bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#

set -o xtrace

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

eval $(cat /opt/smartdc/etc/zoneconfig)

# The user-script is downloaded and executed on every zone boot. We take
# advantage of this to maintain the cached config values post-setup.
if [ -e /var/svc/setup_complete ]; then
	oldpw=`nawk '{
	    if (! done && $1 == "\"password\":") {
		print substr($2, 2, length($2) - 3)
		done = 1
	    }
	}' /opt/smartdc/usageapi/config/config.json`
	[ "$usageapi_http_admin_pw" == "$oldpw" ] && exit 0

	echo "Updating usageapi configuration"
	nawk -v p=$usageapi_http_admin_pw '{
	    if (! done && $1 == "\"password\":") {
		printf("  \"password\": \"%s\",\n", p)
		done = 1
	    } else {
		print $0
	    }
	}' /opt/smartdc/usageapi/config/config.json \
	 > /opt/smartdc/usageapi/config/config.json.new
	mv /opt/smartdc/usageapi/config/config.json.new \
	   /opt/smartdc/usageapi/config/config.json
	svcadm restart usageapi
fi

# XXX is net1 external nic?
EXT_IPADDR=`ifconfig net1 | nawk '{if ($1 == "inet") print $2}'`
usageapi_EXTERNAL_URL="https://$EXT_IPADDR"
ADMIN_IPADDR=`ifconfig net0 | nawk '{if ($1 == "inet") print $2}'`

# Function calculates number of bit in a netmask
#
mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}


# Note this is temporary until we add a PostgreSQL zone

echo "listen_addresses='${POSTGRES_HOST}, ${ADMIN_IPADDR}'" >> /var/pgsql/data91/postgresql.conf
numbits=$(mask2cidr ${ADMIN_NETMASK})
echo "host    all    all    ${ADMIN_NETWORK}/${numbits}    password" >> /var/pgsql/data91/pg_hba.conf

# enable slow query logging (anything beyond 200ms right now)
echo "log_min_duration_statement = 200" >> /var/pgsql/data91/postgresql.conf

# We don't need full_page_writes due to ZFS's transactional nature, and synchronous_commit is
# unnecessary since consumer.js will correct any lost uncommitted data automatically in almost all cases
echo "full_page_writes = off" >> /var/pgsql/data91/postgresql.conf
echo "synchronous_commit = off" >> /var/pgsql/data91/postgresql.conf

# set pool recordsize to the same size as Postgres' block size
zfs set recordsize=8k `zfs list | sed -n 's/.*\/\(zones.*data\)/\1/p'`

# Import postgres manifest straight from the pkgsrc file:
if [[ -z $(/usr/bin/svcs -a|grep postgresql) ]]; then
  echo "Importing posgtresql service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/postgresql:pg91.xml
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/postgresql:pg91 refresh
  /usr/sbin/svcadm enable -s postgresql:pg91
else
  echo "Restarting postgresql service"
  /usr/sbin/svcadm disable -s postgresql:pg91
  /usr/sbin/svcadm enable -s postgresql:pg91
  sleep 2
fi

# We're gonna have a PostgreSQL/moray/manta zone, this is temporary here:
for i in 0 1 2 3 4 5 6 7 8 9
do
    svc=$(/usr/bin/svcs -H network/postgresql)
    state=${svc%% * *}
    [ "$state" == "online" ] && break
    sleep 5
done
# Move forward anyway
# If we cannot get a db listing using our password, we need to set it:
if ! PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql -U ${POSTGRES_USER} \
  -h ${POSTGRES_HOST} -c "\l" 2>/dev/null; then
  if ! PGPASSWORD='postgres' /opt/local/bin/psql -U ${POSTGRES_USER} \
    -h ${POSTGRES_HOST} \
    -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PW';" template1 ; then
      echo "Changing the default password failed"
  fi
fi

if [[ -z $(PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql -U ${POSTGRES_USER} \
  -h ${POSTGRES_HOST} -c "\l"|grep usageapi_production) ]]; then
    echo "Creating usageapi_production database"
    PGPASSWORD=${POSTGRES_PW} /opt/local/bin/createdb -U ${POSTGRES_USER} \
      -h ${POSTGRES_HOST} usageapi_production
fi

cat > /opt/smartdc/usageapi/config/config.json <<HERE
{
  "siteName": "${usageapi_EXTERNAL_URL}",
  "port": 443,
  "cert": "/opt/smartdc/usageapi/ssl/cert.pem",
  "key": "/opt/smartdc/usageapi/ssl/key.pem",
  "logLevel": 4,
  "user": "${HTTP_ADMIN_USER}",
  "password": "${HTTP_ADMIN_PW}",
  "amqp": {
    "host": "${RABBIT_IP}",
    "login": "guest",
    "password": "guest",
    "vhost": "/",
    "port": 5672
  },
  "postgres": {
    "db": "usageapi_production",
    "host": "${POSTGRES_HOST}",
    "port": 5432,
    "user": "${POSTGRES_USER}",
    "password": "${POSTGRES_PW}"
  },  "userThrottles": {
    "all": {
      "username": true,
      "burst": 30,
      "rate": 10,
      "overrides": {
        "${UFDS_ADMIN_LOGIN}": {
          "burst": 0,
          "rate": 0
        }
      }
    }
  }
}
HERE

echo "Importing usageapi_http_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_http_manifest.xml

echo "Importing usageapi_consumer_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_consumer_manifest.xml

echo "Importing usageapi_queue_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_queue_manifest.xml

echo "Importing usageapi_migrate_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_migrate_manifest.xml

echo "Enabling service usageapi-http"
/usr/sbin/svcadm disable smartdc/site/usageapi-http
/usr/sbin/svcadm enable smartdc/site/usageapi-http
echo "Enabling service usageapi-consumer"
/usr/sbin/svcadm disable smartdc/site/usageapi-consumer
/usr/sbin/svcadm enable smartdc/site/usageapi-consumer
echo "Enabling service usageapi-queue"
/usr/sbin/svcadm disable smartdc/site/usageapi-queue
/usr/sbin/svcadm enable smartdc/site/usageapi-queue
echo "Enabling service usageapi-migrate"
/usr/sbin/svcadm disable smartdc/site/usageapi-migrate
/usr/sbin/svcadm enable smartdc/site/usageapi-migrate

exit 0
