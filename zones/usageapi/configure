#!/usr/bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#

export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace
set -e

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

# The user-script is downloaded and executed on every zone boot. We take
# advantage of this to maintain the cached config values post-setup.
if [[ -e /var/svc/setup_complete ]]; then
    exit 0
fi

# Function calculates number of bit in a netmask
#
mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}


# Note this is temporary until we add a PostgreSQL zone

sapi_metadata=/opt/smartdc/etc/sapi_metadata.json
ADMIN_IPADDR=$(json -f ${sapi_metadata} admin_ip)
ADMIN_NETWORK=$(json -f ${sapi_metadata} admin_network)
ADMIN_NETMASK=$(json -f ${sapi_metadata} admin_netmask)

DATASET=`/usr/sbin/zfs list | /usr/bin/sed -n 's/.*\/\(zones.*data\)/\1/p'`

if [ ! -e /$DATASET/pgsql ]; then
    echo "listen_addresses='127.0.0.1, ${ADMIN_IPADDR}'" >> /var/pgsql/data91/postgresql.conf
    numbits=$(mask2cidr ${ADMIN_NETMASK})
    echo "host    all    all    ${ADMIN_NETWORK}/${numbits}    password" >> /var/pgsql/data91/pg_hba.conf

    # enable slow query logging (anything beyond 200ms right now)
    echo "log_min_duration_statement = 200" >> /var/pgsql/data91/postgresql.conf

    # We don't need full_page_writes due to ZFS's transactional nature, and synchronous_commit is
    # unnecessary since consumer.js will correct any lost uncommitted data automatically in almost all cases
    echo "full_page_writes = off" >> /var/pgsql/data91/postgresql.conf
    echo "synchronous_commit = off" >> /var/pgsql/data91/postgresql.conf

    # Set memory usage. These numbers assume a ~768MB usageapi zone.
    echo "shared_buffers = 192MB" >> /var/pgsql/data91/postgresql.conf
    echo "effective_cache_size = 512MB" >> /var/pgsql/data91/postgresql.conf

    # set pool recordsize to the same size as Postgres' block size
    /usr/sbin/zfs set recordsize=8k $DATASET

    # Postgres data typically compresses well, so enable lz4 compression
    /usr/sbin/zfs set compression=lz4 $DATASET

    # move Postgres data into DATASET
    mv /var/pgsql /$DATASET
else
    rm -rf /var/pgsql || true
fi

ln -s /$DATASET/pgsql /var/pgsql

# Import postgres manifest straight from the pkgsrc file:
echo "Importing posgtresql service"
/usr/sbin/svccfg import /opt/local/share/smf/postgresql91-server/manifest.xml
/usr/sbin/svcadm enable -s postgresql

# Wait till Postgres is up and accepting connections.
for i in {1..25}
do
    if ! PGPASSWORD=PgresPass123 /opt/local/bin/psql -U postgres \
       -h 127.0.0.1 -l 2>&1 | grep 'could not connect' ; then
        break;
    fi
    sleep 2
done

# Move forward anyway
# If we cannot get a db listing using our password, we need to set it:
if ! PGPASSWORD=PgresPass123 /opt/local/bin/psql -U postgres \
  -h 127.0.0.1 -l ; then
  if ! PGPASSWORD='postgres' /opt/local/bin/psql -U postgres \
    -h 127.0.0.1 \
    -c "ALTER USER postgres WITH PASSWORD 'PgresPass123';" template1 ; then
      echo "Changing the default password failed"
  fi
fi

if [[ -z $(PGPASSWORD=PgresPass123 /opt/local/bin/psql -U postgres \
  -h 127.0.0.1 -l | grep usageapi_production) ]]; then
    echo "Creating usageapi_production database"
    PGPASSWORD=PgresPass123 /opt/local/bin/createdb -U postgres \
      -h 127.0.0.1 usageapi_production
fi

# cat > /opt/smartdc/usageapi/config/config.json <<HERE
# {
#   "siteName": "${usageapi_EXTERNAL_URL}",
#   "port": 80,
#   "logLevel": "info",
#   "metering_granularity": 3600,
#   "amqp": {
#     "host": "${RABBIT_IP}",
#     "login": "guest",
#     "password": "guest",
#     "vhost": "/",
#     "port": 5672
#   },
#   "postgres": {
#     "db": "usageapi_production",
#     "host": "127.0.0.1",
#     "port": 5432,
#     "user": "postgres",
#     "password": "PgresPass123"
#   },  "userThrottles": {
#     "all": {
#       "username": true,
#       "burst": 30,
#       "rate": 10,
#       "overrides": {
#         "${UFDS_ADMIN_LOGIN}": {
#           "burst": 0,
#           "rate": 0
#         }
#       }
#     }
#   }
# }
# HERE

echo "Importing usageapi_http_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_http_manifest.xml

echo "Importing usageapi_consumer_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_consumer_manifest.xml

echo "Importing usageapi_queue_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_queue_manifest.xml

echo "Importing usageapi_migrate_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/usageapi/smf/manifests/usageapi_migrate_manifest.xml

echo "Enabling service usageapi-http"
/usr/sbin/svcadm disable smartdc/site/usageapi-http
/usr/sbin/svcadm enable smartdc/site/usageapi-http
echo "Enabling service usageapi-consumer"
/usr/sbin/svcadm disable smartdc/site/usageapi-consumer
/usr/sbin/svcadm enable smartdc/site/usageapi-consumer
echo "Enabling service usageapi-queue"
/usr/sbin/svcadm disable smartdc/site/usageapi-queue
/usr/sbin/svcadm enable smartdc/site/usageapi-queue
echo "Enabling service usageapi-migrate"
/usr/sbin/svcadm disable smartdc/site/usageapi-migrate
/usr/sbin/svcadm enable smartdc/site/usageapi-migrate

exit 0
