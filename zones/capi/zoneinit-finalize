#!/bin/bash

echo "99 finalizing capi zone"

#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

# Apply configuration from /opt/smartdc/etc/zoneconfig now
source /opt/smartdc/bin/configure.sh

app_name='capi'

if [[ ! -n ${KEEP_DATA_DATASET} ]]; then
  echo "Creating $app_name-setup service"

  cat >"/lib/svc/manifest/site/$app_name-setup.xml" <<SETUP_SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app_name}-setup' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app_name-data/$app_name-setup-service.sh' timeout_seconds='180'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Setup service ($app_name)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SETUP_SMF
fi




cat > "/opt/smartdc/capi-data/capi-setup-service.sh" <<CAPI_SETUP_SERVICE
#!/usr/bin/bash

set -o xtrace

POSTGRES_HOST='$POSTGRES_HOST'
POSTGRES_USER='$POSTGRES_USER'
POSTGRES_PW='$POSTGRES_PW'

PGPASSFILE=/opt/smartdc/.pgpass

# This is a workaround.  Normally we would want a proper SMF dependency on the
# postgresql svc, but its too late in the release cycle so we're going to
# hardcode a loop to check the state of the svc here.  We should fix this
# later.
for i in 0 1 2 3 4 5 6 7 8 9
do
    svc=\$(/usr/bin/svcs -H network/postgresql)
    state=\${svc%% * *}
    [ "\$state" == "online" ] && break
    sleep 5
done
# No matter what the state now, we move on.

# Postgres starts out with the default pw of 'postgres'.  We need to change
# it to POSTGRES_PW before we can do anything else.
export PGPASSWORD=postgres
if ! /opt/local/bin/psql -U postgres \
    -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PW';" template1 ; then
    # We failed to change the pw.  This might happen if we already changed it
    # but the method failed later and we are re-running.  Since we are running
    # with errexit, we need to handle a failure, but we assume the pw is
    # already updated and just note this.
    echo "Changing the default password failed"
fi
export -n PGPASSWORD

# Given PostgreSQL will be into a separated zone, we cannot rely into SMF
# to test DB availability. Need to ping the DB and proceed once we've
# verified we can stablish a connection:

RETRY_AFTER='$DBCONN_RETRY_AFTER' NUM_ATTEMPTS='$DBCONN_NUM_ATTEMPTS' RACK_ENV=production /opt/local/bin/ruby /opt/smartdc/capi/script/psql-test-connect.rb

if [[ \$? -ne 0 ]]; then
  echo "PostgreSQL not available after ${DBCONN_NUM_ATTEMPTS}, aborting."
  exit 1
else
  echo "Verified PostgreSQL availability, moving forward."
fi

# Without this, mapi db existence checking will always fail:
echo "\$POSTGRES_HOST:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /root/.pgpass
chmod 0600 /root/.pgpass

if [[ -z \$(/opt/local/bin/psql -U postgres -h \$POSTGRES_HOST -c "\\l"|grep capi) ]]; then
  echo "Creating capi database"
  echo "\$POSTGRES_HOST:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h \$POSTGRES_HOST capi"
fi

echo "Auto Upgrading Customers API Database."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake db:autoupgrade -f /opt/smartdc/capi/Rakefile"
sleep 1


if [[ -z \$(/usr/bin/svcs -a|grep capi|grep -v capi-update|grep -v capi-setup|grep -v capi_ipf_setup) ]]; then
  echo "Importing Customers API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/capi/config/unicorn.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/application/capi:default refresh
fi

echo "Calling CAPI Admin User creation task."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production \
  ADMIN_UUID="${CAPI_ADMIN_UUID}" \
  ADMIN_PW="${CAPI_ADMIN_PW}" \
  ADMIN_LOGIN="${CAPI_ADMIN_LOGIN}" \
  ADMIN_EMAIL="${CAPI_ADMIN_EMAIL}" \
  /opt/local/bin/rake install:capi_admin -f /opt/smartdc/capi/Rakefile"
sleep 1

# Remove the service, we don't wanna run it again (maybe also delete the script?)
echo "Deleting '${app_name}-setup' service"
/usr/sbin/svccfg delete "platform/smartdc/capi-setup"

# Ensure we remove the setup service manifest from this zones core boot manifests
rm /lib/svc/manifest/site/capi-setup.xml

echo "Writing customer.url file to /root/customer.url"
echo "/customers/${CAPI_ADMIN_UUID}/zones" > /root/customer.url

if [[ -f \$(svcprop -p 'capi/allowed_file' svc:/platform/smartdc/capi_ipf_setup) ]]; then
    svcadm enable svc:/network/ipfilter:default
fi


exit 0

CAPI_SETUP_SERVICE

chmod +x "/opt/smartdc/capi-data/capi-setup-service.sh"

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

# If we are upgrading, need to restore the DB backup, run migrations and
# import the application services:
if [[ -n ${KEEP_DATA_DATASET} ]]; then
  data_version=$(cat /opt/smartdc/${app_name}-data/VERSION)
  dump_file_path=$(ls /opt/smartdc/${app_name}-data/${app_name}-${data_version}*.pg_dump)
  dump_file=$(basename ${dump_file_path%.*})
  db_backup_version=$(echo ${dump_file} | cut -c '6-')

  # Postgres starts out with the default pw of 'postgres'.  We need to change
  # it to POSTGRES_PW before we can do anything else.
  export PGPASSWORD=postgres
  if ! /opt/local/bin/psql -U postgres \
      -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PW';" template1 ; then
      # We failed to change the pw.  This might happen if we already changed it
      # but the method failed later and we are re-running.  Since we are running
      # with errexit, we need to handle a failure, but we assume the pw is
      # already updated and just note this.
      echo "Changing the default password failed"
  fi
  export -n PGPASSWORD

  if [[ -f ${dump_file_path} ]]; then
    echo "Restoring PostgreSQL DB to previous version"
    VERSION=${db_backup_version} /opt/local/bin/rake pg:restore -f /opt/smartdc/${app_name}/Rakefile
    if [[ $? -gt 0 ]]; then
      echo "FATAL: Unable to restore PostgreSQL Backup. \nPlease, verify DB integrity from the zone and, eventually,\n restore the DB from the file \n'/opt/smartdc/${app_name}-data/${app_name}-${db_backup_version}.pg_dump'."
      exit 1
    fi
  else
    echo "FATAL: Cannot find '${app_name}-${db_backup_version}.pg_dump' on the zone. Unable to restore."
    exit 1
  fi

  echo "Auto Upgrading Customers API Database."
  su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake db:autoupgrade -f /opt/smartdc/capi/Rakefile"
  sleep 1

  if [[ -z $(/usr/bin/svcs -a|grep capi|grep -v capi-update|grep -v capi-setup|grep -v capi_ipf_setup) ]]; then
    echo "Importing Customers API Unicorn Manifest"
    /usr/sbin/svccfg import /opt/smartdc/capi/config/unicorn.smf
    #/usr/sbin/svccfg -s svc:/network/smartdc/application/capi:default refresh
  fi

  if [[ -f $(svcprop -p 'capi/allowed_file' svc:/platform/smartdc/capi_ipf_setup) ]]; then
    svcadm enable svc:/network/ipfilter:default
  fi

fi

