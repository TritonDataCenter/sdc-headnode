#!/bin/bash

svcadm clear network/physical:default >/dev/null 2>&1

echo "99 finalizing capi zone"

for app in capi dnsapi; do

    echo "Creating $app-update service"

    cat >"/opt/local/share/smf/manifest/$app-update.xml" <<SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app}-update' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app-data/$app-update-service.sh' timeout_seconds='60'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Update service ($app)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SMF

    if [[ ! $(/usr/bin/svcs -a|grep ${app}-update) ]]; then
      echo "Importing '${app}-update' service"
      $(/usr/sbin/svccfg import /opt/local/share/smf/manifest/$app-update.xml)
    fi

    if [[  "$(/usr/bin/svcs -Ho state ${app}-update)" != "online"  ]]; then
      echo "Enabling '${app}-update' service"
      $(/usr/sbin/svcadm enable -s ${app}-update)
    fi

done


# Import postgres manifest straight from the pkgsrc file:
if [[ -z $(/usr/bin/svcs -a|grep postgresql) ]]; then
  echo "Importing posgtresql service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/postgresql:pg90.xml
  /usr/sbin/svcadm enable -s postgresql
  sleep 2
fi

# These happen to do not be created always:
if [[ ! -e /opt/local/bin/ruby ]]; then
  echo "Symlinking ruby"
  ln -s /opt/local/bin/ruby18 /opt/local/bin/ruby
fi

if [[ ! -e /opt/local/bin/irb ]]; then
  echo "Symlinking irb"
  ln -s /opt/local/bin/irb18 /opt/local/bin/irb
fi

echo "Creating jill account"
groupadd jill
useradd -g jill -d /opt/smartdc jill
chown -R jill:jill /opt/smartdc
echo "jill:naiWaic8sh" | /root/changepass -n -m > /dev/null 2>&1
usermod -P 'Service Management' jill
usermod -s /usr/bin/bash jill

if [[ -z $(psql -U postgres -h $POSTGRES_HOST -c "\\l"|grep capi) ]]; then
  echo "Creating capi database"
  echo "$POSTGRES_HOST:*:*:$POSTGRES_USER:$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h $POSTGRES_HOST capi"

  echo "Creating dnsapi database"
  su - jill -c "/opt/local/bin/createdb -U postgres -h $POSTGRES_HOST dnsapi"
fi



# CAPI specific

if [[ ! -e /opt/smartdc/capi/config/database.yml ]]; then
  echo "Creating Customers API config files."
  su - jill -c "cd /opt/smartdc/capi; /opt/local/bin/rake dev:configs -f /opt/smartdc/capi/Rakefile"
fi
sleep 1

# Note these files should have been created by previous Rake task.
# If we copy these files post "gsed", everything is reset:
if [[ ! -e /opt/smartdc/capi/config/config.ru ]]; then
  cp /opt/smartdc/capi/config/config.ru.sample /opt/smartdc/capi/config/config.ru
fi

if [[ ! -e /opt/smartdc/capi/config/config.yml ]]; then
  cp /opt/smartdc/capi/config/config.yml.sample /opt/smartdc/capi/config/config.yml
fi

if [[ ! -e /opt/smartdc/capi/gems/gems ]] || [[ $(ls /opt/smartdc/capi/gems/gems| wc -l) -eq 0 ]]; then
  echo "Unpacking frozen gems for Customers API."
  (cd /opt/smartdc/capi; PATH=/opt/local/bin:$PATH /opt/local/bin/rake gems:deploy -f /opt/smartdc/capi/Rakefile)
fi

if [[ ! -e /opt/smartdc/capi/config/unicorn.smf ]]; then
  echo "Creating Customers API Unicorn Manifest."
  /opt/local/bin/ruby18 -rerb -e "user='jill';group='jill';app_environment='production';application='capi'; working_directory='/opt/smartdc/capi'; puts ERB.new(File.read('/opt/smartdc/capi/smartdc/unicorn.smf.erb')).result" > /opt/smartdc/capi/config/unicorn.smf
  chown jill:jill /opt/smartdc/capi/config/unicorn.smf
fi

if [[ ! -e /opt/smartdc/capi/config/unicorn.conf ]]; then
  echo "Creating Customers API Unicorn Configuration file."
  /opt/local/bin/ruby18 -rerb -e "app_port='8080'; worker_processes=1; working_directory='/opt/smartdc/capi'; application='capi'; puts ERB.new(File.read('/opt/smartdc/capi/smartdc/unicorn.conf.erb')).result" > /opt/smartdc/capi/config/unicorn.conf
  chown jill:jill /opt/smartdc/capi/config/unicorn.conf
fi

if [[ -z $(cat /opt/smartdc/capi/config/database.yml|grep capi) ]]; then
  echo "Configuring Customers API Database."
  cat > /opt/smartdc/capi/config/database.yml <<CAPI_DB

:production: &prod
  :adapter: postgres
  :database: capi
  :host: $POSTGRES_HOST
  :username: $POSTGRES_USER
  :password: $POSTGRES_PW
  :encoding: UTF-8

CAPI_DB
fi

if [[ ! -e /opt/smartdc/capi/tmp/pids ]]; then
  su - jill -c "mkdir -p /opt/smartdc/capi/tmp/pids"
fi

echo "Auto Upgrading Customers API Database."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake db:autoupgrade -f /opt/smartdc/capi/Rakefile"
sleep 1

if [[ -z $(/usr/bin/svcs -a|grep capi|grep -v capi-update|grep -v capi_ipf_setup) ]]; then
  echo "Importing Customers API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/capi/config/unicorn.smf
  sleep 1
fi

echo "Calling CAPI Admin User creation task."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production \
  ADMIN_UUID="${CAPI_ADMIN_UUID}" \
  ADMIN_PW="${CAPI_ADMIN_PW}" \
  ADMIN_LOGIN="${CAPI_ADMIN_LOGIN}" \
  ADMIN_EMAIL="${CAPI_ADMIN_EMAIL}" \
  /opt/local/bin/rake install:capi_admin -f /opt/smartdc/capi/Rakefile"
sleep 1



# DNS API specific

if [[ ! -e /opt/smartdc/dnsapi/config/database.yml ]]; then
  echo "Creating DNS API config files."
  su - jill -c "cd /opt/smartdc/dnsapi; /opt/local/bin/rake dev:configs -f /opt/smartdc/dnsapi/Rakefile"
fi
sleep 1

# Note these files should have been created by previous Rake task.
# If we copy these files post "gsed", everything is reset:
if [[ ! -e /opt/smartdc/dnsapi/config/config.ru ]]; then
  cp /opt/smartdc/dnsapi/config/config.ru.sample /opt/smartdc/dnsapi/config/config.ru
fi

if [[ ! -e /opt/smartdc/dnsapi/config/config.yml ]]; then
  cp /opt/smartdc/dnsapi/config/config.yml.sample /opt/smartdc/dnsapi/config/config.yml
fi

if [[ ! -e /opt/smartdc/dnsapi/gems/gems ]] || [[ $(ls /opt/smartdc/dnsapi/gems/gems| wc -l) -eq 0 ]]; then
  echo "Unpacking frozen gems for DNS API."
  (cd /opt/smartdc/dnsapi; PATH=/opt/local/bin:$PATH /opt/local/bin/rake gems:deploy -f /opt/smartdc/dnsapi/Rakefile)
fi

if [[ ! -e /opt/smartdc/dnsapi/config/unicorn.smf ]]; then
  echo "Creating DNS API Unicorn Manifest."
  /opt/local/bin/ruby18 -rerb -e "user='jill';group='jill';app_environment='production';application='dnsapi'; working_directory='/opt/smartdc/dnsapi'; puts ERB.new(File.read('/opt/smartdc/dnsapi/config/deploy/unicorn.smf.erb')).result" > /opt/smartdc/dnsapi/config/unicorn.smf
  chown jill:jill /opt/smartdc/dnsapi/config/unicorn.smf
fi

if [[ ! -e /opt/smartdc/dnsapi/config/unicorn.conf ]]; then
  echo "Creating DNS API Unicorn Configuration file."
  /opt/local/bin/ruby18 -rerb -e "app_port='8000'; worker_processes=1; working_directory='/opt/smartdc/dnsapi'; application='dnsapi'; puts ERB.new(File.read('/opt/smartdc/dnsapi/config/unicorn.conf.erb')).result" > /opt/smartdc/dnsapi/config/unicorn.conf
  chown jill:jill /opt/smartdc/dnsapi/config/unicorn.conf
fi

if [[ -z $(cat /opt/smartdc/dnsapi/config/database.yml|grep dnsapi) ]]; then
  echo "Configuring DNS API Database."
  cat > /opt/smartdc/dnsapi/config/database.yml <<DNSAPI_DB

:production: &prod
  :adapter: postgres
  :database: dnsapi
  :host: $POSTGRES_HOST
  :username: $POSTGRES_USER
  :password: $POSTGRES_PW
  :encoding: UTF-8

DNSAPI_DB
fi

if [[ ! -e /opt/smartdc/dnsapi/tmp/pids ]]; then
  su - jill -c "mkdir -p /opt/smartdc/dnsapi/tmp/pids"
fi

echo "Auto Upgrading DNS API Database."
su - jill -c "cd /opt/smartdc/dnsapi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake db:autoupgrade -f /opt/smartdc/dnsapi/Rakefile"
sleep 1


# Import services

if [[ -z $(/usr/bin/svcs -a|grep capi|grep -v capi-update|grep -v capi_ipf_setup) ]]; then
  echo "Importing Customers API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/capi/config/unicorn.smf
  sleep 1
fi

if [[ -z $(/usr/bin/svcs -a|grep dnsapi|grep -v dnsapi-update) ]]; then
  echo "Importing DNS API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/dnsapi/config/unicorn.smf
  sleep 1
fi



# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

echo "Writing customer.url file to /root/customer.url"
echo "/customers/${CAPI_ADMIN_UUID}/containers" > /root/customer.url

if [[ -f $(svcprop -p 'capi/allowed_file' svc:/platform/smartdc/capi_ipf_setup) ]]; then
    svcadm enable svc:/network/ipfilter:default
fi
