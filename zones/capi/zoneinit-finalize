#!/bin/bash

svcadm clear network/physical:default >/dev/null 2>&1

echo "99 finalizing capi zone"

#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

for app in capi dnsapi; do
  # from zoneinit-common:
  ruby_app_update_service $app
done

# Save the zoneconfig file on the configure dir (for testing purposes right now)
cat /root/zoneconfig > /opt/smartdc/bin/zoneconfig
# Source the configure.sh script now:
source /opt/smartdc/bin/configure.sh

for app_name in capi dnsapi; do

    echo "Creating $app_name-setup service"

    cat >"/lib/svc/manifest/site/$app_name-setup.xml" <<SETUP_SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app_name}-setup' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app_name-data/$app_name-setup-service.sh' timeout_seconds='180'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Setup service ($app_name)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SETUP_SMF

done



cat > "/opt/smartdc/capi-data/capi-setup-service.sh" <<CAPI_SETUP_SERVICE
#!/usr/bin/bash

set -o xtrace

POSTGRES_HOST='$POSTGRES_HOST'
POSTGRES_USER='$POSTGRES_USER'
POSTGRES_PW='$POSTGRES_PW'

PGPASSFILE=/opt/smartdc/.pgpass

# Given PostgreSQL will be into a separated zone, we cannot rely into SMF
# to test DB availability. Need to ping the DB and proceed once we've
# verified we can stablish a connection:

RETRY_AFTER='$DBCONN_RETRY_AFTER' NUM_ATTEMPTS='$DBCONN_NUM_ATTEMPTS' RACK_ENV=production /opt/local/bin/ruby18 /opt/smartdc/capi/script/psql-test-connect.rb

if [[ \$? -ne 0 ]]; then
  echo "PostgreSQL not available after ${DBCONN_NUM_ATTEMPTS}, aborting."
  exit 1
else
  echo "Verified PostgreSQL availability, moving forward."
fi

if [[ -z \$(/opt/local/bin/psql -U postgres -h \$POSTGRES_HOST -c "\\l"|grep capi) ]]; then
  echo "Creating capi database"
  echo "\$POSTGRES_HOST:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h \$POSTGRES_HOST capi"
fi

echo "Auto Upgrading Customers API Database."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake18 db:autoupgrade -f /opt/smartdc/capi/Rakefile"
sleep 1


if [[ -z \$(/usr/bin/svcs -a|grep capi|grep -v capi-update|grep -v capi-setup|grep -v capi_ipf_setup) ]]; then
  echo "Importing Customers API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/capi/config/unicorn.smf
  sleep 1
fi

echo "Calling CAPI Admin User creation task."
su - jill -c "cd /opt/smartdc/capi; RACK_ENV=production SINATRA_ENV=production \
  ADMIN_UUID="${CAPI_ADMIN_UUID}" \
  ADMIN_PW="${CAPI_ADMIN_PW}" \
  ADMIN_LOGIN="${CAPI_ADMIN_LOGIN}" \
  ADMIN_EMAIL="${CAPI_ADMIN_EMAIL}" \
  /opt/local/bin/rake18 install:capi_admin -f /opt/smartdc/capi/Rakefile"
sleep 1

if [[ ! \$(/usr/bin/svcs -a|grep capi-update) ]]; then
  echo "Importing 'capi-update' service"
  \$(/usr/sbin/svccfg import /opt/local/share/smf/manifest/capi-update.xml)
fi

if [[  "\$(/usr/bin/svcs -Ho state capi-update)" != "online"  ]]; then
  echo "Enabling 'capi-update' service"
  \$(/usr/sbin/svcadm enable -s capi-update)
fi

# Remove the service, we don't wanna run it again (maybe also delete the script?)
echo "Deleting '${app_name}-setup' service"
/usr/sbin/svccfg delete "platform/smartdc/capi-setup"

# Ensure we remove the setup service manifest from this zones core boot manifests
rm /lib/svc/manifest/site/capi-setup.xml

echo "Writing customer.url file to /root/customer.url"
echo "/customers/${CAPI_ADMIN_UUID}/zones" > /root/customer.url

if [[ -f \$(svcprop -p 'capi/allowed_file' svc:/platform/smartdc/capi_ipf_setup) ]]; then
    svcadm enable svc:/network/ipfilter:default
fi


exit 0

CAPI_SETUP_SERVICE



cat > "/opt/smartdc/dnsapi-data/dnsapi-setup-service.sh" <<DNSAPI_SETUP_SERVICE
#!/usr/bin/bash

set -o xtrace

POSTGRES_HOST='$POSTGRES_HOST'
POSTGRES_USER='$POSTGRES_USER'
POSTGRES_PW='$POSTGRES_PW'

PGPASSFILE=/opt/smartdc/.pgpass

# Given PostgreSQL will be into a separated zone, we cannot rely into SMF
# to test DB availability. Need to ping the DB and proceed once we've
# verified we can stablish a connection:

RETRY_AFTER='$DBCONN_RETRY_AFTER' NUM_ATTEMPTS='$DBCONN_NUM_ATTEMPTS' RACK_ENV=production /opt/local/bin/ruby18 /opt/smartdc/dnsapi/script/psql-test-connect.rb

if [[ \$? -ne 0 ]]; then
  echo "PostgreSQL not available after ${DBCONN_NUM_ATTEMPTS}, aborting."
  exit 1
else
  echo "Verified PostgreSQL availability, moving forward."
fi

if [[ -z \$(/opt/local/bin/psql -U postgres -h \$POSTGRES_HOST -c "\\l"|grep dnsapi) ]]; then
  echo "Creating dnsapi database"
  echo "\$POSTGRES_HOST:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h \$POSTGRES_HOST dnsapi"
fi

echo "Auto Upgrading DNS API Database."
su - jill -c "cd /opt/smartdc/dnsapi; RACK_ENV=production SINATRA_ENV=production /opt/local/bin/rake18 db:autoupgrade -f /opt/smartdc/dnsapi/Rakefile"
sleep 1

if [[ -z \$(/usr/bin/svcs -a|grep dnsapi|grep -v dnsapi-update|grep -v dnsapi-setup) ]]; then
  echo "Importing DNS API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/dnsapi/config/unicorn.smf
  sleep 1
fi

if [[ ! \$(/usr/bin/svcs -a|grep dnsapi-update) ]]; then
  echo "Importing 'dnsapi-update' service"
  \$(/usr/sbin/svccfg import /opt/local/share/smf/manifest/dnsapi-update.xml)
fi

if [[  "\$(/usr/bin/svcs -Ho state dnsapi-update)" != "online"  ]]; then
  echo "Enabling 'dnsapi-update' service"
  \$(/usr/sbin/svcadm enable -s dnsapi-update)
fi

# Remove the service, we don't wanna run it again (maybe also delete the script?)
echo "Deleting '${app_name}-setup' service"
/usr/sbin/svccfg delete "platform/smartdc/dnsapi-setup"

# Ensure we remove the setup service manifest from this zones core boot manifests
rm /lib/svc/manifest/site/dnsapi-setup.xml

exit 0

DNSAPI_SETUP_SERVICE


chmod +x "/opt/smartdc/capi-data/capi-setup-service.sh"
chmod +x "/opt/smartdc/dnsapi-data/dnsapi-setup-service.sh"


# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home
