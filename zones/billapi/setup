#!/usr/bin/bash

# This script runs with the $CONFIG_assets_ip variable set to the assets zone
# IP address.  Its up to this script to pull down the rest of the files it
# needs from the assets zone and setup the zone for the given role.  This
# script is run in the background by the mdata svc so its ok if it takes
# a little while to install all of the pkgs.

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

role=billapi
app_name=$role

cd /var/svc

curl -k -o zoneconfig -s $CONFIG_assets_ip:/extra/$role/zoneconfig
curl -k -o hn_config -s $CONFIG_assets_ip:/extra/$role/hn_config
curl -k -o hn_generic -s $CONFIG_assets_ip:/extra/$role/hn_generic

# We need some of the headnode config, but don't leave the files around
. /var/svc/hn_config
. /var/svc/hn_generic
rm -f /var/svc/hn_config /var/svc/hn_generic
# Load up the config values
. /var/svc/zoneconfig

# The user-script is downloaded and executed on every zone boot. We take
# advantage of this to maintain the cached config values post-setup.
if [ -e /var/svc/setup_complete ]; then
	oldpw=`nawk '{
	    if (! done && $1 == "\"password\":") {
		print substr($2, 2, length($2) - 3)
		done = 1
	    }
	}' /opt/smartdc/billapi/config/config.json`
	[ "$billapi_http_admin_pw" == "$oldpw" ] && exit 0

	echo "Updating billapi configuration"
	nawk -v p=$billapi_http_admin_pw '{
	    if (! done && $1 == "\"password\":") {
		printf("  \"password\": \"%s\",\n", p)
		done = 1
	    } else {
		print $0
	    }
	}' /opt/smartdc/billapi/config/config.json \
	 > /opt/smartdc/billapi/config/config.json.new
	mv /opt/smartdc/billapi/config/config.json.new \
	   /opt/smartdc/billapi/config/config.json
	svcadm restart billapi
	exit 0
fi

# Setup the zone
curl -k -o pkgsrc -s $CONFIG_assets_ip:/extra/$role/pkgsrc_2010q4
curl -k -o fs.tar.bz2 -s $CONFIG_assets_ip:/extra/$role/fs.tar.bz2
curl -k -o pkgsrc.tar -s $CONFIG_assets_ip:/extra/pkgsrc/pkgsrc_2010q4.tar

# Cookie to identify this as a SmartDC zone and its role
mkdir -p /var/smartdc/billapi

# Unpack fs.tar and copy files into proper locations within the zone
mkdir /.stage
echo "unpack fs.tar"
(cd /.stage; bzcat /var/svc/fs.tar.bz2 | tar xbf 512 -)
rm -f /var/svc/fs.tar.bz2
echo "install root"
(cd /.stage/root; tar cbf 512 - *) | (cd /; tar xbf 512 -)
echo "install site"
(cd /.stage/site; tar cbf 512 - *) | (cd /lib/svc/manifest/site; tar xbf 512 -)
rm -rf /.stage

# Install using local pkg repo
mkdir -p /var/svc/pkgs
(cd /var/svc/pkgs && tar -xf /var/svc/pkgsrc.tar \
      $(cat /var/svc/pkgsrc | sed -e "s/$/.tgz/" | xargs))
rm -f /var/svc/pkgsrc.tar

for i in `cat /var/svc/pkgsrc`
do
	echo "Installing $i" 
	pkg_info $i >/dev/null 2>&1 || pkg_add -f /var/svc/pkgs/$i
done
rm -rf /var/svc/pkgs

# XXX is net1 external nic?
EXT_IPADDR=`ifconfig net1 | nawk '{if ($1 == "inet") print $2}'`
BILLAPI_EXTERNAL_URL="https://$EXT_IPADDR"

echo "Installing local node.js"
cd /opt/smartdc
/usr/bin/gtar -z -m -xf /opt/tmp/node.tgz
cd -
/usr/bin/rm -fr /opt/tmp
/usr/bin/chown -R root:root /opt/smartdc

echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 -keyout /opt/smartdc/billapi/ssl/key.pem -out /opt/smartdc/billapi/ssl/cert.pem -days 365

echo "Creating HTTP Server SMF manifest"
cat > /opt/smartdc/billapi/billapi_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="billapi">
  <service name="smartdc/site/billapi" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/billapi/server.js -f /opt/smartdc/billapi/config/config.json &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Billing API HTTP Server (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Creating AMQP Consumer SMF manifest"
cat > /opt/smartdc/billapi/billapi_consumer_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="billapi-consumer">
  <service name="smartdc/site/billapi-consumer" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/billapi/consumer.js -f /opt/smartdc/billapi/config/config.json &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Billing API AMQP Consumer (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Creating Report Queue manifest"
cat > /opt/smartdc/billapi/billapi_queue_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="billapi-queue">
  <service name="smartdc/site/billapi-queue" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/billapi/queue.js -f /opt/smartdc/billapi/config/config.json &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Billing API Report Queue (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

cat > /opt/smartdc/billapi/config/config.json <<HERE
{
  "siteName": "${BILLAPI_EXTERNAL_URL}",
  "port": 443,
  "cert": "./ssl/cert.pem",
  "key": "./ssl/key.pem",
  "logLevel": 4,
  "user": "${HTTP_ADMIN_USER}",
  "password": "${HTTP_ADMIN_PW}",
  "amqp": {
    "host": "${RABBIT_IP}",
    "login": "guest",
    "password": "guest",
    "vhost": "/",
    "port": 5672
  },
  "riak": {
    "host": "${RIAK_IP}",
    "port": "${RIAK_PORT}"
  },
  "userThrottles": {
    "all": {
      "username": true,
      "burst": 30,
      "rate": 10,
      "overrides": {
        "${CAPI_ADMIN_LOGIN}": {
          "burst": 0,
          "rate": 0
        }
      }
    }
  }
}
HERE

echo "Importing billapi_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/billapi/billapi_manifest.xml

echo "Importing billapi_consumer_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/billapi/billapi_consumer_manifest.xml

echo "Importing billapi_queue_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/billapi/billapi_queue_manifest.xml

echo "Enablig service billapi"
/usr/sbin/svcadm enable smartdc/site/billapi
echo "Enablig service billapi-consumer"
/usr/sbin/svcadm enable smartdc/site/billapi-consumer
echo "Enablig service billapi-queue"
/usr/sbin/svcadm enable smartdc/site/billapi-queue

touch /var/svc/setup_complete
echo "setup done"
