#!/bin/bash

echo "99 finalizing billapi zone"

echo "Installing local node.js"
cd /opt/smartdc
/usr/bin/gtar -z -m -xf /opt/tmp/node.tgz
cd /opt
echo "Installing local RIAK"
/usr/bin/gtar -z -m -xf /opt/tmp/riak.tgz
cd -
/usr/bin/rm -fr /opt/tmp
/usr/bin/chown -R root:root /opt/smartdc

echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 -keyout /opt/smartdc/billapi/ssl/key.pem -out /opt/smartdc/billapi/ssl/cert.pem -days 365

echo "Creating RIAK SMF manifest"
cat > /opt/smartdc/billapi/riak.xml <<HERE
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='riak'>
  <service name='application/riak' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>

    <dependency name='network' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/milestone/network:default'/>
    </dependency>

    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>

    <exec_method name='start' type='method' exec='/opt/riak/bin/riak start' timeout_seconds='60'>
      <method_context working_directory='/tmp'>
        <method_credential group='nobody' user='nobody'/>
        <method_environment>
          <envvar name='HOME' value='/opt/riak'/>
          <envvar name='LOGNAME' value='riak'/>
          <envvar name='PATH' value='/usr/bin:/bin:/opt/local/bin:/opt/local/sbin:/usr/sfw/bin:/usr/ccs/bin'/>
          <envvar name='LD_PRELOAD' value='mpss.so.1'/>
          <envvar name='MPSSHEAP' value='2M'/>
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method name='stop'  type='method' exec='/opt/riak/bin/riak stop'  timeout_seconds='60'>
      <method_context working_directory='/tmp'>
        <method_credential group='nobody' user='nobody'/>
        <method_environment>
          <envvar name='HOME' value='/opt/riak'/>
          <envvar name='LOGNAME' value='riak'/>
          <envvar name='PATH' value='/usr/bin:/bin:/opt/local/bin:/opt/local/sbin:/usr/sfw/bin:/usr/ccs/bin'/>
          <envvar name='LD_PRELOAD' value='mpss.so.1'/>
          <envvar name='MPSSHEAP' value='2M'/>
        </method_environment>
      </method_context>
    </exec_method>

    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='contract'/>
      <propval name='ignore_error' type='astring' value='core,signal'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>Riak Data Store</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
HERE

echo "Creating RIAK configuration files"
mkdir -p /opt/riak

mkdir -p /opt/riak/etc/
mkdir -p /opt/riak/log/

cat > /opt/riak/etc/vm.args <<EOF
## Name of the riak node
-name riak@${PRIVATE_IP}

## Cookie for distributed erlang
-setcookie a0a6e1a375117c58d77221f10c5ce12e

## Heartbeat management; auto-restarts VM if it dies or becomes unresponsive
## (Disabled by default..use with caution!)
##-heart

## Enable kernel poll and a few async threads
+K true
+A 64

## Increase number of concurrent ports/sockets
-env ERL_MAX_PORTS 4096

## Tweak GC to run more often
-env ERL_FULLSWEEP_AFTER 0

EOF

cat > /opt/riak/etc/app.config <<EOF
[
 %% Riak Core config
 {riak_core, [
              %% Default location of ringstate
              {ring_state_dir, "data/ring"},

              %% http is a list of IP addresses and TCP ports that the Riak
              %% HTTP interface will bind.
              {http, [ {"${PRIVATE_IP}", 8098 } ]},

              %% https is a list of IP addresses and TCP ports that the Riak
              %% HTTPS interface will bind.
              %%
              %% FIXME: It would be better to use https, but we need a
              %% cert etc.
              % {https, [{ "${PRIVATE_IP}", 8098 }]},

              %% default cert and key locations for https can be overridden
              %% with the ssl config variable
              % {ssl, [
              %        {certfile, "/opt/riak/etc/cert.pem"},
              %        {keyfile, "/opt/riak/etc/key.pem"}
              %       ]},

              %% riak_handoff_port is the TCP port that Riak uses for
              %% intra-cluster data handoff.
              {handoff_port, 8099 },
              {cluster_name, "sdc"},
              {ring_creation_size, 64}
             ]},

 %% Riak KV config
 {riak_kv, [
            %% Storage_backend specifies the Erlang module defining the storage
            %% mechanism that will be used on this node.
            {storage_backend, riak_kv_bitcask_backend},

            %% pb_ip is the IP address that the Riak Protocol Buffers interface
            %% will bind to.  If this is undefined, the interface will not run.
            %{pb_ip,   "0.0.0.0" },

            %% pb_port is the TCP port that the Riak Protocol Buffers interface
            %% will bind to
            %{pb_port, 8087 },

            %% raw_name is the first part of all URLS used by the Riak raw HTTP
            %% interface.  See riak_web.erl and raw_http_resource.erl for
            %% details.
            %{raw_name, "riak"},

            %% mapred_name is URL used to submit map/reduce requests to Riak.
            {mapred_name, "mapred"},

            %% directory used to store a transient queue for pending
            %% map tasks
            {mapred_queue_dir, "data/mr_queue" },

            %% Each of the following entries control how many Javascript
            %% virtual machines are available for executing map, reduce,
            %% pre- and post-commit hook functions.
            {map_js_vm_count, 8 },
            {reduce_js_vm_count, 6 },
            {hook_js_vm_count, 2 },

            %% Number of items the mapper will fetch in one request.
            %% Larger values can impact read/write performance for
            %% non-MapReduce requests.
            {mapper_batch_size, 5},

            %% js_max_vm_mem is the maximum amount of memory, in megabytes,
            %% allocated to the Javascript VMs. If unset, the default is
            %% 8MB.
            {js_max_vm_mem, 8},

            %% js_thread_stack is the maximum amount of thread stack, in megabyes,
            %% allocate to the Javascript VMs. If unset, the default is 16MB.
            %% NOTE: This is not the same as the C thread stack.
            {js_thread_stack, 16},

            %% Number of objects held in the MapReduce cache. These will be
            %% ejected when the cache runs out of room or the bucket/key
            %% pair for that entry changes
            {map_cache_size, 10000},

            %% js_source_dir should point to a directory containing Javascript
            %% source files which will be loaded by Riak when it initializes
            %% Javascript VMs.
            %{js_source_dir, "/tmp/js_source"},

            %% riak_stat enables the use of the "riak-admin status" command to
            %% retrieve information the Riak node for performance and debugging needs
            {riak_kv_stat, true}
           ]},

 %% Bitcask Config
 {bitcask, [
             {data_root, "data/bitcask"}
           ]},

 %% Luwak Config
 {luwak, [
             {enabled, false}
         ]},

%% Riak_err Config
{riak_err, [
            %% Info/error/warning reports larger than this will be considered
            %% too big to be formatted safely with the user-supplied format
            %% string.
            {term_max_size, 65536},

            %% Limit the total size of formatted info/error/warning reports.
            {fmt_max_bytes, 65536}
           ]},

 %% SASL config
 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]}
].

EOF

chown -R nobody /opt/riak

echo "Creating HTTP Server SMF manifest"
cat > /opt/smartdc/billapi/billapi_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="billapi">
  <service name="smartdc/site/billapi" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/billapi/server.js -f /opt/smartdc/billapi/config/config.json &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Billing API HTTP Server (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Creating AMQP Consumer SMF manifest"
cat > /opt/smartdc/billapi/billapi_consumer_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="billapi-consumer">
  <service name="smartdc/site/billapi-consumer" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/billapi/consumer.js -f /opt/smartdc/billapi/config/config.json &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/billapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Billing API AMQP Consumer (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

# Apply configuration from /opt/smartdc/etc/zoneconfig now
source /opt/smartdc/bin/configure.sh

echo "Importing RIAK manifest"
/usr/sbin/svccfg import /opt/smartdc/billapi/riak.xml

echo "Importing billapi_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/billapi/billapi_manifest.xml

echo "Importing billapi_consumer_manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/billapi/billapi_consumer_manifest.xml

sleep 10 # XXX
echo "Enablig service billapi"
/usr/sbin/svcadm enable smartdc/site/billapi
echo "Enablig service billapi-consumer"
/usr/sbin/svcadm enable smartdc/site/billapi-consumer

