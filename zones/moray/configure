#!/usr/bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#

set -o xtrace

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

eval $(cat /opt/smartdc/etc/zoneconfig)

role=moray

# XXX is net0 admin nic?
ADMIN_IPADDR=`ifconfig net0 | nawk '{if ($1 == "inet") print $2}'`
MORAY_MAIN_ADMIN_IP=$(echo "${MORAY_ADMIN_IPS}" | cut -d',' -f1)

# Function calculates number of bit in a netmask
#
mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}


# Only configure and run PostgreSQL if we are on the first instance
# (Note this is temporary until we move to manatee backend)
if [[ $ADMIN_IPADDR == $MORAY_MAIN_ADMIN_IP ]]; then

    echo "listen_addresses='${POSTGRES_HOST}, ${ADMIN_IPADDR}'" >> /var/pgsql/data91/postgresql.conf
    numbits=$(mask2cidr ${ADMIN_NETMASK})
    echo "host    all    all    ${ADMIN_NETWORK}/${numbits}    password" >> /var/pgsql/data91/pg_hba.conf

  # enable slow query logging (anything beyond 200ms right now)
    echo "log_min_duration_statement = 200" >> /var/pgsql/data91/postgresql.conf

  # Import postgres manifest straight from the pkgsrc file:
    if [[ -z $(/usr/bin/svcs -a|grep postgresql) ]]; then
        echo "Importing posgtresql service"
        /usr/sbin/svccfg import /opt/local/share/smf/manifest/postgresql:pg91.xml
        sleep 10 # XXX
    #/usr/sbin/svccfg -s svc:/network/postgresql:pg91 refresh
        /usr/sbin/svcadm enable -s postgresql:pg91
    else
        echo "Restarting postgresql service"
        /usr/sbin/svcadm disable -s postgresql:pg91
        /usr/sbin/svcadm enable -s postgresql:pg91
        sleep 2
    fi

  # Temporary until manatee:
    for i in 0 1 2 3 4 5 6 7 8 9
    do
        svc=$(/usr/bin/svcs -H network/postgresql)
        state=${svc%% * *}
        [ "$state" == "online" ] && break
        sleep 5
    done

  # Move forward anyway
  # If we cannot get a db listing using our password, we need to set it:
    if ! PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql -U ${POSTGRES_USER} \
        -h ${POSTGRES_HOST} -c "\l" 2>/dev/null; then
        if ! PGPASSWORD='postgres' /opt/local/bin/psql -U ${POSTGRES_USER} \
            -h ${POSTGRES_HOST} \
            -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PW';" template1 ; then
            echo "Changing the default password failed"
        fi
    fi

    if [[ -z $(PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql -U ${POSTGRES_USER} \
        -h ${POSTGRES_HOST} -c "\l"|grep $role) ]]; then
        echo "Creating $role database"
        PGPASSWORD=${POSTGRES_PW} /opt/local/bin/createdb -U ${POSTGRES_USER} \
            -h ${POSTGRES_HOST} $role
    fi

else
    echo "Setting POSTGRES_HOST to MORAY_MAIN_ADMIN_IP"
    POSTGRES_HOST=$MORAY_MAIN_ADMIN_IP
fi


ZONE_UUID=`/usr/bin/zonename`

echo "Updating config file"
CFG_FILE_IN=/opt/smartdc/$role/etc/config.json.in
CFG_FILE=/opt/smartdc/$role/etc/config.json

# Update config file
cp $CFG_FILE_IN $CFG_FILE
gsed -i -e "s|PG_URL|pg://$POSTGRES_USER:$POSTGRES_PW@$POSTGRES_HOST/moray|" $CFG_FILE


echo "Importing SMF Manifests"
$(/usr/sbin/svccfg import /opt/smartdc/$role/smf/manifests/$role.xml)

exit 0
