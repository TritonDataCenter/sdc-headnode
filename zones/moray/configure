#!/usr/bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#

set -o xtrace

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

eval $(cat /opt/smartdc/etc/zoneconfig)

role=moray

# XXX is net0 admin nic?
ADMIN_IPADDR=`ifconfig net0 | nawk '{if ($1 == "inet") print $2}'`
MORAY_MAIN_ADMIN_IP=$(echo "${MORAY_ADMIN_IPS}" | cut -d',' -f1)
ZK_MAIN_ADMIN_IP=$(echo "${ZOOKEPER_ADMIN_IPS}" | cut -d',' -f1)
MANATEE_MAIN_ADMIN_IP=$(echo "${MANATEE_ADMIN_IPS}" | cut -d',' -f1)


# Try to connect to manatee PostgreSQL instance. If we can connect, create the
# moray db when required. If we cannot connect after 10 retries, fail and exit.
#
# FIXME: Actually, we're manually overriding manatee's PG Password and setting
# the PG user to the default one. These should be configuration values:
POSTGRES_HOST=$MANATEE_MAIN_ADMIN_IP
POSTGRES_PW=''
for i in 0 1 2 3 4 5 6 7 8 9
do
    if ! PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql -U ${POSTGRES_USER} \
        -h ${POSTGRES_HOST} -c "\l" 2>/dev/null; then
        sleep 5
        if [[ "$i" == "9" ]]; then
            echo "Connecting to manatee PostgreSQL failed. Exiting."
            exit 1
        else
            continue
        fi
    else
      if [[ -z $(PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql \
          -U ${POSTGRES_USER} \
          -h ${POSTGRES_HOST} -c "\l"|grep $role) ]]; then
            echo "Creating $role database"
            PGPASSWORD=${POSTGRES_PW} /opt/local/bin/createdb \
            -U ${POSTGRES_USER} \
            -h ${POSTGRES_HOST} $role
          if [[ -z $(PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql \
                -U ${POSTGRES_USER} \
                -h ${POSTGRES_HOST} ${role} -c "\dt"|grep buckets_config) ]]; then
              echo "Creating table buckets_config"
              PGPASSWORD=${POSTGRES_PW} /opt/local/bin/psql \
                -U ${POSTGRES_USER} \
                -h ${POSTGRES_HOST} $role -c "CREATE TABLE buckets_config (
                    name text PRIMARY KEY,
                    index text NOT NULL,
                    pre text NOT NULL,
                    post text NOT NULL,
                    mtime timestamp without time zone DEFAULT now() NOT NULL
                );"
              break
          else
              break
          fi
      else
          break
      fi
    fi
done


ZONE_UUID=`/usr/bin/zonename`

echo "Updating config file"
CFG_FILE_IN=/opt/smartdc/$role/etc/config.json.in
CFG_FILE=/opt/smartdc/$role/etc/config.json

# Update config file
cp $CFG_FILE_IN $CFG_FILE
gsed -i -e "s|ZK_IP|$ZK_MAIN_ADMIN_IP|" $CFG_FILE


echo "Importing SMF Manifests"
$(/usr/sbin/svccfg import /opt/smartdc/$role/smf/manifests/$role.xml)

exit 0
