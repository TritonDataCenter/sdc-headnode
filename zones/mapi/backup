#!/usr/bin/bash

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin
export PATH

# set -o xtrace

if [[ $# != 2 ]]; then
  echo "Usage: $0 <uuid> <target_directory>"
  exit 1
fi

ROLE=mapi
UUID=$1
TARGET_DIR=$2

# Just in case, create the backup directory:
[[ ! -e "${TARGET_DIR}" ]] && mkdir -p ${TARGET_DIR}

BACKUP_VERSION="bck-$(date +'%F-%H-%M-%S-%Z')"
DUMP_FILE="/opt/smartdc/${ROLE}-data/${ROLE}-${BACKUP_VERSION}.pg_dump"

# We cannot backup if cannot find data dataset
data_dataset=$(zfs list -H -o name | grep "${UUID}\/data\/${ROLE}-data$")
if [[ -z $data_dataset ]]; then
    echo "FATAL: Cannot find '${ROLE}' data dataset"
    exit 103
fi

# Check if Rakefile exists first - won't see this if zone is halted
if [[ -f /zones/${UUID}/root/opt/smartdc/${ROLE}/Rakefile ]]; then
    backup=$(zlogin ${UUID} /opt/local/bin/rake -vT \
      -f /opt/smartdc/${ROLE}/Rakefile|grep pg:backup)
    # Only attempt to backup the DB if there's a pg:backup task
    if [[ -n $backup ]]; then
        echo "==> Creating PostgreSQL Backup with version ${BACKUP_VERSION}"
        zlogin ${UUID} VERSION="${BACKUP_VERSION}" \
            /opt/local/bin/rake pg:backup -f /opt/smartdc/${ROLE}/Rakefile
        if [[ -f /zones/${UUID}/root/$DUMP_FILE ]]; then
            printf "Successfully created database backup:\n    %s\n" $DUMP_FILE
        else
            echo "FATAL: Cannot create database backup"
            exit 104
        fi
    fi
fi

# Create data dataset backup
echo "==> Creating snapshot of '${ROLE}-data' dataset"
zfs snapshot zones/${UUID}/data/${ROLE}-data@${BACKUP_VERSION} 2>&1
if [[ $? -gt 0 ]]; then
    echo "FATAL: Unable to snapshot data dataset"
    exit 106
fi

# Create backup directory for the zone stuff:
echo "==> Creating backup directory '${TARGET_DIR}/${ROLE}'"
mkdir -p "${TARGET_DIR}/${ROLE}"

# Send the dataset snapshot:
echo "==> Saving data dataset"
zfs send "zones/${UUID}/data/${ROLE}-data@${BACKUP_VERSION}" \
    > "${TARGET_DIR}/${ROLE}/${ROLE}-data.zfs" 2>&1
if [[ $? -gt 0 ]]; then
    echo "Unable to zfs send data dataset"
    exit 108
fi

echo "==> Removing temporary snapshot of '${UUID}'"
zfs destroy "zones/${UUID}/data/${ROLE}-data@${BACKUP_VERSION}"
rm -f /zones/${UUID}/root/$DUMP_FILE

# Copy additional files
cp /zones/$UUID/root/opt/smartdc/node.config/node.config ${TARGET_DIR}/${ROLE}
[ -f /zones/$UUID/root/etc/inet/static_routes ] && \
    cp /zones/$UUID/root/etc/inet/static_routes ${TARGET_DIR}/${ROLE}

# Create a file to hold the $BACKUP_VERSION for the restore script:
echo "${BACKUP_VERSION}" > "${TARGET_DIR}/${ROLE}/RESTORE"

echo "All done!!!"
exit 0
