#!/usr/bin/bash

if [[ $# != 2 ]]; then
  echo "Usage: $0 <zone_name> <target_directory>"
  exit 1
fi

ZONE=$1
TARGET_DIR=$2
# We know the name of our app:
APP_NAME='mapi'

# Just in case, create the backup directory:
if [[ ! -e "${TARGET_DIR}" ]]; then
  mkdir -p ${TARGET_DIR}
fi

VERSION=$(cat /zones/${ZONE}/root/opt/smartdc/${APP_NAME}-data/VERSION)
APP_DATASET=$(zfs list -H -o name|grep "${ZONE}\/${APP_NAME}-app-${VERSION}$")
DATA_DATASET=$(zfs list -H -o name|grep "${ZONE}\/${APP_NAME}-data$")
STAMP=$(date +'%F-%H-%M-%S-%Z')

# We might want to take more than one backup of the same version:
BACKUP_VERSION="${VERSION}-${STAMP}"

# We cannot backup if cannot find application dataset:
if [[ -z $APP_DATASET ]]; then
  echo "FATAL: Cannot find '${APP_NAME}' application dataset"
  exit 102
fi

# Same if cannot find data dataset:
if [[ -z $DATA_DATASET ]]; then
  echo "FATAL: Cannot find '${APP_NAME}' data dataset"
  exit 103
fi

# Check if Rakefile exists first
if [[ -f /zones/${ZONE}/root/opt/smartdc/${APP_NAME}/Rakefile ]]; then
  backup=$(/usr/sbin/zlogin ${ZONE} /opt/local/bin/rake18 -vT -f /opt/smartdc/${APP_NAME}/Rakefile|grep pg:backup)
  # Only attempt to backup the DB if there's a pg:backup task
  if [[ -n $backup ]]; then
    echo "==> Creating PostgreSQL Backup with version ${BACKUP_VERSION}"
    /usr/sbin/zlogin ${ZONE} VERSION="${BACKUP_VERSION}" /opt/local/bin/rake18 pg:backup -f /opt/smartdc/${APP_NAME}/Rakefile
    if [[ -f /zones/${ZONE}/root/opt/smartdc/${APP_NAME}-data/${APP_NAME}-${BACKUP_VERSION}.pg_dump ]]; then
      echo "Successfully created database backup: '/zones/${ZONE}/root/opt/smartdc/${APP_NAME}-data/${APP_NAME}-${BACKUP_VERSION}.pg_dump'"
    else
      echo "FATAL: Cannot create database backup"
      exit 104
    fi
  fi
fi

# Create application dataset backup
if [[ -z $(zfs list -t all -H -o name|grep "${APP_NAME}-app-${VERSION}@${BACKUP_VERSION}$") ]]; then
  echo "==> Creating snapshot of '${APP_NAME}-app-${VERSION}' dataset"
  /usr/sbin/zfs snapshot zones/${ZONE}/${APP_NAME}-app-${VERSION}@${BACKUP_VERSION} 2>&1
  if [[ $? -gt 0 ]]; then
    echo "FATAL: Unable to snapshot application dataset"
    exit 105
  fi
fi

# Create data dataset backup
if [[ -z $(zfs list -t all -H -o name|grep "${APP_NAME}-data@${BACKUP_VERSION}$") ]]; then
  echo "==> Creating snapshot of '${APP_NAME}-data' dataset"
  /usr/sbin/zfs snapshot zones/${ZONE}/${APP_NAME}-data@${BACKUP_VERSION} 2>&1
  if [[ $? -gt 0 ]]; then
    echo "FATAL: Unable to snapshot data dataset"
    exit 106
  fi
fi

# Create backup directory for the zone stuff:
echo "==> Creating backup directory '${TARGET_DIR}/${APP_NAME}'"
mkdir -p "${TARGET_DIR}/${APP_NAME}"

# Send the dataset snapshots:

if [[ ! -f "${TARGET_DIR}/${APP_NAME}/${APP_NAME}-app-${VERSION}" ]]; then
  echo "==> Saving application dataset"
  /usr/sbin/zfs send "zones/${ZONE}/${APP_NAME}-app-${VERSION}@${BACKUP_VERSION}" > "${TARGET_DIR}/${APP_NAME}/${APP_NAME}-app-${VERSION}.zfs" 2>&1
  if [[ $? -gt 0 ]]; then
    echo "Unable to zfs send application dataset"
    exit 107
  fi
fi

if [[ ! -f "${TARGET_DIR}/${APP_NAME}/${APP_NAME}-data" ]]; then
  echo "==> Saving data dataset"
  /usr/sbin/zfs send "zones/${ZONE}/${APP_NAME}-data@${BACKUP_VERSION}" > "${TARGET_DIR}/${APP_NAME}/${APP_NAME}-data.zfs" 2>&1
  if [[ $? -gt 0 ]]; then
    echo "Unable to zfs send data dataset"
    exit 108
  fi
fi

# Create a file to hold the $BACKUP_VERSION for the restore script:
echo "${BACKUP_VERSION}" > "${TARGET_DIR}/${APP_NAME}/RESTORE"

echo "All done!!!"
exit 0
