#!/bin/bash

echo "99 finalizing mapi zone"

app_name='mapi'

# from zoneinit-common:
ruby_app_update_service $app_name

#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

# Before we enable postgresql, we'll make a little change on the way we stop
# the service, so we can stop it without having to stop all the agents:
echo "Updating postgresql stop method"
$(/opt/local/bin/gsed -i"" -e "s/\$PGDATA stop/\$PGDATA stop -m immediate/" /opt/local/share/smf/method/svc-pgsql90)

# Apply configuration from /opt/smartdc/etc/zoneconfig now
source /opt/smartdc/bin/configure.sh

# Generate the agents setup script:

AGENTS_FILE_VERSION=$(ls -1 /opt/smartdc/agent-scripts/|grep agents- | tail -n1)

echo "Generating agents setup file at '/opt/smartdc/mapi/config/setup_agents.sh'"

cat > /opt/smartdc/mapi-data/setup_agents.sh <<AGENTS
#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

PATH=/usr/bin:/usr/sbin
export PATH

fatal()
{
    # Any error message should be redirected to stderr:
    echo "Error: \$1" 1>&2
    exit 1
}


setup_agents()
{
  cd /var/tmp
  /bin/curl --silent --show-error -O http://${PRIVATE_IP}/ur-scripts/${AGENTS_FILE_VERSION}

  if [[ ! -f /var/tmp/${AGENTS_FILE_VERSION} ]]; then
    fatal "failed to download agents setup script"
  fi

  mkdir -p /opt/smartdc/agents/log
  /usr/bin/bash /var/tmp/${AGENTS_FILE_VERSION} &>/opt/smartdc/agents/log/install.log
  result=\$(tail -n 1 /opt/smartdc/agents/log/install.log)

  if [[ "\$result" == "npm not ok" ]]; then
    tail -n 10 /opt/smartdc/agents/log/install.log >&2
    exit 1
  else
    tail -n 10 /opt/smartdc/agents/log/install.log >&2
  fi
}


if [[ ! -d /opt/smartdc/agents/bin ]]; then
  setup_agents
fi

# Return SmartDC services statuses on STDOUT:
echo \$(svcs -a -o STATE,FMRI|grep smartdc)

# Scripts to be executed by Ur need to explicitly return an exit status code:
exit 0

AGENTS



# Generate the reboot server script:

echo "Generating reboot server file at '/opt/smartdc/mapi-data/reboot_server.sh'"

cat > /opt/smartdc/mapi-data/reboot_server.sh <<REBOOT
#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

PATH=/usr/bin:/usr/sbin
export PATH

# Scripts to be executed by Ur need to explicitly return an exit status code.
exit 113

REBOOT


echo "Creating $app_name-setup service"

cat >"/lib/svc/manifest/site/$app_name-setup.xml" <<SETUP_SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app_name}-setup' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app_name-data/$app_name-setup-service.sh' timeout_seconds='180'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Setup service ($app_name)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SETUP_SMF

cat > "/opt/smartdc/$app_name-data/$app_name-setup-service.sh" <<SETUP_SERVICE
#!/usr/bin/bash

POSTGRES_HOST='$POSTGRES_HOST'
POSTGRES_USER='$POSTGRES_USER'
POSTGRES_PW='$POSTGRES_PW'

PGPASSFILE=/opt/smartdc/.pgpass

# Given PostgreSQL will be into a separated zone, we cannot rely into SMF
# to test DB availability. Need to ping the DB and proceed once we've
# verified we can stablish a connection:

RETRY_AFTER='$DBCONN_RETRY_AFTER' NUM_ATTEMPTS='$DBCONN_NUM_ATTEMPTS' RACK_ENV=production /opt/local/bin/ruby /opt/smartdc/mapi/script/psql-test-connect.rb

if [[ \$? -ne 0 ]]; then
  echo "PostgreSQL not available after ${DBCONN_NUM_ATTEMPTS}, aborting."
  exit 1
else
  echo "Verified PostgreSQL availability, moving forward."
fi


if [[ -z \$(/opt/local/bin/psql -U postgres -h \$POSTGRES_HOST -c "\\l"|grep mapi) ]]; then
  echo "Creating mapi database"
  echo "\$POSTGRES_HOST:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h \$POSTGRES_HOST mapi"
fi

echo "Auto Upgrading MCP API Database."
su - jill -c "cd /opt/smartdc/mapi; RACK_ENV=production /opt/local/bin/rake standalone:db:autoupgrade -f /opt/smartdc/mapi/Rakefile"
sleep 1

if [[ -z \$(/usr/bin/svcs -a|grep mcp_api) ]]; then
  echo "Importing MCP API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/unicorn.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/application/mcp_api:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep provisioner_client) ]]; then
  echo "Importing MCP API Provisioner Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/provisioner_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/provisioner_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep ur_client) ]]; then
  echo "Importing MAPI Ur Agent Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/ur_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/ur_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep datasetmanager_client) ]]; then
  echo "Importing MCP API DatasetManager Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/datasetmanager_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/datasetmanager_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep heartbeater_client) ]]; then
  echo "Importing MCP API Heartbeater Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/heartbeater_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/heartbeater_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep atropos_client) ]]; then
  echo "Importing MCP API Atropos Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/atropos_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/atropos_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep zonetracker_client) ]]; then
  echo "Importing MCP API ZoneTracker Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/zonetracker_client.smf
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/zonetracker_client:default refresh
fi


if [[ ! \$(/usr/bin/svcs -a|grep ${app_name}-update) ]]; then
  echo "Importing '${app_name}-update' service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/$app_name-update.xml
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/platform/smartdc/mapi-update:default refresh
fi

if [[  "\$(/usr/bin/svcs -Ho state ${app_name}-update)" != "online"  ]]; then
  echo "Enabling '${app_name}-update' service"
  /usr/sbin/svcadm enable -s ${app_name}-update
fi

## Setup and call the verify script
echo "$POSTGRES_PW" > /tmp/pgpasswd

USE_DATASETS=
for avail_ds in \$(echo '${ALL_DATASETS}' | tr ',' ' '); do
    for ds in \$(echo '${DATASETS}' | tr ',' ' '); do
        if [[ \$(echo "\${avail_ds}" | cut -d '-' -f1) == \${ds} ]]; then
            [[ -n \${USE_DATASETS} ]] && USE_DATASETS="\${USE_DATASETS},"
            USE_DATASETS="\${USE_DATASETS}\${avail_ds%.*.*}"
        fi
    done
done

# (cd /opt/smartdc/mapi && ./script/verify_setup.sh)
(cd /opt/smartdc/mapi && RACK_ENV=production \
    DHCP_RANGE_START="$DHCP_RANGE_START" \
    DHCP_RANGE_END="$DHCP_RANGE_END" \
    ADMIN_NETWORK="$ADMIN_NETWORK" \
    ADMIN_NETWORK_NAME="$ADMIN_NETWORK_NAME" \
    ADMIN_NIC_TAG="$ADMIN_NIC_TAG" \
    ADMIN_BITCOUNT="$ADMIN_BITCOUNT" \
    ADMIN_GATEWAY="$ADMIN_GATEWAY" \
    ADMIN_IP="$ADMIN_IP" \
    ADMIN_VLAN_ID="$ADMIN_VLAN_ID" \
    EXTERNAL_NETWORK="$EXTERNAL_NETWORK" \
    EXTERNAL_NETWORK_NAME="$EXTERNAL_NETWORK_NAME" \
    EXTERNAL_NIC_TAG="$EXTERNAL_NIC_TAG" \
    EXTERNAL_BITCOUNT="$EXTERNAL_BITCOUNT" \
    EXTERNAL_GATEWAY="$EXTERNAL_GATEWAY" \
    EXTERNAL_IP="$EXTERNAL_IP" \
    EXTERNAL_START_IP="$EXTERNAL_START_IP" \
    EXTERNAL_END_IP="$EXTERNAL_END_IP" \
    EXTERNAL_VLAN_ID="$EXTERNAL_VLAN_ID" \
    IMG_TYPE="$IMG_TYPE" \
    DATASETS="\${USE_DATASETS}" \
    COMPANY_NAME="$COMPANY_NAME" \
    LOCATION="$LOCATION" \
    RACK_NAME="$RACK_NAME" \
    RACK_SIZE="$RACK_SIZE" \
    SERVER_ROLE="$SERVER_ROLE" \
    PACKAGE_SIZES="$PACKAGE_SIZES" \
 /opt/local/bin/rake dev:initial_data) 2>&1 | tee /tmp/initial_data.output
rm -f /tmp/initial_data.output /tmp/pgpasswd

# Remove the service, we don't wanna run it again (maybe also delete the script?)
echo "Deleting '${app_name}-setup' service"
/usr/sbin/svccfg delete "platform/smartdc/${app_name}-setup"

# Ensure we remove the setup service manifest from this zones core boot manifests
rm /lib/svc/manifest/site/${app_name}-setup.xml

exit 0

SETUP_SERVICE

chmod +x "/opt/smartdc/$app_name-data/$app_name-setup-service.sh"

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

