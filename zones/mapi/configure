#!/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

set -o xtrace

zone_role="mapi"
app_name=${zone_role}
eval $(cat /opt/smartdc/etc/zoneconfig)

echo "listen_addresses='localhost'" >> /var/pgsql/data90/postgresql.conf

# Calculate the bitcounts
source /lib/sdc/network.shA
ADMIN_CIDR=$(ip_netmask_to_cidr ${ADMIN_NETWORK} ${ADMIN_NETMASK})
ADMIN_BITCOUNT=${ADMIN_CIDR##*/}
EXTERNAL_CIDR=$(ip_netmask_to_cidr ${EXTERNAL_NETWORK} ${EXTERNAL_NETMASK})
EXTERNAL_BITCOUNT=${EXTERNAL_CIDR##*/}

# enable slow query logging (anything beyond 200ms right now)
echo "log_min_duration_statement = 200" >> /var/pgsql/data90/postgresql.conf

# Import postgres manifest straight from the pkgsrc file:
if [[ -z $(/usr/bin/svcs -a|grep postgresql) ]]; then
  echo "Importing posgtresql service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/postgresql:pg90.xml
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/postgresql:pg90 refresh
  /usr/sbin/svcadm enable -s postgresql
else
  echo "Restarting postgresql service"
  /usr/sbin/svcadm disable -s postgresql
  /usr/sbin/svcadm enable -s postgresql
  sleep 2
fi

# XXX Use the first for now
UFDS_ADMIN_IP=$(echo "${UFDS_ADMIN_IPS}" | tr ',' ' ')

# The values must exist in the zoneconfig for them to be avaliable here.
mkdir -p /opt/smartdc/node.config
cat >/opt/smartdc/node.config/node.config <<EOF
datacenter_name='${DATACENTER_NAME}'
root_authorized_keys_file='${ROOT_AUTHORIZED_KEYS_FILE}'
assets_admin_ip='${ASSETS_IP}'
ntp_hosts='${COMPUTE_NODE_NTP_HOSTS}'
swap='${COMPUTE_NODE_SWAP}'
rabbitmq='${RABBITMQ}'
root_shadow='${ROOT_SHADOW}'
ufds_admin_ip='${UFDS_ADMIN_IP}'
ufds_admin_uuid='${UFDS_ADMIN_UUID}'
dhcp_lease_time='${DHCP_LEASE_TIME}'
capi_client_url='${CAPI_CLIENT_URL}'
capi_http_admin_user='${CAPI_HTTP_ADMIN_USER}'
capi_http_admin_pw='${CAPI_HTTP_ADMIN_PW}'
mapi_client_url='${MAPI_CLIENT_URL}'
mapi_http_admin_user='${HTTP_ADMIN_USER}'
mapi_http_admin_pw='${HTTP_ADMIN_PW}'
zonetracker_database_path='${ZONETRACKER_DATABASE_PATH}'
EOF

# Pull down authorized_keys file if it's there
curl -o /opt/smartdc/node.config/${ROOT_AUTHORIZED_KEYS_FILE} -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/config.inc/${ROOT_AUTHORIZED_KEYS_FILE}

# We need to override nginx.conf on reconfigure, and it's safe to do during setup:
echo "Creating nginx configuration file"
cat >/opt/local/etc/nginx/nginx.conf <<NGINX
user www www;
worker_processes  1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections  1024;
  use /dev/poll;
}

http {
  include /opt/local/etc/nginx/mime.types;
  default_type  application/octet-stream;
  access_log /var/log/nginx/access.log;

  sendfile on;
  keepalive_timeout  65;

  upstream mapi {
    server 127.0.0.1:8080;
  }

  server {
    listen 80;

    location / {
      root   share/examples/nginx/html;
      index  index.html index.htm;

      proxy_set_header  X-Real-IP  \$remote_addr;
      proxy_set_header  X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header Host \$http_host;
      proxy_redirect off;

      proxy_pass http://mapi;
      break;
    }

    location /docs {
        root /opt/smartdc/mapi/public;
        index index.html;
    }

    location /ur-scripts/ {
        alias /opt/smartdc/agent-scripts/;
        autoindex on;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   share/examples/nginx/html;
    }

  }
}

NGINX

# Setup and configure nginx
if [[ -z $(/usr/bin/svcs -a|grep nginx) ]]; then
  echo "Importing nginx service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/nginx.xml
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/nginx:default refresh
  /usr/sbin/svcadm enable -s nginx
else
  echo "Restarting nginx service"
  /usr/sbin/svcadm disable -s nginx
  /usr/sbin/svcadm enable -s nginx
fi

# We don't need to reconfigure mDNS so, no need to restart services
# Configure nsswitch to use mdns & enable multicast dns:
hosts=$(cat /etc/nsswitch.conf |grep ^hosts)

if [[ ! $(echo $hosts | grep mdns) ]]; then
  echo "Updating hosts entry on nsswitch.conf"
  /opt/local/bin/gsed -i"" -e "s/^hosts.*$/hosts: files mdns dns/" /etc/nsswitch.conf
fi

ipnodes=$(cat /etc/nsswitch.conf |grep ^ipnodes)

if [[ ! $(echo $ipnodes | grep mdns) ]]; then
  echo "Updating ipnodes entry on nsswitch.conf"
  /opt/local/bin/gsed -i"" -e "s/^ipnodes.*$/ipnodes: files mdns dns/" /etc/nsswitch.conf
fi

# Do not use dns/multicast for this zone, we're using custom mDNSResponder from
# pkgsrc here:
if [[ "$(/usr/bin/svcs -Ho state dns/multicast)" == "online" ]]; then
  echo "Disabling dns/multicast"
  /usr/sbin/svcadm disable dns/multicast
fi

if [[ ! $(/usr/bin/svcs -a|grep mdnsresponder) ]]; then
  echo "Importing mDNSResponder service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/mdnsresponder.xml
  /usr/sbin/svcadm enable mdnsresponder
fi

echo "Generating MAPI config files."
host=`hostname`
amqp_user=$(echo ${RABBITMQ} | cut -d':' -f1)
amqp_pass=$(echo ${RABBITMQ} | cut -d':' -f2)
(cd /opt/smartdc/mapi && \
  SENDMAIL_TO="${MAIL_TO}" \
  SENDMAIL_FROM="${MAIL_FROM}" \
  AMQP_USER="${amqp_user}" \
  AMQP_PASSWORD="${amqp_pass}" \
  AMQP_HOST="${RABBITMQ_PRIVATE_IP}" \
  QUEUE_SYSTEM="AmqpQueueSystem" \
  EMAIL_PREFIX="[MCP API $host]" \
  MAC_PREFIX="${MAPI_MAC_PREFIX}" \
  DHCP_LEASE_TIME="${DHCP_LEASE_TIME}" \
  HTTP_ADMIN_USER="${HTTP_ADMIN_USER}" \
  HTTP_ADMIN_PW="${HTTP_ADMIN_PW}" \
 /opt/local/bin/rake dev:configs -f /opt/smartdc/mapi/Rakefile && \
  sleep 1 && \
  chown jill:jill /opt/smartdc/mapi/config/config.yml)


echo "Creating Rackup Configuration file."
cat > /opt/smartdc/mapi/config/config.ru <<RACKUP
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'cloud_control_api'))

require File.expand_path(File.join(File.dirname(__FILE__), '..','cloud_control_api', 'helpers'))
require File.expand_path(File.join(File.dirname(__FILE__), '..','cloud_control_api', 'application'))

run MAPI::Application.new
RACKUP


if [[ ! -e /opt/smartdc/mapi/gems/gems ]] || [[ $(ls /opt/smartdc/mapi/gems/gems| wc -l) -eq 0 ]]; then
  echo "Unpacking frozen gems for MCP API."
  (cd /opt/smartdc/mapi; PATH=/opt/local/bin:$PATH /opt/local/bin/rake gems:deploy -f /opt/smartdc/mapi/Rakefile)
fi

if [[ ! -e /opt/smartdc/mapi/config/unicorn.smf ]]; then
  echo "Creating MCP API Unicorn Manifest."
  /opt/local/bin/ruby -rerb -e "user='jill';group='jill';app_environment='production';application='mcp_api'; working_directory='/opt/smartdc/mapi'; puts ERB.new(File.read('/opt/smartdc/mapi/config/deploy/unicorn.smf.erb')).result" > /opt/smartdc/mapi/config/unicorn.smf
  chown jill:jill /opt/smartdc/mapi/config/unicorn.smf
fi

if [[ ! -e /opt/smartdc/mapi/config/unicorn.conf ]]; then
  echo "Creating MCP API Unicorn Configuration file."
  /opt/local/bin/ruby -rerb -e "app_port='8080'; worker_processes=$WORKERS; working_directory='/opt/smartdc/mapi'; application='mcp_api'; puts ERB.new(File.read('/opt/smartdc/mapi/config/unicorn.conf.erb')).result" > /opt/smartdc/mapi/config/unicorn.conf
  chown jill:jill /opt/smartdc/mapi/config/unicorn.conf
fi

# It is safe to always override with the right config
echo "Configuring MCP API Database."
cat > /opt/smartdc/mapi/config/database.yml <<MAPI_DB

:production: &prod
  :adapter: postgres
  :database: mapi
  :username: $POSTGRES_USER
  :password: $POSTGRES_PW
  :host: $POSTGRES_HOST
  :encoding: UTF-8

MAPI_DB

if [[ ! -e /opt/smartdc/mapi/tmp/pids ]]; then
  su - jill -c "mkdir -p /opt/smartdc/mapi/tmp/pids"
fi

echo "Creating MCP API Heartbeater Manifest."
RACK_ENV=production USER=jill GROUP=jill /opt/local/bin/rake smf:heartbeater -f /opt/smartdc/mapi/Rakefile
chown jill:jill /opt/smartdc/mapi/config/heartbeater_client.smf

echo "Creating MCP API Provisioner Manifest."
RACK_ENV=production USER=jill GROUP=jill /opt/local/bin/rake smf:provisioner -f /opt/smartdc/mapi/Rakefile
chown jill:jill /opt/smartdc/mapi/config/provisioner_client.smf

echo "Creating MCP API DatasetManager client Manifest."
RACK_ENV=production USER=jill GROUP=jill /opt/local/bin/rake smf:datasetmanager -f /opt/smartdc/mapi/Rakefile
chown jill:jill /opt/smartdc/mapi/config/datasetmanager_client.smf

echo "Creating MAPI Ur Client Manifest."
RACK_ENV=production USER=jill GROUP=jill /opt/local/bin/rake smf:ur -f /opt/smartdc/mapi/Rakefile
chown jill:jill /opt/smartdc/mapi/config/ur_client.smf

echo "Creating MAPI ZoneTracker Client Manifest."
RACK_ENV=production USER=jill GROUP=jill /opt/local/bin/rake smf:zonetracker -f /opt/smartdc/mapi/Rakefile
chown jill:jill /opt/smartdc/mapi/config/zonetracker_client.smf

# Just in case, create /var/logadm
if [[ ! -d /var/logadm ]]; then
  mkdir -p /var/logadm
fi

# Link logs to common places
mkdir -p /var/log/smartdc
ln -s /opt/smartdc/mapi/log /var/log/smartdc/mapi

# Log rotation:
cat >> /etc/logadm.conf <<LOGADM
mapi -C 10 -c -s 10m /opt/smartdc/mapi/log/*.log
nginx -C 5 -c -s 100m '/var/log/nginx/{access,error}.log'
postgresql -C 5 -c -s 100m /var/log/postgresql90.log
LOGADM

# Generate the agents setup script:
AGENTS_FILE_VERSION=$(ls -1t /opt/smartdc/agent-scripts/ | grep '^agents-.*\.sh' | grep -v -- "-hvm-" | head -n1)

echo "Generating agents setup file at '/opt/smartdc/mapi-data/setup_agents.sh'"
cat > /opt/smartdc/mapi-data/setup_agents.sh <<AGENTS
#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

PATH=/usr/bin:/usr/sbin:/bin:/sbin
export PATH

fatal()
{
    # Any error message should be redirected to stderr:
    echo "Error: \$1" 1>&2
    exit 1
}


setup_agents()
{
  cd /var/tmp

  AGENTS_SHAR=\$1

  if [[ -z \${AGENTS_SHAR} ]]; then
    AGENTS_SHAR="${AGENTS_FILE_VERSION}"
  fi

  /usr/bin/curl --silent --show-error -O http://${PRIVATE_IP}/ur-scripts/\${AGENTS_SHAR}

  if [[ ! -f /var/tmp/\${AGENTS_SHAR} ]]; then
    fatal "failed to download agents setup script"
  fi

  mkdir -p /opt/smartdc/agents/log
  /usr/bin/bash /var/tmp/\${AGENTS_SHAR} &>/opt/smartdc/agents/log/install.log
  result=\$(tail -n 1 /opt/smartdc/agents/log/install.log)

  if [[ "\$result" == "npm not ok" ]]; then
    tail -n 10 /opt/smartdc/agents/log/install.log >&2
    exit 1
  else
    tail -n 10 /opt/smartdc/agents/log/install.log >&2
  fi
}


if [[ ! -d /opt/smartdc/agents/bin ]]; then
  setup_agents \$1
fi

# Return SmartDC services statuses on STDOUT:
echo \$(svcs -a -o STATE,FMRI|grep smartdc)

# Scripts to be executed by Ur need to explicitly return an exit status code:
exit 0

AGENTS

# Generate the reboot server script:
echo "Generating reboot server file at '/opt/smartdc/mapi-data/reboot_server.sh'"
cat > /opt/smartdc/mapi-data/reboot_server.sh <<REBOOT
#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

PATH=/usr/bin:/usr/sbin
export PATH

# Scripts to be executed by Ur need to explicitly return an exit status code.
exit 113

REBOOT

echo "Creating $app_name-setup service"
cat >"/lib/svc/manifest/site/$app_name-setup.xml" <<SETUP_SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app_name}-setup' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app_name-data/$app_name-setup-service.sh' timeout_seconds='600'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Setup service ($app_name)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SETUP_SMF

echo "Creating SMF manifest for ssagent"
cat > /opt/smartdc/mapi/ssagent/ssagent.smf <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="ssagent">
  <service name="smartdc/app/ssagent" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/usr/bin/node /opt/smartdc/mapi/ssagent/ssagent.js &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/mapi/ssagent">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="AMQP_HOST" value="${RABBITMQ_PRIVATE_IP}"/>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/mapi/ssagent" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/mapi/ssagent" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Screenshot Agent Daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

exit 0
