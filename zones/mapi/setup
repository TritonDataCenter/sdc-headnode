#!/bin/bash
#
# Copyright (c) 2011 Joyent Inc. All rights reserved.
#

set -o xtrace

# This includes the fatal function and downloads and installs files.
source /var/svc/setup.common

echo "Finishing setup of MAPI zone"

zone_uuid=$(zonename)
zone_role="mapi"
app_name=${zone_role}

#
# symlink_ruby() just creates missing symlinks to ruby18 and irb18 on zones
# running ruby applications.
# It does not expect any argument.
#
function symlink_ruby
{
  # These happen to do not be created always:
  if [[ ! -e /opt/local/bin/ruby ]]; then
    echo "Symlinking ruby"
    ln -s /opt/local/bin/ruby18 /opt/local/bin/ruby
  fi

  if [[ ! -e /opt/local/bin/irb ]]; then
    echo "Symlinking irb"
    ln -s /opt/local/bin/irb18 /opt/local/bin/irb
  fi
}

#
# It's pretty obvious what create_jill_account() does. Intended to run on zones
# running ruby applications. It does not expect any arguments, for now.
#
function create_jill_account
{
  echo "Creating jill account"
  groupadd jill
  useradd -g jill -d /opt/smartdc jill
  chown -R jill:jill /opt/smartdc

  # XXX /etc/oshadow breaks changepass, not sure yet what's putting it there.
  if [[ -f /etc/oshadow ]]; then
      echo "WARNING: removing /etc/oshadow"
      rm -f /etc/oshadow
  fi

  echo "jill:naiWaic8sh" | /opt/local/sbin/changepass -n -m
  usermod -P 'Service Management' jill
  usermod -s /usr/bin/bash jill
  # Properly set PATH and other relevant stuff.
  cp /home/admin/.bash_profile /opt/smartdc/.bash_profile
  cp /home/admin/.bashrc /opt/smartdc/.bashrc
  cp /home/admin/.irbrc /opt/smartdc/.irbrc
  cp /home/admin/.profile /opt/smartdc/.profile
}

#
# Setup datasets this logic comes from the old zone-datasets and
# 95-zone-dataset.sh files
#

echo "Configuring ${zone_role}..."

curl -o /var/svc/mapi-data.zfs -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/mapi-data.zfs
if [[ -f /var/svc/mapi-data.zfs ]]; then
  zfs receive zones/${zone_uuid}/data/mapi-data < /var/svc/mapi-data.zfs
  zfs set mountpoint=/opt/smartdc/mapi-data zones/${zone_uuid}/data/mapi-data
  # Remove the snapshot created when received the zfs file:
  DATA_DS_SNAP=$(zfs list -t snapshot -H -o name|grep "data\/mapi-data@")
  zfs destroy ${DATA_DS_SNAP}
else
  zfs create -o mountpoint=/opt/smartdc/mapi-data zones/${zone_uuid}/data/mapi-data
fi

STAMP=$(cat /opt/smartdc/mapi-VERSION)
echo "$STAMP" >/root/mapi-app-timestamp

mkdir -p /opt/smartdc/mapi

# Get git revision:
cd /opt/smartdc/mapi-repo
REVISION=$(/opt/local/bin/git rev-parse --verify HEAD)

# Export complete repo into mapi:
cd /opt/smartdc
(cd mapi-repo && tar cf - .) | (cd mapi && tar xfp -)
rm -rf mapi/.git

# Create some directories into mapi-data (export only config into mapi-data).
mkdir -p /opt/smartdc/mapi-data/log
mkdir -p /opt/smartdc/mapi-data/tmp/pids

# Remove and symlink directories:
mv /opt/smartdc/mapi/config /opt/smartdc/mapi-data/config

rm -Rf /opt/smartdc/mapi/log
rm -Rf /opt/smartdc/mapi/tmp
rm -Rf /opt/smartdc/mapi/config
ln -s /opt/smartdc/mapi-data/log /opt/smartdc/mapi/log
ln -s /opt/smartdc/mapi-data/tmp /opt/smartdc/mapi/tmp
ln -s /opt/smartdc/mapi-data/config /opt/smartdc/mapi/config

# Save REVISION:
echo "${REVISION}">/opt/smartdc/mapi-data/REVISION
echo "${REVISION}">/opt/smartdc/mapi/REVISION

# Save VERSION
cd /opt/smartdc/mapi-repo
APP_VERSION=$(/opt/local/bin/git describe --tags)
echo "${APP_VERSION}">/opt/smartdc/mapi-data/VERSION
echo "${APP_VERSION}">/opt/smartdc/mapi/VERSION

# Cleanup build products:
cd /root/
rm -Rf /opt/smartdc/mapi-repo
rm /root/mapi-app-timestamp

#
# Grab some extra data files from assets
#
curl -o /opt/smartdc/headnode-sysinfo.json -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/headnode-sysinfo.json

mkdir -p /opt/smartdc/joysetup
curl -o /opt/smartdc/joysetup/joysetup.sh -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/joysetup.sh

mkdir -p /opt/smartdc/datasets
for manifest in $(curl -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/datasets/ \
    | grep ".dsmanifest" | cut -d '"' -f2); do

    curl -o /opt/smartdc/datasets/${manifest} -s -S -f \
        http://${ASSETS_IP}/extra/${zone_role}/datasets/${manifest}
done

mkdir -p /opt/smartdc/agent-scripts
for agents in $(curl -s -S -f \
    http://${ASSETS_IP}/extra/${zone_role}/agents/ \
    | grep "agents.*\.sh" | cut -d '"' -f2); do

    curl -o /opt/smartdc/agent-scripts/${agents} -s -S -f \
        http://${ASSETS_IP}/extra/${zone_role}/agents/${agents}
done

#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

# Before we enable postgresql, we'll make a little change on the way we stop
# the service, so we can stop it without having to stop all the agents:
echo "Updating postgresql stop method"
$(/opt/local/bin/gsed -i"" -e "s/\$PGDATA stop/\$PGDATA stop -m fast/" /opt/local/share/smf/method/svc-pgsql90)

# Apply configuration from /opt/smartdc/etc/zoneconfig now
/opt/smartdc/bin/configure || fatal "Unable to configure zone"

eval $(cat /opt/smartdc/etc/zoneconfig)

# Calculate the bitcounts
source /lib/sdc/network.sh
ADMIN_CIDR=$(ip_netmask_to_cidr ${ADMIN_NETWORK} ${ADMIN_NETMASK})
ADMIN_BITCOUNT=${ADMIN_CIDR##*/}
EXTERNAL_CIDR=$(ip_netmask_to_cidr ${EXTERNAL_NETWORK} ${EXTERNAL_NETMASK})
EXTERNAL_BITCOUNT=${EXTERNAL_CIDR##*/}

echo "Creating service setup script."
cat > "/opt/smartdc/$app_name-data/$app_name-setup-service.sh" <<SETUP_SERVICE
#!/usr/bin/bash

set -o errexit

function fatal
{
    echo "$app_name-setup-service.sh error: \$*"
    echo "Initial data import failed, changing mcp_api service to maintenance status"
    /usr/sbin/svcadm mark -t "maintenance" mcp_api
    exit 1
}

function errexit
{
    [[ \$1 -ne 0 ]] || exit 0
    fatal "error exit status \$1"
}

trap 'errexit \$?' EXIT

POSTGRES_USER='$POSTGRES_USER'
POSTGRES_PW='$POSTGRES_PW'

PGPASSFILE=/opt/smartdc/.pgpass

# This is a workaround.  Normally we would want a proper SMF dependency on the
# postgresql svc, but its too late in the release cycle so we're going to
# hardcode a loop to check the state of the svc here.  We should fix this
# later.
for i in 0 1 2 3 4 5 6 7 8 9
do
    svc=\$(/usr/bin/svcs -H network/postgresql)
    state=\${svc%% * *}
    [ "\$state" == "online" ] && break
    sleep 5
done
# No matter what the state now, we move on.

# Postgres starts out with the default pw of 'postgres'.  We need to change
# it to POSTGRES_PW before we can do anything else.
export PGPASSWORD=postgres
if ! /opt/local/bin/psql -U postgres \
    -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PW';" template1 ; then
    # We failed to change the pw.  This might happen if we already changed it
    # but the method failed later and we are re-running.  Since we are running
    # with errexit, we need to handle a failure, but we assume the pw is
    # already updated and just note this.
    echo "Changing the default password failed"
fi
export -n PGPASSWORD

# Given PostgreSQL will be into a separated zone, we cannot rely into SMF
# to test DB availability. Need to ping the DB and proceed once we've
# verified we can stablish a connection:

RETRY_AFTER='$DBCONN_RETRY_AFTER' NUM_ATTEMPTS='$DBCONN_NUM_ATTEMPTS' RACK_ENV=production /opt/local/bin/ruby /opt/smartdc/mapi/script/psql-test-connect.rb

if [[ \$? -ne 0 ]]; then
  echo "PostgreSQL not available after ${DBCONN_NUM_ATTEMPTS}, aborting."
  exit 1
else
  echo "Verified PostgreSQL availability, moving forward."
fi

# Without this, mapi db existence checking will always fail:
echo "localhost:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /root/.pgpass
chmod 0600 /root/.pgpass

if [[ -z \$(/opt/local/bin/psql -U postgres -h localhost -c "\\l"|grep mapi) ]]; then
  echo "Creating mapi database"
  echo "localhost:*:*:\$POSTGRES_USER:\$POSTGRES_PW" >> /opt/smartdc/.pgpass
  chown jill /opt/smartdc/.pgpass
  chmod 0600 /opt/smartdc/.pgpass
  su - jill -c "/opt/local/bin/createdb -U postgres -h localhost mapi"
fi

echo "Removing hardcoded fastercsv and json_pure dependency on dm-types gem"
\$(/opt/smartdc/mapi/script/apply_gem_patches.sh)

echo "Auto Upgrading MCP API Database."
su - jill -c "cd /opt/smartdc/mapi; RACK_ENV=production /opt/local/bin/rake standalone:db:autoupgrade -f /opt/smartdc/mapi/Rakefile"
sleep 1

# We might be upgrading an older version of MAPI, special fixes here:
if [[ ! -z \$(cat /opt/smartdc/mapi-data/config/config.ru|grep CloudControlApi) ]]; then
  echo "Upgrading MAPI RackUp configuration"
  \$(/opt/local/bin/gsed -i"" -e "s/CloudControlApi/MAPI/" /opt/smartdc/mapi-data/config/config.ru)
fi

if [[ -z \$(/usr/bin/svcs -a|grep mcp_api) ]]; then
  echo "Importing MCP API Unicorn Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/unicorn.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/application/mcp_api:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep provisioner_client) ]]; then
  echo "Importing MCP API Provisioner Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/provisioner_client.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/provisioner_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep ur_client) ]]; then
  echo "Importing MAPI Ur Agent Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/ur_client.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/ur_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep datasetmanager_client) ]]; then
  echo "Importing MCP API DatasetManager Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/datasetmanager_client.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/datasetmanager_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep heartbeater_client) ]]; then
  echo "Importing MCP API Heartbeater Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/heartbeater_client.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/heartbeater_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep zonetracker_client) ]]; then
  echo "Importing MCP API ZoneTracker Client Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/config/zonetracker_client.smf
  #/usr/sbin/svccfg -s svc:/network/smartdc/daemon/zonetracker_client:default refresh
fi

if [[ -z \$(/usr/bin/svcs -a|grep ssagent) ]]; then
  echo "Importing Screenshot Proxy Manifest"
  /usr/sbin/svccfg import /opt/smartdc/mapi/ssagent/ssagent.smf
fi

## Setup and call the verify script
echo "$POSTGRES_PW" > /tmp/pgpasswd

# (cd /opt/smartdc/mapi && ./script/verify_setup.sh)
(cd /opt/smartdc/mapi && RACK_ENV=production \
    DHCP_RANGE_START="$DHCP_RANGE_START" \
    DHCP_RANGE_END="$DHCP_RANGE_END" \
    ADMIN_NETWORK="$ADMIN_NETWORK" \
    ADMIN_BITCOUNT="$ADMIN_BITCOUNT" \
    ADMIN_GATEWAY="$ADMIN_GATEWAY" \
    ADMIN_IP="$ADMIN_IP" \
    ADMIN_UUID="$UFDS_ADMIN_UUID" \
    ADMIN_VLAN_ID="$ADMIN_VLAN_ID" \
    DATASETS="$DATASETS" \
    EXTERNAL_NETWORK="$EXTERNAL_NETWORK" \
    EXTERNAL_BITCOUNT="$EXTERNAL_BITCOUNT" \
    EXTERNAL_GATEWAY="$EXTERNAL_GATEWAY" \
    EXTERNAL_IP="$EXTERNAL_IP" \
    EXTERNAL_START_IP="$EXTERNAL_START_IP" \
    EXTERNAL_END_IP="$EXTERNAL_END_IP" \
    EXTERNAL_VLAN_ID="$EXTERNAL_VLAN_ID" \
    IMG_TYPE="$IMG_TYPE" \
    COMPANY_NAME="$COMPANY_NAME" \
    LOCATION="$LOCATION" \
    RACK_NAME="$RACK_NAME" \
    RACK_SIZE="$RACK_SIZE" \
    SERVER_ROLE="$SERVER_ROLE" \
    PACKAGE_SIZES="$PACKAGE_SIZES" \
    RESOLVER_LIST="$RESOLVER_LIST" \
 /opt/local/bin/rake dev:initial_data) 2>&1 | tee /tmp/initial_data.output

if [[ \${PIPESTATUS[0]} -gt 0 ]]; then
  fatal "Initial data import failed, changing mcp_api service to maintenance status"
fi

rm -f /tmp/initial_data.output /tmp/pgpasswd

# Remove the service, we don't wanna run it again (maybe also delete the script?)
echo "Deleting '${app_name}-setup' service"
/usr/sbin/svccfg delete "platform/smartdc/${app_name}-setup"

# Ensure we remove the setup service manifest from this zones core boot manifests
rm /lib/svc/manifest/site/${app_name}-setup.xml

exit 0

SETUP_SERVICE

chmod +x "/opt/smartdc/$app_name-data/$app_name-setup-service.sh"

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

touch /var/svc/setup_complete
echo "setup done"
(sleep 5; cp /var/svc/setup.log /var/svc/setup_init.log) &

exit 0
