#!/usr/bin/bash

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin
export PATH

# set -o xtrace

if [[ $# != 2 ]]; then
    echo "Usage: $0 <zone_name> <target_directory>"
    exit 1
fi

ROLE=mapi
UUID=$1
TARGET_DIR=$2

BASE="${TARGET_DIR}/${ROLE}"

PG_DUMP_VERSION=$(cat ${BASE}/RESTORE)
DUMP_FILE="/opt/smartdc/${ROLE}-data/${ROLE}-${PG_DUMP_VERSION}.pg_dump"

# We cannot restore if no data dataset:
if [[ ! -f ${BASE}/${ROLE}-data.zfs ]]; then
    echo "FATAL: Cannot find '${ROLE}' data dataset"
    exit 101
fi

# We want to disable any of the old smartdc svcs to prevent the SMF repository
# from being out of sync with the restored zone data.
# The zone is halted when we start restoring so use svc to talk to the zone's
# repo.
echo "==> Disabling 'smartdc' services on zone '${UUID}'"
export SVCCFG_CHECKHASH=1
export SVCCFG_REPOSITORY=/zones/${UUID}/root/etc/svc/repository.db
for service in `svccfg list | egrep smartdc`
do
	if [[ $service != "system/filesystem/smartdc" && \
	    $service != "platform/smartdc/capi_ipf_setup" ]]; then

		svccfg -s "$service:default" setprop general/enabled=false \
		    >/dev/null 2>&1
	fi
done
unset SVCCFG_CHECKHASH
unset SVCCFG_REPOSITORY

# Check for existing data dataset.
PREV_DATA_DATASET=$(zfs list -H -o name | grep "${UUID}\/data\/${ROLE}-data$")

# Destroy previous dataset.
if [[ ! -z "${PREV_DATA_DATASET}" ]]; then
    echo "==> Destroying dataset '${PREV_DATA_DATASET}'"
    zfs destroy -r "${PREV_DATA_DATASET}"
    if [[ $? -gt 0 ]]; then
        echo "FATAL: Unable to zfs destroy '${PREV_DATA_DATASET}' dataset"
        exit 102
    fi
fi

# ZFS receive the dataset from the backup:
echo "==> Receiving '${BASE}/${ROLE}-data.zfs'"
zfs receive -v "zones/${UUID}/data/${ROLE}-data" <"${BASE}/${ROLE}-data.zfs"
if [[ $? -gt 0 ]]; then
    echo "FATAL: Unable to zfs receive data dataset"
    exit 103
fi

# Copy additional files
# Older backups may not have had this config file
if [[ -f "${BASE}/node.config" ]]; then
    echo "==> Restoring config file for zone '${UUID}'"
    cp ${BASE}/node.config /zones/$UUID/root/opt/smartdc/node.config/node.config
else
    echo "Warning, older backup; missing config file for $UUID"
fi
[[ -f "${BASE}/static_routes" ]] && \
    cp ${BASE}/static_routes /zones/$UUID/root/etc/inet

# Now we need to reboot the zone in order to be able to set mountpoint for the
# new dataset properly and to restore the DB from backup.

echo "==> Booting '${UUID}' zone"
/usr/sbin/zoneadm -z ${UUID} boot

# Double check mountpoint for dataset:
if [[ "$(zfs get -H -o value mountpoint zones/${UUID}/data/${ROLE}-data)" != \
    "/opt/smartdc/${ROLE}-data"  ]]; then

    echo "==> Setting mountpoint for dataset 'zones/${UUID}/data/${ROLE}-data'"
    zlogin ${UUID} /usr/sbin/zfs set mountpoint="/opt/smartdc/${ROLE}-data" \
        zones/${UUID}/data/${ROLE}-data
    if [[ $? -gt 0 ]]; then
        echo "FATAL: Unable to set mountpoint for dataset into '${UUID}' zone"
        exit 104
    fi
fi

echo "==> Waiting for the zone's postgres to be running ..."
cnt=0
while [ $cnt -lt 30 ]
do
    state=`zlogin ${UUID} svcs -H postgresql:pg90 2>&1 | nawk '{print $1}'`
    [ "$state" == "online" ] && break
    sleep 2
    let cnt=$cnt+1
done

cnt=0
while [ $cnt -lt 30 ]
do
    state=`zlogin ${UUID} svcs -H postfix 2>&1 | nawk '{print $1}'`
    [ "$state" == "online" ] && break
    sleep 2
    let cnt=$cnt+1
done

# Restore the PostgreSQL dump on data dataset if exists - it might not if
# backup was made while the zone was halted.
if [[ -f /zones/${UUID}/root/opt/smartdc/${ROLE}/Rakefile ]]; then
    restore=$(zlogin ${UUID} /opt/local/bin/rake -vT \
        -f /opt/smartdc/${ROLE}/Rakefile | grep pg:restore)
    # Only attempt to restore the DB if there's a pg:restore task
    if [[ -n $restore ]]; then
        if [[ -f /zones/${UUID}/root/${DUMP_FILE} ]]; then
            echo "==> Restoring PostgreSQL DB to previous version"
            zlogin ${UUID} VERSION=${PG_DUMP_VERSION} \
                /opt/local/bin/rake pg:restore -f /opt/smartdc/${ROLE}/Rakefile
            if [[ $? -gt 0 ]]; then
                echo "FATAL: Unable to restore PostgreSQL Backup."
                echo "Please, verify DB integrity from the zone and,"
                echo "restore the DB from the file:"
                echo "    $DUMP_FILE"
                exit 105
            fi
            rm -f /zones/${UUID}/root/$DUMP_FILE

            echo "==> Upgrading MCP API Database, running Migrations."
            zlogin ${UUID} RACK_ENV=production \
                /opt/local/bin/rake standalone:db:autoupgrade \
                -f /opt/smartdc/${ROLE}/Rakefile
            [[ $? -gt 0 ]] && echo "WARNING: autoupgrade error"
        else
            printf "Warning: Cannot find '%s' in the zone. Unable to restore." \
                "${ROLE}-${PG_DUMP_VERSION}.pg_dump"
        fi
    fi
fi

echo "==> Enabling 'smartdc' svcs in zone '${UUID}' and waiting for 5 seconds"

services=$(zlogin ${UUID} svcs -a -o FMRI|grep smartdc)
for service in $services; do
    if [[ ( $service != 'svc:/system/filesystem/smartdc:default' ) && \
        ( $service != "svc:/platform/smartdc/capi_ipf_setup:default" ) ]]; then
        $(zlogin ${UUID} /usr/sbin/svcadm enable "$service")
    fi
done

sleep 5

echo "==> Halting '${UUID}' zone"
zoneadm -z ${UUID} halt

echo "==> All done!!!"

exit 0
