#!/bin/bash

echo "99 finalizing adminui zone"

app_name='adminui'

#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

# We need to generate our own self signed certificate for Nginx:
echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:4096 -keyout /opt/local/etc/openssl/private/selfsigned.pem -out /opt/local/etc/openssl/private/selfsigned.pem

# Apply configuration from /opt/smartdc/etc/zoneconfig now
source /opt/smartdc/bin/configure.sh

echo "Importing MAPI Admin UI Unicorn Manifest"
/usr/sbin/svccfg import /opt/smartdc/adminui/config/unicorn.smf
sleep 10 # XXX
#/usr/sbin/svccfg -s svc:/network/smartdc/application/adminui:default refresh




echo Creating manifest for consoleproxy:
cat > /opt/smartdc/consoleproxy/consoleproxy-manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="consoleproxy">
  <service name="smartdc/app/consoleproxy" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/local/bin/node /opt/smartdc/consoleproxy/consoleproxy.js"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/consoleproxy">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
          <envvar name="ADMINUI_PATH" value="/opt/smartdc/adminui" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/consoleproxy" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/consoleproxy" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">consoleproxy daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Importing consoleproxy-manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/consoleproxy/consoleproxy-manifest.xml

ln -sf /opt/local/etc/openssl/private/selfsigned.pem /opt/smartdc/consoleproxy/self.pem

echo "Enablig service consoleproxy"
/usr/sbin/svcadm enable smartdc/app/consoleproxy




echo Creating manifest for caproxy:
cat > /opt/smartdc/caproxy/caproxy-manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="caproxy">
  <service name="smartdc/app/caproxy" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/local/bin/node /opt/smartdc/caproxy/caproxy.js"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/caproxy">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
          <envvar name="ADMINUI_PATH" value="/opt/smartdc/adminui" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/caproxy" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/caproxy" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">caproxy daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Importing caproxy-manifest.xml"
/usr/sbin/svccfg import /opt/smartdc/caproxy/caproxy-manifest.xml

echo "Enablig service caproxy"
/usr/sbin/svcadm enable smartdc/app/caproxy

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

if [[ ! -n ${KEEP_DATA_DATASET} ]]; then

  ## Call the verify script
  (cd /opt/smartdc/adminui && ./script/verify_setup.sh)

fi
