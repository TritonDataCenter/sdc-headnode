#!/usr/bin/bash
#
# Copyright (c) 2011 Joyent Inc., All rights reserved.
#

set -o xtrace

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

eval $(cat /opt/smartdc/etc/zoneconfig)

# The user-script is downloaded and executed on every zone boot. We take
# advantage of this to maintain the cached config values post-setup.
if [ -e /var/svc/setup_complete ]; then
	oldpw=`nawk '{
	    if (! done && $1 == "\"password\":") {
		print substr($2, 2, length($2) - 3)
		done = 1
	    }
	}' /opt/smartdc/cloudapi/cfg/config.json`
	[ "$cloudapi_http_admin_pw" == "$oldpw" ] && exit 0

	echo "Updating cloudapi configuration"
	nawk -v p=$cloudapi_http_admin_pw '{
	    if (! done && $1 == "\"password\":") {
		printf("  \"password\": \"%s\",\n", p)
		done = 1
	    } else {
		print $0
	    }
	}' /opt/smartdc/cloudapi/cfg/config.json \
	 > /opt/smartdc/cloudapi/cfg/config.json.new
	mv /opt/smartdc/cloudapi/cfg/config.json.new \
	   /opt/smartdc/cloudapi/cfg/config.json
	svcadm restart cloudapi
fi

# XXX is net1 external nic?
EXT_IPADDR=`ifconfig net1 | nawk '{if ($1 == "inet") print $2}'`
CLOUDAPI_EXTERNAL_URL="https://$EXT_IPADDR"

echo "Creating SMF manifest"
cat > /opt/smartdc/cloudapi/cloudapi_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="cloudapi">
  <service name="smartdc/site/cloudapi" type="service" version="6.1.0">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/node/bin/node /opt/smartdc/cloudapi/server.js &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/cloudapi">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/opt/smartdc/node/bin:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="LD_PRELOAD_32" value="/usr/lib/extendedFILE.so.1" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/cloudapi" />
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/cloudapi" />
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Stable"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Cloudapi daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

cat > /opt/smartdc/cloudapi/cfg/config.json <<HERE
{
  "siteName": "${CLOUDAPI_EXTERNAL_URL}",
  "port": 443,
  "cert": "./ssl/cert.pem",
  "key": "./ssl/key.pem",
  "logLevel": "Info",
  "ufds": {
    "url": "ldaps://127.0.0.1",
    "bindDN": "${UFDS_ROOT_DN}",
    "bindPassword": "${UFDS_ROOT_PW}",
    "cache": {
      "size": 1000,
      "expiry": 300
    }
  },
  "mapi": {
    "uri": "${MAPI_URL}",
    "username": "${MAPI_HTTP_ADMIN_USER}",
    "password": "${MAPI_HTTP_ADMIN_PW}",
    "datasetCache": {
      "size": 100,
      "expiry": 300
    },
    "pkgCache": {
      "size": 100,
      "expiry": 60
    }
  },
  "ca": {
    "uri": "${CA_URL}"
  },
  "rabbitmq": {
    "host": "${RABBIT_IP}",
    "user": "guest",
    "password": "guest",
    "vhost": "/"
  },
  "datacenters": {
    "${DATACENTER_NAME}": "${CLOUDAPI_EXTERNAL_URL}"
  },
  "preProvisionHook": {
    "plugin": "./plugins/capi_limits",
    "enabled": true,
    "config": {
      "datacenter": "${DATACENTER_NAME}",
      "defaults": {
        "smartos": 1,
        "nodejs": 1,
        "ubuntu": 1
      }
    }
  },
  "postProvisionHook": {
    "plugin": "./plugins/machine_email",
    "enabled": false,
    "config": {
      "sendmail": "/opt/local/sbin/sendmail -i",
      "from": "support@joyent.com",
      "subject": "Your SmartDataCenter machine is provisioning",
      "body": "Check /my/machines for updates"
    }
  },
  "userThrottles": {
    "all": {
      "username": true,
      "burst": 30,
      "rate": 10,
      "overrides": {
        "${CAPI_ADMIN_LOGIN}": {
          "burst": 0,
          "rate": 0
        }
      }
    },
    "analytics": {
      "username": true,
      "burst": 1000,
      "rate": 100,
      "overrides": {
        "${CAPI_ADMIN_LOGIN}": {
          "burst": 0,
          "rate": 0
        }
      }
    }
  }
}
HERE

echo Importing cloudapi_manifest.xml
/usr/sbin/svccfg import /opt/smartdc/cloudapi/cloudapi_manifest.xml

echo "Creating HAPrgooxy config file"
cat > /opt/local/etc/haproxy.cfg <<HERE
global
        log 127.0.0.1 local0
        ulimit-n 4096
        user haproxy
        group haproxy
        daemon

defaults
        option ssl-hello-chk
        timeout connect 400ms
        timeout client 1m
        timeout server 5m

listen ufds_proxy 127.0.0.1:636
        mode tcp
        option tcplog
        log global
HERE

# Add all UFDS IPs to haproxy
# Mark the first one as not backup and all the others as backup
ufds_ips=`set | nawk -F= '/^UFDS_ADMIN_IP/ {if ($2 != myaddr) print $2}'`
U=0
for ip in $ufds_ips
do
    if [ $U == 0 ] ; then
        echo "        server ufds$U $ip:636 check" \
            >> /opt/local/etc/haproxy.cfg
    else
        echo "        server ufds$U $ip:636 check backup" \
            >> /opt/local/etc/haproxy.cfg
    fi

    let U+=1
done

echo "Enabling service haproxy"
/usr/sbin/svcadm disable haproxy
/usr/sbin/svcadm enable haproxy

echo "Enabling service cloudapi"
/usr/sbin/svcadm disable smartdc/site/cloudapi
/usr/sbin/svcadm enable smartdc/site/cloudapi

exit 0
