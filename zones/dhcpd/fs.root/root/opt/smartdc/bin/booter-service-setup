#!/bin/bash

source /opt/smartdc/etc/zoneconfig

if [[ -z "${MAPI_URL}" ]] || [[ -z "${MAPI_USER}" ]] ||[[ -z "${MAPI_PW}" ]] || [[ -z "${PRIVATE_IP}" ]]; then
    echo "Must set MAPI_URL, MAPI_USER, MAPI_PW and PRIVATE_IP environment variables"
    exit 1
fi

cat > /opt/smartdc/booter/config.js <<CONFIG
exports.config = {
  mapiUrl  : "${MAPI_URL}",
  user     : "${MAPI_USER}",
  password : "${MAPI_PW}",
  listenIp : "0.0.0.0",
  tftpRoot : '/tftpboot',
  defaultGateway : "${DHCP_GATEWAY}",
  dhcpIp         : "${PRIVATE_IP}",
  leaseTime      : "${DHCP_LEASE_TIME}",
  netmask        : "${ADMIN_NETMASK}",
}
CONFIG

tmp=`mktemp`
echo "Creating manifest for dhcpd"
cat > ${tmp} <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="dhcpd">
  <service name="smartdc/site/dhcpd" type="service" version="0.0.1">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/smartdc/bin/node dhcpd.js"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/booter">
        <!-- <method_credential user="root" group="staff"/> -->
        <method_environment>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="NODE_PATH" value="/opt/smartdc/booter/deps"/>
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/booter">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/booter">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="duration" type="astring" value="child"/>
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>

    <stability value="Evolving"/>

    <template>
      <common_name>
        <loctext xml:lang="C">dhcpd booter (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo "Importing dhcpd manifest"
/usr/sbin/svccfg import ${tmp}
sleep 10 # XXX
#/usr/sbin/svccfg -s svc:/smartdc/site/dhcpd:default refresh
echo "Enabling dhcpd service"
/usr/sbin/svcadm enable smartdc/site/dhcpd
rm $tmp

# Import in.tftpd service manifest
tmp=`mktemp`
echo "Creating manifest for in.tftpd"
cat > ${tmp} <<EOF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
	<service name='network/tftpd' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='network' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/milestone/network:default'/>
    </dependency>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
		<exec_method name='start' type='method' exec='/opt/local/sbin/in.tftpd -l -s /tftpboot' timeout_seconds='60' />
		<exec_method name='restart' type='method' exec=':kill' timeout_seconds='60' />
		<exec_method name='stop' type='method' exec=':kill' timeout_seconds='60' />
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='ignore_error' type='astring' value='core,signal'/>
    </property_group>
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>tftp-hpa</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
EOF

echo "Importing tftpd manifest"
/usr/sbin/svccfg import ${tmp}
sleep 10 # XXX
#/usr/sbin/svccfg -s svc:/network/tftpd:default refresh
echo "Enabling tftpd service"
/usr/sbin/svcadm enable network/tftpd
rm $tmp



