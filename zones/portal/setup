#!/usr/bin/bash

# This script runs with the $CONFIG_assets_ip variable set to the assets zone
# IP address.  Its up to this script to pull down the rest of the files it
# needs from the assets zone and setup the zone for the given role.  This
# script is run in the background by the mdata svc so its ok if it takes
# a little while to install all of the pkgs.

PATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin

role=portal
app_name=$role

cd /var/svc

curl -k -o zoneconfig -s $CONFIG_assets_ip:/extra/$role/zoneconfig
curl -k -o hn_config -s $CONFIG_assets_ip:/extra/$role/hn_config
curl -k -o hn_generic -s $CONFIG_assets_ip:/extra/$role/hn_generic

# We need some of the headnode config, but don't leave the files around
. /var/svc/hn_config
. /var/svc/hn_generic
rm -f /var/svc/hn_config /var/svc/hn_generic
# Load up the config values
. /var/svc/zoneconfig

# The user-script is downloaded and executed on every zone boot. We take
# advantage of this to maintain the cached config values post-setup.
if [ -e /var/svc/setup_complete ]; then
	oldpw=`nawk '{
	    if ($1 == "\"password\":")
		print substr($2, 2, length($2) - 2)
	}' /opt/smartdc/portal/cfg/capi.json`
	[ "$capi_http_admin_pw" == "$oldpw" ] && exit 0

	echo "Updating portal configuration"
	nawk -v p=$capi_http_admin_pw '{
	    if ($1 == "\"password\":")
		printf("  \"password\": \"%s\"\n", p)
	    else
		print $0
	}' /opt/smartdc/portal/cfg/capi.json \
	 > /opt/smartdc/portal/cfg/capi.json.new
	mv /opt/smartdc/portal/cfg/capi.json.new \
	   /opt/smartdc/portal/cfg/capi.json
	chown 502:staff /opt/smartdc/portal/cfg/capi.json
	svcadm restart portal
	exit 0
fi

# Setup the zone
curl -k -o pkgsrc -s $CONFIG_assets_ip:/extra/$role/pkgsrc
curl -k -o fs.tar.bz2 -s $CONFIG_assets_ip:/extra/$role/fs.tar.bz2

PUBLIC_IP=`ifconfig net0 | nawk '{if ($1 == "inet") print $2}'`
EXTERNAL_URL="https://$PUBLIC_IP"

# Unpack fs.tar and copy files into proper locations within the zone
mkdir /.stage
echo "unpack fs.tar"
(cd /.stage; bzcat /var/svc/fs.tar.bz2 | tar xbf 512 -) 
rm -f /var/svc/fs.tar.bz2
echo "install root"
(cd /.stage/root; tar cbf 512 - *) | (cd /; tar xbf 512 -)
echo "install site"
(cd /.stage/site; tar cbf 512 - *) | (cd /lib/svc/manifest/site; tar xbf 512 -)
rm -rf /.stage

for i in `cat /var/svc/pkgsrc`
do
	pkgin -y install $i
done

# We need to generate our own self signed certificate for Nginx:
echo "Generating SSL Certificate"
/opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:4096 -keyout /opt/local/etc/openssl/private/selfsigned.pem -out /opt/local/etc/openssl/private/selfsigned.pem

echo Creating manifest for portal: 
cat > /opt/smartdc/portal/portal_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="portal">
  <service name="smartdc/site/portal" type="service" version="0.0.1">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/local/bin/node server.js &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="NODE_PATH" value="/opt/smartdc/portal/deps"/>
          <envvar name="PORT" value="4000" />
          <envvar name="NODE_ENV" value="production" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>


    <stability value="Evolving"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Portal daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

# Update the config with the correct values.
mkdir -p /opt/smartdc/portal/cfg
cat > /opt/smartdc/portal/cfg/config.js <<HERE
exports.config = {
  externalUrl : "${EXTERNAL_URL}",
  capiConfig : "./cfg/capi.json",
  cloudApiConfig : "./cfg/cloudApi.json",
  machineQueryLimit : 500,
  nodemailerOpts : {
    sendmailPath : "/opt/local/sbin/sendmail",
    sender : "no-reply <no-reply@no.de>",
  },
  defaultCAParams : { module : "tcp", stat : "accepts", decomposition : "raddr" },
  defaultCAChoices : [
    { label : "TCP accept operations", params : { module : "tcp", stat : "accepts", decomposition : "raddr", "idle-max" : 30 }},
    { label : "HTTP client operations", params : { module : "node", stat : "httpc_ops", decomposition : "raddr", "idle-max" : 30 }},
    { label : "Socket read/write operations", params : { module : "node", stat : "socket_ops", decomposition : "raddr", "idle-max" : 30 }},
  ],
  listenIp : "${PUBLIC_IP}",
  machineListConfig : "./cfg/machineListFields.json",
  provisionOptionsConfig : "./cfg/provisionOptions.json",
  signupOptionsConfig : './cfg/signupOptions.json',
	siteCopyFile : './local.joyent.en.js',
  siteThemeName : 'node'
}
HERE

cat > /opt/smartdc/portal/cfg/capi.json <<HERE
{
  "uri": "${CAPI_API_EXTERNAL_URL}",
  "username": "${CAPI_HTTP_ADMIN_USER}",
  "password": "${CAPI_HTTP_ADMIN_PW}"
}
HERE

cat > /opt/smartdc/portal/cfg/cloudApi.json <<HERE
{
  "url": "${CLOUD_API_EXTERNAL_URL}",
  "version": ">=6.5.0"
}
HERE

cat > /opt/smartdc/portal/cfg/machineListFields.json <<HERE
{
  "machineListFields": [
    { "name": "type", "heading": "Type", "sortable": true, "width": 104 },
    { "name": "name", "heading": "Machine name", "sortable": true, "mutate": "abbrevName", "width": 280 },
    { "name": "ips", "heading": "Public IP Address", "sortable": true, "width": 140 },
    { "name": "memory", "heading": "RAM", "sortable": true, "width": 83 },
    { "name": "created", "date": true, "heading": "Age", "sortable": true, "width": 130 },
    { "name": "state", "heading": "Status", "sortable": true, "width": 125 }
  ]
}
HERE

cat > /opt/smartdc/portal/cfg/provisionOptions.json <<HERE
{
  "provisionOptions": [
    { "name": "package", "alwaysShow": true, "label": "form.label.package" },
    { "name": "dataset", "alwaysShow": true, "label": "form.label.machine_type" },
    { "name": "name", "label": "form.label.machine_name" },
    { "name": "password", "label": "form.label.machine_password" }
  ]
}
HERE


cat > /opt/smartdc/portal/cfg/signupOptions.json <<HERE
{
  "signupOptions": [
    { "name": "email_address", "label": "form.label.email", "required" : "true" },
    { "name": "login", "label": "form.label.username", "required" : "true" },
    { "name": "password", "label": "form.label.password", "required" : "true", "type" : "password" },
    { "name": "password_confirmation", "label": "form.label.password_confirm", "required" : "true", "type" : "password" },
    { "name": "last_name", "label": "form.label.last_name", "required" : "false" },
    { "name": "first_name", "label": "form.label.first_name", "required" : "false" },
    { "name": "phone_number", "label": "form.label.phone_number", "required" : "false"}
  ]
}
HERE


# We need to override nginx.conf on reconfigure, and it's safe to do during setup:
echo "Creating nginx configuration file"
cat >/opt/local/etc/nginx/nginx.conf <<NGINX
user www www;
worker_processes 1;
error_log /var/log/nginx/error.log;
#pid /var/spool/nginx/nginx.pid;

events {
    worker_connections 1024;
    use /dev/poll; # important on Solaris
}

http {
    include /opt/local/etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '\$remote_addr - \$remote_user [\$time_local] \$request '
                    '"\$status" \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile off; # important on Solaris
    keepalive_timeout 60;
    server_tokens off;

    upstream portal {
        server ${PUBLIC_IP}:4000;
    }

    server {
        listen 80;
        rewrite ^(.*) https://\$host\$1 permanent;
    }

    server {
        listen 443;

        # Self-signed is okay. Production Zeus will handle the real no.de certs.
        ssl on;
        ssl_certificate /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_certificate_key /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_prefer_server_ciphers on;

        location / {
            root /opt/smartdc/portal/public;
            proxy_set_header X-Real-IP  \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header Host \$http_host;
            proxy_redirect off;

            ## Serve static files
            #if (-f \$request_filename) {
            #    break;
            #}

            proxy_pass http://portal;
            break;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root share/examples/nginx/html;
        }
    }
}

NGINX

# Setup and configure nginx
if [[ -z $(/usr/bin/svcs -a|grep nginx) ]]; then
  echo "Importing nginx service"
  /usr/sbin/svccfg import /opt/local/share/smf/manifest/nginx.xml
  sleep 10 # XXX
  #/usr/sbin/svccfg -s svc:/network/nginx:default refresh
  /usr/sbin/svcadm enable -s nginx
else
  echo "Restarting nginx service"
  /usr/sbin/svcadm disable -s nginx
  /usr/sbin/svcadm enable -s nginx
fi

# Just in case, create /var/logadm
if [[ ! -d /var/logadm ]]; then
  mkdir -p /var/logadm
fi

# Log rotation:
cat >> /etc/logadm.conf <<LOGADM
nginx -C 5 -c -s 100m '/var/log/nginx/{access,error}.log'
LOGADM

echo Importing portal_manifest.xml
/usr/sbin/svccfg import /opt/smartdc/portal/portal_manifest.xml
#/usr/sbin/svccfg -s svc:/smartdc/site/portal:default refresh
echo Enablig service portal
/usr/sbin/svcadm enable smartdc/site/portal

touch /var/svc/setup_complete
echo "setup done"
