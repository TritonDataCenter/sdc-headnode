#!/bin/bash

echo "99 finalizing portal zone"

# node request package runs fine in npm, but here, we need to explicitly setup an index.js
# to map it to something plain node understands
if [ ! -e /opt/smartdc/portal/deps/request/index.js ]; then
    (cd /opt/smartdc/portal/deps/request; ln -s main.js index.js)
fi

# Update the config with the correct values.
cat > /opt/smartdc/portal/config.js <<HERE
exports.config = {
  displayCouponField : false,
  publicApiUrl : "http://${PUBLIC_API_PRIVATE_IP}:8080/v1",
  privateCAUrl : "http://${MAPI_API_PRIVATE_IP}:80",
  privateCAPIUrl : "http://${CAPI_API_PRIVATE_IP}:8080",
  CAPIuser : "admin",
  CAPIpassword : "tot@ls3crit",
  CAPIMetaCAKey : "portal-coal",
  CAPIMetaCABlessed : "blessed-instrumentation",
  defaultCAParams : { module : "node", stat : "httpd_ops", decomposition : "raddr" },
  clientCABlackList : [ 'nic', 'syscall', 'io', { cpu : ['utilization'] } ],
}
HERE

echo Creating manifest for portal: 
cat > /opt/smartdc/portal/portal_manifest.xml <<HERE
<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<service_bundle type="manifest" name="portal">
  <service name="smartdc/site/portal" type="service" version="0.0.1">

    <create_default_instance enabled="true"/>
    <single_instance/>

    <dependency name="network" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/milestone/network:default"/>
    </dependency>

    <dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
      <service_fmri value="svc:/system/filesystem/local"/>
    </dependency>

    <exec_method
      type="method"
      name="start"
      exec="/opt/local/bin/node server.js &amp;"
      timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <method_credential user="nobody" group="nobody" privileges="basic,net_privaddr"/>
        <method_environment>
          <envvar name="PATH" value="/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
          <envvar name="NODE_PATH" value="/opt/smartdc/portal/deps"/>
          <envvar name="PORT" value="4000" />
          <envvar name="NODE_ENV" value="production" />
        </method_environment>
      </method_context>
    </exec_method>

    <exec_method type="method" name="restart" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <exec_method type="method" name="stop" exec=":kill" timeout_seconds="60">
      <method_context working_directory="/opt/smartdc/portal">
        <!-- <method_credential user="root" group="staff"/> -->
      </method_context>
    </exec_method>

    <property_group name="startd" type="framework">
      <propval name="ignore_error" type="astring" value="core,signal"/>
    </property_group>

    <property_group name="application" type="application">

    </property_group>


    <stability value="Evolving"/>

    <template>
      <common_name>
        <loctext xml:lang="C">Portal daemon (node)</loctext>
      </common_name>
    </template>

  </service>

</service_bundle>
HERE

echo Importing portal_manifest.xml
svccfg import /opt/smartdc/portal/portal_manifest.xml
echo Enablig service portal
svcadm enable smartdc/site/portal


# Setup and configure nginx
if [[ -z $(/usr/bin/svcs -a|grep nginx) ]]; then
  echo "Importing nginx service"
  cat >/opt/local/etc/nginx/nginx.conf <<NGINX
user www www;
worker_processes 1;
error_log /var/log/nginx/error.log;
#pid /var/spool/nginx/nginx.pid;

events {
    worker_connections 1024;
    use /dev/poll; # important on Solaris
}

http {
    include /opt/local/etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '\$remote_addr - \$remote_user [\$time_local] \$request '
                    '"\$status" \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile off; # important on Solaris
    keepalive_timeout 60;
    server_tokens off;

    upstream portal {
        server ${PRIVATE_IP}:4000;
    }

    server {
        listen 443;

        # Self-signed is okay. Production Zeus will handle the real no.de certs.
        ssl on;
        ssl_certificate /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_certificate_key /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_prefer_server_ciphers on;

        location / {
            root /opt/smartdc/portal/public;
            proxy_set_header X-Real-IP  \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header Host \$http_host;
            proxy_redirect off;

            ## Serve static files
            #if (-f \$request_filename) {
            #    break;
            #}

            proxy_pass http://portal;
            break;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root share/examples/nginx/html;
        }
    }
}

NGINX

  /usr/sbin/svccfg import /opt/local/share/smf/manifest/nginx.xml
  /usr/sbin/svcadm enable -s nginx
fi



