#!/bin/bash

svcadm clear network/physical:default >/dev/null 2>&1

echo "99 finalizing pubapi zone"

app_name='pubapi'

# from zoneinit-common:
ruby_app_update_service $app_name

if [[ ! $(/usr/bin/svcs -a|grep ${app_name}-update) ]]; then
  echo "Importing '${app_name}-update' service"
  $(/usr/sbin/svccfg import /opt/local/share/smf/manifest/$app_name-update.xml)
fi

if [[  "$(/usr/bin/svcs -Ho state ${app_name}-update)" != "online"  ]]; then
  echo "Enabling '${app_name}-update' service"
  $(/usr/sbin/svcadm enable -s ${app_name}-update)
fi


#
# Call symlink_ruby (imported from 97-zoneinit-common)
#
symlink_ruby

#
# Also, from 97-zoneinit-common
#
create_jill_account

# Note these files should have been created by previous Rake task.
# If we copy these files post "gsed", everything is reset:
if [[ ! -e /opt/smartdc/pubapi/config/config.ru ]]; then
  cp /opt/smartdc/pubapi/config/config.ru.sample /opt/smartdc/pubapi/config/config.ru
fi

if [[ ! -e /opt/smartdc/pubapi/config/config.yml ]]; then
  #TODO: what should sendmail config be for production
  cat >"/opt/smartdc/pubapi/config/config.yml" <<CONFIGYML
---
development: &defaults
  name: Joyent Public API
  url: http://${PUBLIC_IP}:8080/v1
  ignore_coupons: true
  datastore:
    adapter: sqlite3
    database: development.db
  sendmail:
    sendmail_path: /opt/local/sbin/sendmail
    sendmail_arguments: '-i -t'
    to: brock@joyent.com
    from: support@joyent.com
  capi:
    url: ${CAPI_ADMIN_IP}:8080
    username: admin
    password: tot@ls3crit
  mapi:
    coal:
      url: ${MAPI_ADMIN_IP}
      username: ${MAPI_HTTP_ADMIN_USER}
      password: ${MAPI_HTTP_ADMIN_PW}
      resources:
        bare:
          coupon: false
          repo: false
        nodejs:
          coupon: false
          repo: true
          ram: 128
        protemplate:
          coupon: false
          repo: false

staging:
  <<: *defaults

test:
  <<: *defaults

production:
  <<: *defaults
CONFIGYML
fi

if [[ $(ls /opt/smartdc/pubapi/gems/gems 2>/dev/null | wc -l) -eq 0 ]]; then
  echo "Unpacking frozen gems for Public API."
  (cd /opt/smartdc/pubapi; PATH=/opt/local/bin:$PATH /opt/local/bin/rake gems:deploy -f /opt/smartdc/pubapi/Rakefile)
fi

if [[ ! -e /opt/smartdc/pubapi/config/unicorn.smf ]]; then
  echo "Creating Public API Unicorn Manifest."
  /opt/local/bin/ruby18 -rerb -e "user='jill';group='jill';app_environment='production';application='pubapi'; working_directory='/opt/smartdc/pubapi'; puts ERB.new(File.read('/opt/smartdc/pubapi/smartdc/unicorn.smf.erb')).result" > /opt/smartdc/pubapi/config/unicorn.smf
  chown jill:jill /opt/smartdc/pubapi/config/unicorn.smf
fi

if [[ ! -e /opt/smartdc/pubapi/config/unicorn.conf ]]; then
  echo "Creating Public API Unicorn Configuration file."
  /opt/local/bin/ruby18 -rerb -e "app_port='8080'; worker_processes=1; working_directory='/opt/smartdc/pubapi'; application='pubapi'; puts ERB.new(File.read('/opt/smartdc/pubapi/smartdc/unicorn.conf.erb')).result" > /opt/smartdc/pubapi/config/unicorn.conf
  chown jill:jill /opt/smartdc/pubapi/config/unicorn.conf
fi

if [[ ! -e /opt/smartdc/pubapi/tmp/pids ]]; then
  su - jill -c "mkdir -p /opt/smartdc/pubapi/tmp/pids"
fi

echo "Importing Public API Unicorn Manifest"
/usr/sbin/svccfg import /opt/smartdc/pubapi/config/unicorn.smf
sleep 1

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

