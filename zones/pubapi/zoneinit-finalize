#!/bin/bash

svcadm clear network/physical:default >/dev/null 2>&1

echo "99 finalizing pubapi zone"

app_name='pubapi'

echo "Creating $app_name-update service"

cat >"/opt/local/share/smf/manifest/$app_name-update.xml" <<SMF
<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='platform/smartdc/${app_name}-update' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='filesystem' grouping='require_all' restart_on='error' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/smartdc/$app_name-data/$app_name-update-service.sh' timeout_seconds='60'>
      <method_context>
        <method_credential user='root' group='root'/>
      </method_context>
    </exec_method>
    <exec_method name='stop' type='method' exec=':true' timeout_seconds='0'/>
    <property_group name='application' type='application'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group> 
    <stability value='Evolving'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartDC Update service ($app_name)</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>
SMF

if [[ ! $(/usr/bin/svcs -a|grep ${app_name}-update) ]]; then
  echo "Importing '${app_name}-update' service"
  $(/usr/sbin/svccfg import /opt/local/share/smf/manifest/$app_name-update.xml)
fi

if [[  "$(/usr/bin/svcs -Ho state ${app_name}-update)" != "online"  ]]; then
  echo "Enabling '${app_name}-update' service"
  $(/usr/sbin/svcadm enable -s ${app_name}-update)
fi

# These happen to do not be created always:
if [[ ! -e /opt/local/bin/ruby ]]; then
  echo "Symlinking ruby"
  ln -s /opt/local/bin/ruby18 /opt/local/bin/ruby
fi

if [[ ! -e /opt/local/bin/irb ]]; then
  echo "Symlinking irb"
  ln -s /opt/local/bin/irb18 /opt/local/bin/irb
fi

echo "Creating jill account"
groupadd jill
useradd -g jill -d /opt/smartdc jill
chown -R jill:jill /opt/smartdc
echo "jill:naiWaic8sh" | /root/changepass -n -m > /dev/null 2>&1
usermod -P 'Service Management' jill
usermod -s /usr/bin/bash jill

# Note these files should have been created by previous Rake task.
# If we copy these files post "gsed", everything is reset:
if [[ ! -e /opt/smartdc/pubapi/config/config.ru ]]; then
  cp /opt/smartdc/pubapi/config/config.ru.sample /opt/smartdc/pubapi/config/config.ru
fi

if [[ ! -e /opt/smartdc/pubapi/config/config.yml ]]; then
  #TODO: what should sendmail config be for production
  cat >"/opt/smartdc/pubapi/config/config.yml" <<CONFIGYML
---
development: &defaults
  name: Joyent Public API
  url: http://${PUBLIC_IP}:8080/v1
  datastore:
    adapter: sqlite3
    path: development.db
  sendmail:
    sendmail_path: /opt/local/sbin/sendmail
    sendmail_arguments: '-i -t'
    to: brock@joyent.com
    from: support@joyent.com
  capi:
    url: ${CAPI_ADMIN_IP}:8080
    username: admin
    password: tot@ls3crit
  mapi:
    us-east-1:
      url: ${MAPI_ADMIN_IP}
      username: ${MAPI_HTTP_ADMIN_USER}
      password: ${MAPI_HTTP_ADMIN_PW}
      resources:
        nodejs:
          coupon: true
          repo: true
          ram: 128
          domain: *.no.de

staging:
  <<: *defaults

test:
  <<: *defaults

production:
  <<: *defaults
  url: https://api.no.de/v1
  datastore:
    adapter: sqlite3
    path: db/production.db
CONFIGYML
fi

if [[ $(ls /opt/smartdc/pubapi/gems/gems 2>/dev/null | wc -l) -eq 0 ]]; then
  echo "Unpacking frozen gems for Public API."
  (cd /opt/smartdc/pubapi; PATH=/opt/local/bin:$PATH /opt/local/bin/rake gems:deploy -f /opt/smartdc/pubapi/Rakefile)
fi

if [[ ! -e /opt/smartdc/pubapi/config/unicorn.smf ]]; then
  echo "Creating Public API Unicorn Manifest."
  /opt/local/bin/ruby18 -rerb -e "user='jill';group='jill';app_environment='production';application='pubapi'; working_directory='/opt/smartdc/pubapi'; puts ERB.new(File.read('/opt/smartdc/pubapi/smartdc/unicorn.smf.erb')).result" > /opt/smartdc/pubapi/config/unicorn.smf
  chown jill:jill /opt/smartdc/pubapi/config/unicorn.smf
fi

if [[ ! -e /opt/smartdc/pubapi/config/unicorn.conf ]]; then
  echo "Creating Public API Unicorn Configuration file."
  /opt/local/bin/ruby18 -rerb -e "app_port='8080'; worker_processes=1; working_directory='/opt/smartdc/pubapi'; application='pubapi'; puts ERB.new(File.read('/opt/smartdc/pubapi/smartdc/unicorn.conf.erb')).result" > /opt/smartdc/pubapi/config/unicorn.conf
  chown jill:jill /opt/smartdc/pubapi/config/unicorn.conf
fi

if [[ ! -e /opt/smartdc/pubapi/tmp/pids ]]; then
  su - jill -c "mkdir -p /opt/smartdc/pubapi/tmp/pids"
fi

echo "Importing Public API Unicorn Manifest"
/usr/sbin/svccfg import /opt/smartdc/pubapi/config/unicorn.smf
sleep 1

# Ensure everything in /opt/smartdc is owned by jill
chown -R jill:jill /opt/smartdc

# fix perms on /home
chown root:root /home
chmod 0555 /home

if [[ ! -e /opt/smartdc/pubapi/db/production.db ]]; then
  echo "Creating Public API database."
  su - jill -c "(cd /opt/smartdc/pubapi; PATH=/opt/local/bin:$PATH RACK_ENV=production /opt/local/bin/rake db:migrate)"
fi


# Setup and configure nginx
if [[ -z $(/usr/bin/svcs -a|grep nginx) ]]; then
  echo "Importing nginx service"
  cat >/opt/local/etc/nginx/nginx.conf <<NGINX
user www www;
worker_processes 1;
error_log /var/log/nginx/error.log;
#pid /var/spool/nginx/nginx.pid;

events {
    worker_connections 1024;
    use /dev/poll; # important on Solaris
}

http {
    include /opt/local/etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '\$remote_addr - \$remote_user [\$time_local] \$request '
                    '"\$status" \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile off; # important on Solaris
    keepalive_timeout 60;
    server_tokens off;

    upstream pubapi {
        server ${PRIVATE_IP}:8080;
    }

    server {
        listen 443;

        # Self-signed is okay. Production Zeus will handle the real no.de certs.
        ssl on;
        ssl_certificate /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_certificate_key /opt/local/etc/openssl/private/selfsigned.pem;
        ssl_prefer_server_ciphers on;

        location / {
            root /opt/smartdc/pubapi/public;
            proxy_set_header X-Real-IP  \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header Host \$http_host;
            proxy_redirect off;

            ## Serve static files
            #if (-f \$request_filename) {
            #    break;
            #}

            proxy_pass http://pubapi;
            break;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root share/examples/nginx/html;
        }
    }
}

NGINX

  /usr/sbin/svccfg import /opt/local/share/smf/manifest/nginx.xml
  /usr/sbin/svcadm enable -s nginx
fi
