#!/usr/bin/bash

export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace

eval $(cat /opt/smartdc/etc/zoneconfig)

PATH=/opt/smartdc/manatee/build/node/bin:/opt/local/bin:/usr/sbin/:/usr/bin:$PATH
PROFILE=/root/.bashrc
REGISTRAR_CFG=/opt/smartdc/registrar/etc/config.json
alias mbunyan="bunyan -c \"this.component !== 'ZKPlus'\" -c 'level >= 30' -c 'this.src=undefined; true' --strict"
alias manatee_stat="/opt/smartdc/manatee/bin/manatee_stat.js -p `mdata-get nameservers`"

# This includes the fatal and sdc_[zk|manatee|moray|ufds]_check functions
source /var/svc/configure.common

function update_env {
    echo "" >>$PROFILE
    echo "export PATH=\$PATH:/opt/smartdc/registrar/build/node/bin:/opt/smartdc/registrar/node_modules/.bin:/opt/smartdc/manatee/lib/tools" >>$PROFILE
}

ZONE_UUID=`zoneadm list -p | cut -d ':' -f2`
DATASET=zones/$ZONE_UUID/data/manatee
PARENT_DATASET=zones/$ZONE_UUID/data
DATASET_MOUNT_DIR=/manatee/pg
PG_DIR=/manatee/pg/data
ZONE_IP=`ifconfig net0 | nawk '{if ($1 == "inet") print $2}'`
SITTER_CFG_FILE=/opt/smartdc/manatee/etc/sitter.json
SNAPSHOT_CFG_FILE=/opt/smartdc/manatee/etc/snapshotter.json
BACKUP_CFG_FILE=/opt/smartdc/manatee/etc/backupserver.json
SHARD="sdc"

# check that the dataset has been mounted
echo "checking to see if dataset is mounted"
mounted=`zfs get mounted $DATASET | tail -1 | cut -d ' ' -f6`
if [ $mounted == no ]
then
        fatal "dataset $DATASET not mounted"
fi

# create manatee dataset
echo "creating manatee dataset"
zfs create $DATASET

# create postgres user
echo "creating postgres user"
useradd postgres

# grant postgres user root privileges with pfexec
echo "grant postgres user root privileges"
usermod -P'Primary Administrator' postgres

# give postgres user zfs permmissions.
echo "grant postgres user zfs perms"
zfs allow -ld postgres create,destroy,diff,hold,release,rename,setuid,rollback,share,snapshot,mount,promote,send,receive,clone,mountpoint,canmount $PARENT_DATASET

# change dataset perms such that manatee can access the dataset and mount/unmount
mkdir -p /manatee/pg
chmod 777 -R /zones/$ZONE_UUID/
chmod 777 -R /manatee/pg
# set mountpoint
zfs set mountpoint=$DATASET_MOUNT_DIR $DATASET
[[ $? -eq 0 ]] || fatal "Unable to set mountpoint to /manatee/pg"

# add pg log dir
mkdir -p /var/pg
chmod 777 /var/pg

# make the pg data dir
echo "creating $PG_DIR"
mkdir -p $PG_DIR
chown postgres $PG_DIR
chmod 700 $PG_DIR

# make .zfs dir visible for snapshots
echo "make snapshot dir visible"
zfs set snapdir=visible $DATASET

# ZK configs
ZK_TIMEOUT=30000
SHARD_PATH=/manatee/$SHARD

# backup and snapshot configs
PG_CONF=/opt/smartdc/manatee/etc/postgresql.sdc.conf
BACKUP_SERVER_PORT=12345
BACKUP_URL=http://$ZONE_IP:$BACKUP_SERVER_PORT
SNAPSHOT_INTERVAL=3600000
SNAPSHOT_NUMBER=5

ZFS_RECV_PATH=/usr/vm/sbin/zfs_recv
ZFS_RECV_PORT=1234
ZFS_SEND_PATH=/usr/vm/sbin/zfs_send
PG_URL=tcp://postgres@$ZONE_IP:5432/postgres
SNAPSHOT_DIR=$DATASET_MOUNT_DIR/.zfs/snapshot/

# update sitter cfg file
echo "Updating /opt/smartdc/manatee/etc/sitter.json"
cp /opt/smartdc/manatee/etc/sitter.json.in $SITTER_CFG_FILE

gsed -i -e "s|SHARD_PATH|$SHARD_PATH|g" $SITTER_CFG_FILE
gsed -i -e "s|BACKUP_URL|$BACKUP_URL|g" $SITTER_CFG_FILE
gsed -i -e "s|PG_URL|$PG_URL|g" $SITTER_CFG_FILE
gsed -i -e "s|PG_DIR|$PG_DIR|g" $SITTER_CFG_FILE
gsed -i -e "s|PG_CONF|$PG_CONF|g" $SITTER_CFG_FILE
gsed -i -e "s|PARENT_DATASET|$PARENT_DATASET|g" $SITTER_CFG_FILE
gsed -i -e "s|DATASET|$DATASET|g" $SITTER_CFG_FILE
gsed -i -e "s|SNAPSHOT_DIR|$SNAPSHOT_DIR|g" $SITTER_CFG_FILE
gsed -i -e "s|ZK_TIMEOUT|$ZK_TIMEOUT|g" $SITTER_CFG_FILE
gsed -i -e "s|ZFS_RECV_IP|$ZONE_IP|g" $SITTER_CFG_FILE
gsed -i -e "s|ZONE_IP|$ZONE_IP|g" $SITTER_CFG_FILE
gsed -i -e "s|ZONE_ID|$ZONE_UUID|g" $SITTER_CFG_FILE
gsed -i -e "s|ZFS_RECV_PATH|$ZFS_RECV_PATH|g" $SITTER_CFG_FILE
gsed -i -e "s|ZFS_RECV_PORT|$ZFS_RECV_PORT|g" $SITTER_CFG_FILE
# enable one node write mode for coal, since there is only one manatee
gsed -i -e "s|ONE_NODE_WRITE_MODE|true|g" $SITTER_CFG_FILE

# update zk config - stole from registrar
echo "setting zk ips for sitter.cfg"
echo $ZOOKEEPER_ADMIN_IPS
for ip in $ZOOKEEPER_ADMIN_IPS
do
cat $SITTER_CFG_FILE| \
    json -e "zkCfg.servers.push({ host: \"$ip\", port: 2181 });" \
    > /tmp/.sitter.json
mv /tmp/.sitter.json $SITTER_CFG_FILE
done

# update snapshot cfg file
echo "Updating /opt/smartdc/manatee/etc/snapshotter.json"
cp /opt/smartdc/manatee/etc/snapshotter.json.in $SNAPSHOT_CFG_FILE
gsed -i -e "s|DATASET|$DATASET|g" $SNAPSHOT_CFG_FILE
gsed -i -e "s|SNAPSHOT_DIR|$SNAPSHOT_DIR|g" $SNAPSHOT_CFG_FILE
gsed -i -e "s|SNAPSHOT_INTERVAL|$SNAPSHOT_INTERVAL|g" $SNAPSHOT_CFG_FILE
gsed -i -e "s|SNAPSHOT_NUMBER|$SNAPSHOT_NUMBER|g" $SNAPSHOT_CFG_FILE
gsed -i -e "s|PG_URL|$PG_URL|g" $SNAPSHOT_CFG_FILE

# update backupServer cfg file
echo "Updating /opt/smartdc/manatee/etc/backupserver.json"
cp /opt/smartdc/manatee/etc/backupserver.json.in $BACKUP_CFG_FILE
gsed -i -e "s|DATASET|$DATASET|g" $BACKUP_CFG_FILE
gsed -i -e "s|SNAPSHOT_DIR|$SNAPSHOT_DIR|g" $BACKUP_CFG_FILE
gsed -i -e "s|BACKUP_SERVER_PORT|$BACKUP_SERVER_PORT|g" $BACKUP_CFG_FILE
gsed -i -e "s|ZFS_SEND_PATH|$ZFS_SEND_PATH|g" $BACKUP_CFG_FILE

echo "Updating ~/.bashrc"
update_env

# Enable Cron
echo "Starting Cron"
svccfg import /lib/svc/manifest/system/cron.xml
svcadm enable cron

# Add Log rotation
echo "Adding log rotation"
tempLogConf=/tmp/`uuid`
echo "manatee-sitter -C 48 -c -p 1h /var/svc/log/sds-application-manatee-sitter:default.log" > $tempLogConf
echo "manatee-postgres -C 48 /var/pg/postgresql*.log" >> $tempLogConf
echo "manatee-snapshotter -C 48 -c -p 1h /var/svc/log/sds-application-manatee-snapshotter:default.log" >> $tempLogConf
echo "manatee-backupserver -C 48 -c -p 1h /var/svc/log/sds-application-manatee-backupserver:default.log" >> $tempLogConf
cat /etc/logadm.conf >> $tempLogConf
rm /etc/logadm.conf
mv $tempLogConf /etc/logadm.conf
#logadm -w manatee-sitter -C 48 -c -p 1h /var/svc/log/sds-application-manatee-sitter:default.log
#logadm -w manatee-postgres -C 48 /var/pg/postgresql*.log
#logadm -w manatee-snapshotter -C 48 -c -p 1h /var/svc/log/sds-application-manatee-snapshotter:default.log
#logadm -w manatee-backupserver -C 48 -c -p 1h /var/svc/log/sds-application-manatee-backupserver:default.log
echo '0 * * * * /usr/sbin/logadm' > /etc/cron.d/logadm
crontab /etc/cron.d/logadm

# prevent local postgres core dumps. MANTA-600
ulimit -c 0

# import services
echo "Starting snapshotter"
svccfg import /opt/smartdc/manatee/smf/manifests/snapshotter.xml
svcadm enable manatee-snapshotter

echo "Starting backupserver"
svccfg import /opt/smartdc/manatee/smf/manifests/backupserver.xml
svcadm enable manatee-backupserver

echo "Starting sitter"
svccfg import /opt/smartdc/manatee/smf/manifests/sitter.xml
svcadm enable manatee-sitter

#functions
echo "mbunyan() { bunyan -c \"this.component !== 'ZKPlus'\"  -c 'level >= 30'; }" >> $PROFILE
echo "manatee-history(){ /opt/smartdc/manatee/bin/manatee-history '$SHARD' '$ZOOKEEPER_ADMIN_IPS'; }" >> $PROFILE
echo "manatee-stat() { /opt/smartdc/manatee/bin/manatee-stat -p '$ZOOKEEPER_ADMIN_IPS'; }" >> $PROFILE
echo "manatee-clear(){ /opt/smartdc/manatee/bin/manatee-clear '$SHARD' '$ZONE_IP' '$ZOOKEEPER_ADMIN_IPS'; }" >> $PROFILE
echo "manatee-snapshots(){ /opt/smartdc/manatee/bin/manatee-snapshots '$DATASET'; }" >> $PROFILE
echo "msitter(){ tail -f \`svcs -L manatee-sitter\` | mbunyan; }" >> $PROFILE
echo "mbackupserver(){ tail -f \`svcs -L manatee-backupserver\` | mbunyan; }" >> $PROFILE
echo "msnapshotter(){ tail -f \`svcs -L manatee-snapshotter\` | mbunyan; }" >> $PROFILE
