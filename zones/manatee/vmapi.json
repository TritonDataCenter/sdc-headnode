{
    "owner_uuid": "OWNER",
    "brand": "joyent-minimal",
    "dataset_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
    "image_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
    "alias": "ALIAS",
    "ram": "128",
    "max_physical_memory": "128",
    "delegate_dataset": true,
    "zfs_storage_pool_name": "zones",
    "networks":["NETWORK"],
    "max_swap": "256",
    "quota": "10",
    "cpu_cap": "100",
    "cpu_shares": "128",
    "max_lwps": "1000",
    "create_timestamp": "2012-07-13T22:40:48.290Z",
    "destroyed": null,
    "last_modified": "2012-07-13T22:40:49.000Z",
    "zone_state": "running",
    "state": "running",
    "zpool": "zones",
    "zfs_io_priority": "10",
    "customer_metadata": {
      "assets-ip": "10.99.99.8",
      "user-script": "#!/bin/bash\n#\n# Copyright (c) 2011, Joyent Inc. All rights reserved.\n#\n# This script exists to bootstrap the setup script which does most of the\n# work of setting up the zone. Nothing very time-expensive should go in here.\n# Put that in setup instead.\n#\n\nset -o xtrace\n\nPATH=/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin\n\nzone_uuid=$(zonename)\nzone_role=$(mdata-get sdc:tags.smartdc_role)\nif [[ -z ${zone_role} ]]; then\n    echo \"Unable to find zone role in metadata.\"\n    exit 1\nfi\nassets_ip=$(mdata-get assets-ip)\nif [[ -z ${assets_ip} ]]; then\n    echo \"Unable to find IP of assets server from metadata.\"\n    exit 1\nfi\n\nfatal() {\n    echo $* >&2\n    exit 1\n}\n\nif [[ ! -d /opt/smartdc/etc ]]; then\n    mkdir -p /opt/smartdc/etc || fatal \"unable to create /opt/smartdc/etc\"\nfi\nif [[ ! -d /opt/smartdc/bin ]]; then\n    mkdir -p /opt/smartdc/bin || fatal \"unable to create /opt/smartdc/bin\"\nfi\n\ntouch /opt/smartdc/etc/zoneconfig.new # in case 'zoneconfig' is empty\ncurl -k -o /opt/smartdc/etc/zoneconfig.new -s -S -f \\\n    http://${assets_ip}/extra/${zone_role}/zoneconfig\nif [[ $? != 0 ]]; then\n    echo \"Failed to get zoneconfig.\"\n    # For update, we carry on with old zoneconfig since we don't want to block\n    # of other smartdc_role zones when assets is down.  Setup should fail when\n    # zoneconfig doesn't exist.\nelse\n    cp /opt/smartdc/etc/zoneconfig.new /opt/smartdc/etc/zoneconfig && \\\n        rm -f /opt/smartdc/etc/zoneconfig.new\n    chmod 644 /opt/smartdc/etc/zoneconfig*\nfi\nif [[ ! -f /opt/smartdc/etc/zoneconfig ]]; then\n    fatal \"Missing zoneconfig\"\nfi\n\ncurl -k -o /opt/smartdc/bin/configure.new -s -S -f \\\n    http://${assets_ip}/extra/${zone_role}/configure\nif [[ $? != 0 ]]; then\n    echo \"Failed to get configure script.\"\n    # For update, we carry on with old configure since we don't want to block\n    # of other smartdc_role zones when assets is down.  Setup should fail when\n    # configure doesn't exist.\nelse\n    cp /opt/smartdc/bin/configure.new /opt/smartdc/bin/configure && \\\n        rm -f /opt/smartdc/bin/configure.new\n    chmod 755 /opt/smartdc/bin/configure*\nfi\n\n# Run the configure whenever we didn't do setup already\nif [[ -f /var/svc/setup_complete ]]; then\n    # We already did setup (which ran configure last time), so just reconfigure\n    /opt/smartdc/bin/configure || fatal \"failed to configure zone.\"\nfi\n\n# Only want to run this initial user-script once\nif [[ -f /var/svc/.ran-user-script ]]; then\n    echo \"Initial user-script has already been run.\"\n    exit 0\nfi\ntouch /var/svc/.ran-user-script\n\ncurl -k -o /var/svc/setup.common -s -S -f http://${assets_ip}/extra/${zone_role}/setup.common\nif [[ $? != 0 || ! -f /var/svc/setup.common ]]; then\n    echo \"Failed to get common include for setup script.\"\nfi\n\ncurl -k -o /var/svc/setup -s -S -f http://${assets_ip}/extra/${zone_role}/setup\nif [[ $? != 0 || ! -f /var/svc/setup ]]; then\n    echo \"Failed to get setup script.\"\nfi\n\nexport ASSETS_IP=\"${assets_ip}\"\nexport ZONE_ROLE=\"${zone_role}\"\n\n# We can't add any site-specific manifests automatically, since we're running\n# after the manifest import, so import any new manifests that were added.\n(bash /var/svc/setup\n    for manifest in $(ls -1 /lib/svc/manifest/site/*.xml); do\n        svccfg import ${manifest}\n    done\n) >/var/svc/setup.log 2>&1 &\n\nexit 0\n",
      "ufds_ldap_root_dn": "cn=root",
      "ufds_ldap_root_pw": "secret",
      "ufds_admin_ips": "10.99.99.14"
    },
    "internal_metadata": {
      "package_version": "1.0.0",
      "package_name": "sdc_128"
    },
    "tags": {
      "smartdc_role": "manatee",
      "smartdc_type": "core"
    }
  }
