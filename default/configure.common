#!/usr/bin/bash
#
# Copyright (c) 2012, Joyent Inc. All rights reserved.
#
# Common configure script used by SDC zones.
#
# It is expected that SDC zones' "configure" script sources this
# "configure.common" script.
#

set -o xtrace
# Can't use `set -e errexit` because we are selective warning on some
# failures below.

function fatal() {
    echo "error: $*" >&2
    exit 1
}


# Before we try to import the service, we'll check UFDS status:
# This function requires UFDS_ADMIN_IP, UFDS_LDAP_ROOT_DN & UFDS_LDAP_ROOT_PW
# as argument to check connectivity with the provided UFDS IP:
#   sdc_ensure_ufds ${UFDS_ADMIN_IP} ${UFDS_LDAP_ROOT_DN} ${UFDS_LDAP_ROOT_PW}
function sdc_ensure_ufds {
    [[ $# -ge 3 ]] || \
      (echo "sdc_ensure_ufds requires at least three arguments" >&2 & exit 1)
    local attempt=0
    local isok=0
    local ufds_admin_ip=$1
    local ufds_ldap_root_dn=$2
    local ufds_ldap_root_pw=$3

    while [[ $attempt -lt 60 ]]
    do
      LDAPTLS_REQCERT=allow ldapwhoami -H ldaps://${ufds_admin_ip} -x \
        -D ${ufds_ldap_root_dn} -w ${ufds_ldap_root_pw}

      if [[ $? -eq 0 ]]; then
        isok=1
        break
      fi

	    let attempt=attempt+1
	    sleep 1
    done
    [[ $isok -eq 1 ]] || fatal "UFDS is not running"
}


# Before we try to import the services manifest, check moray is up:
# This function expects MORAY_ADMIN_IPS as its first argument and
# the path to the moray's node module `sql` binary.
function sdc_ensure_moray {
    [[ $# -ge 2 ]] || \
      (echo "sdc_ensure_moray requires at least two arguments" >&2 & exit 1)

    local attempt=0
    local now
    local isok=0
    local moray_ips=$1
    local moray_sql=$2

    while [[ $attempt -lt 90 ]]
    do
      for ip in $moray_ips
	    do
        now=$($moray_sql -h $ip -p 2020 'select now();' | json now)
	      if [[ $? -eq 0 ]] && [ -n "$now" ]; then
	        isok=1
	        break
	      fi
      done

      if [[ $isok -eq 1 ]]; then
	      break
	    fi

	    let attempt=attempt+1
	    sleep 1
    done

    [[ $isok -eq 1 ]] || fatal "moray is not up"
}


# Check zookeeper is OK before try to import manatee services:
# This function expects the list of ZK IPs as its single argument.
function sdc_ensure_zk {
    [[ $# -ge 1 ]] || \
      (echo "sdc_ensure_zk requires at least one argument" >&2 & exit 1)

    local attempt=0
    local isok=0
    local zkok
    local zk_ips=$1

    while [[ $attempt -lt 60 ]]
    do
      for ip in $zk_ips
      do
        zkok=$(echo "ruok" | nc -w 1 $ip 2181)
        if [[ $? -eq 0 ]] && [[ "$zkok" == "imok" ]]; then
          isok=1
          break
	      fi
	    done

	    if [[ $isok -eq 1 ]]; then
	      break
	    fi

	    let attempt=attempt+1
	    sleep 1
    done
    [[ $isok -eq 1 ]] || fatal "ZooKeeper is not running"
}
