#!/usr/bin/bash
#
# Copyright (c) 2011, Joyent Inc. All rights reserved.
#

fatal()
{
    echo $*
    exit 1
}

[[ -z ${ZONE_ROLE} ]] && fatal "FATAL: setup.common running but ZONE_ROLE not set"
[[ -z ${ASSETS_IP} ]] && fatal "FATAL: setup.common running but ASSETS_IP not set"

if [[ $(. /opt/smartdc/etc/zoneconfig ; echo ${NO_FS_TARBALL}) == "true" ]]; then
    NO_FS_TARBALL=1
fi

pkgsrc_lst=$(curl -s -S -f http://${ASSETS_IP}/extra/${ZONE_ROLE}/pkgsrc \
    | grep 'href="pkgsrc' | cut -d '"' -f2)

curl -o /var/svc/pkgsrc -s -S -f \
    http://${ASSETS_IP}/extra/${ZONE_ROLE}/pkgsrc
[[ $? != 0 ]] && fatal "FATAL: unable to get pkgsrc list from assets server"
pkgsrc_version=$(cat /opt/local/etc/pkgin/repositories.conf | cut -d '/' -f5 | tr [:lower:] [:upper:])
[[ $? != 0 ]] && fatal "FATAL: unable to get pkgsrc version"
if [[ -n $(cat /opt/local/etc/pkgin/repositories.conf | cut -d '/' -f6 | grep "x86_64") ]]; then
    pkgsrc_version=${pkgsrc_version}_64
fi
pkgsrc_url=http://${ASSETS_IP}/extra/pkgsrc/${pkgsrc_version}

if [[ -z ${NO_FS_TARBALL} ]]; then
    curl -o /var/svc/fs.tar.bz2 -s -S -f \
        http://${ASSETS_IP}/extra/${ZONE_ROLE}/fs.tar.bz2
    [[ $? != 0 ]] && fatal "FATAL: unable to get root tarball from assets server"
fi

mkdir -p /opt/smartdc/bin
for file in backup restore; do
curl -o /opt/smartdc/bin/${file} -s -S -f \
    http://${ASSETS_IP}/extra/${ZONE_ROLE}/${file}
done
chmod 755 /opt/smartdc/bin/*

mkdir -p /opt/smartdc/etc
curl -o /root/.bashrc -s -S -f \
    http://${ASSETS_IP}/extra/${ZONE_ROLE}/bashrc

# The /.dcinfo file contains info about the datacenter in which this zone runs.
dc_name=$(mdata-get sdc:datacenter_name)
if [[ $? == 0 && -z ${dc_name} ]]; then
    dc_name="UNKNOWN"
fi
dc_headnode_id=$(mdata-get sdc:headnode_id)
if [[ $? == 0 && -z ${dc_heanode_id} ]]; then
    dc_heanode_id=0
fi
[[ -n ${dc_name} ]] && echo "SDC_DATACENTER_NAME=\"${dc_name}\"" > /.dcinfo
[[ -n ${dc_headnode_id} ]] \
    && echo "SDC_DATACENTER_HEADNODE_ID=\"${dc_headnode_id}\"" >> /.dcinfo

if [[ -z ${NO_FS_TARBALL} ]]; then
   # Unpack fs.tar and copy files into proper locations within the zone
   mkdir /.stage
   echo "unpack fs.tar"
   (cd /.stage && bzcat /var/svc/fs.tar.bz2 | tar xbf 512 -)
   rm -f /var/svc/fs.tar.bz2
   if [[ -d /.stage/root ]]; then
       echo "install root"
       (cd /.stage/root; tar cbf 512 - *) | (cd /; tar xbf 512 -)
   fi
   if [[ -d /.stage/site ]]; then
       echo "install site"
       (cd /.stage/site && tar cbf 512 - *) | \
           (cd /lib/svc/manifest/site && tar xbf 512 -)
   fi
   rm -rf /.stage
fi

# Install using local pkg repo, we need to force lower case because the pkgsrc
# packages get copied through pcfs which destroys their case.
for i in $(cat /var/svc/pkgsrc)
do
    lower_case=$(echo ${i} | tr [:upper:] [:lower:])
    echo "Installing $i"
    pkg_info $i >/dev/null 2>&1 \
        || (yes | pkg_add -f ${pkgsrc_url}/${lower_case})
done

# We can't add any site-specific manifests automatically, since we're running
# after the manifest import, so import now. (we do this again after setup)
for manifest in $(ls -1 /lib/svc/manifest/site/*.xml); do
    svccfg import ${manifest}
done

### Now the rest of setup runs
