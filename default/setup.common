#!/usr/bin/bash
#
# Copyright (c) 2012, Joyent Inc. All rights reserved.
#
# Common setup script used by SDC zones.
#
# On boot of a zone, its user-script is run by the "mdata:execute" service.
# See "user-script.common" used by SDC zones. This does some preparation
# and then for *first* boot calls the zone-specific "setup" script in the
# background. It is expected that SDC zones' "setup" script sources this
# "setup.common" script.
#

set -o xtrace
# Can't use `set -e errexit` because we are selective warning on some
# failures below.



function fatal() {
    echo "error: $*" >&2
    exit 1
}



[[ -z ${ZONE_ROLE} ]] && fatal "FATAL: setup.common running but ZONE_ROLE not set"
if [[ "${ZONE_ROLE}" != "assets" ]]; then
    [[ -z ${ASSETS_IP} ]] && fatal "FATAL: setup.common running but ASSETS_IP not set"
fi



# Unpack the fs tarball.
if [[ $(. /opt/smartdc/etc/zoneconfig ; echo ${NO_FS_TARBALL}) == "true" ]]; then
    NO_FS_TARBALL=1
fi
if [[ -z ${NO_FS_TARBALL} ]]; then
    if [[ "${ZONE_ROLE}" == "assets" ]]; then
        cp /assets/extra/${ZONE_ROLE}/fs.tar.bz2 /var/svc/fs.tar.bz2 \
            || fatal "FATAL: unable to get fs tarball from /assets"
    else
        curl -o /var/svc/fs.tar.bz2 -s -S -f \
            http://${ASSETS_IP}/extra/${ZONE_ROLE}/fs.tar.bz2 \
            || fatal "FATAL: unable to get fs tarball from assets server"
    fi
fi
if [[ -z ${NO_FS_TARBALL} ]]; then
   # Unpack fs.tar and copy files into proper locations within the zone
   mkdir /.stage
   echo "unpack fs.tar"
   (cd /.stage && bzcat /var/svc/fs.tar.bz2 | tar xbf 512 -)
   rm -f /var/svc/fs.tar.bz2
   if [[ -d /.stage/root ]]; then
       echo "install root"
       (cd /.stage/root; tar cbf 512 - *) | (cd /; tar xbf 512 -)
   fi
   if [[ -d /.stage/site && -n $(ls /.stage/site) ]]; then
       echo "install site"
       (cd /.stage/site && tar cbf 512 - *) | \
           (cd /lib/svc/manifest/site && tar xbf 512 -)
   fi
   rm -rf /.stage
fi


# Install pkgsrc packages for this zone.
# Note: We need to force lower case because the pkgsrc packages get copied
# through pcfs which destroys their case.
pkgsrc_version=$(tail -1 /opt/local/etc/pkgin/repositories.conf \
     | sed -e "s/^.*\/201/201/" | cut -d '/' -f1 | tr [:lower:] [:upper:])
if [[ -z "$pkgsrc_version" ]]; then
    fatal "FATAL: unable to get pkgsrc version"
fi
if tail -1 /opt/local/etc/pkgin/repositories.conf | grep "/x86_64/" >/dev/null; then
    pkgsrc_version=${pkgsrc_version}_64
fi

if [[ "${ZONE_ROLE}" == "assets" ]]; then
    cp /assets/extra/${ZONE_ROLE}/pkgsrc /var/svc/pkgsrc \
        || fatal "FATAL: unable to get pkgsrc list from /assets"
    pkgsrc_url=/assets/extra/pkgsrc/${pkgsrc_version}
else
    touch /var/svc/pkgsrc   # If 'pkgsrc' file is empty, curl won't create it.
    curl -o /var/svc/pkgsrc -s -S -f http://${ASSETS_IP}/extra/${ZONE_ROLE}/pkgsrc \
        || fatal "FATAL: unable to get pkgsrc list from assets server"
    pkgsrc_url=http://${ASSETS_IP}/extra/pkgsrc/${pkgsrc_version}
fi

for name in $(cat /var/svc/pkgsrc); do
    name_lower=$(echo ${name} | tr [:upper:] [:lower:])
    echo "Installing pkgsrc package '$name'."
    pkg_info $name >/dev/null 2>&1 \
        || (yes | pkg_add -f ${pkgsrc_url}/${name_lower})
done


# Install and start the amon-agent.
if [[ "${ZONE_ROLE}" == "assets" ]]; then
    cp /assets/extra/amon-agent/amon-agent.tgz /var/svc/amon-agent.tgz \
        || fatal "FATAL: unable to get amon-agent.tgz from /assets"
else
    curl -o /var/svc/amon-agent.tgz -s -S -f \
        http://${ASSETS_IP}/extra/amon-agent/amon-agent.tgz \
        || fatal "FATAL: unable to get amon-agent.tgz from assets server"
fi
mkdir -p /opt/
(cd /opt/ && gtar xzf /var/svc/amon-agent.tgz)
(cd /opt/amon-agent && ./pkg/postinstall.sh)
rm -f /var/svc/amon-agent.tgz


# We can't add any site-specific manifests automatically, since we're running
# after the manifest import, so import now.
for manifest in $(ls -1 /lib/svc/manifest/site/*.xml); do
    svccfg import ${manifest}
done


### Now the rest of setup runs
