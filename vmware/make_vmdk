#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2016 Joyent, Inc.
#

g_image_file=
g_vmdk_file=
g_image_bytes=
g_image_blocks=
g_image_cylinders=

function fatal
{
	local msg="$0: ERROR: $1\\n"
	shift

	printf "$msg" "$@" 2>&1

	exit 1
}

while getopts 'i:o:' a; do
	case $a in
	i)
		if [[ ! -f $OPTARG ]]; then
			fatal 'could not find image file: %s' "$OPTARG"
		fi
		g_image_file=$OPTARG
		;;
	o)
		if [[ -f $OPTARG ]]; then
			fatal 'target VMDK already exists: %s' "$OPTARG"
		fi
		g_vmdk_file=$OPTARG
		;;
	*)
		fatal 'usage error'
		;;
	esac
done

if [[ -z $g_image_file || -z $g_vmdk_file ]]; then
	fatal 'must specify an image file (-i) and a target VMDK file (-o)'
fi

#
# Determine the size of the raw image file:
#
if ! g_image_bytes=$(wc -c $g_image_file | awk '{ print $1 }'); then
	fatal 'could not determine size of image file: %s' "$g_image_file"
fi
if [[ -z g_image_bytes || $g_image_bytes -lt 1000000000 ||
    $g_image_bytes -gt 32000000000 ]]; then
	fatal 'invalid image size: %s' "$g_image_bytes"
fi

#
# Using the raw image size, determine the size (in 512 byte blocks) to use
# in the VMDK extent record, and the number of cylinders to use in the
# IDE configuration.
#
(( g_image_blocks = g_image_bytes / 512 ))
(( g_image_cylinders = g_image_blocks / (16 * 63) ))

#
# Generate the VMDK descriptor:
#
cat > $g_vmdk_file <<EOF
#
# This VMDK file was generated by "make_vmdk" in the "sdc-headnode.git"
# repository.
#

# Disk Descriptor File
version=1
CID=fffffffe
parentCID=ffffffff
isNativeSnapshot="no"
createType="monolithicFlat"

# Extent description
RW $g_image_blocks FLAT "$(basename $g_image_file)" 0

# Disk Database
ddb.geometry.cylinders = "$g_image_cylinders"
ddb.geometry.heads = "16"
ddb.geometry.sectors = "63"
ddb.adapterType = "ide"
EOF
if [[ $? -ne 0 ]]; then
	/bin/rm -f "$g_vmdk_file"
	fatal 'could not write VMDK file: %s' "$g_vmdk_file"
fi

exit 0
