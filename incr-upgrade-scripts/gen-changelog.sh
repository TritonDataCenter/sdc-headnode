#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# Generate a changelog from a given DC version summary to a 'upgrade-images'
# file. The former can be generated by `sdc-versions.sh -j`
# (https://mo.joyent.com/trentops/blob/master/bin/sdc-versions.sh) and the
# latter by `gen-upgrade-images.sh` in this repo.
#
# Usage:
#       ./gen-changelog.sh <sdc-versions-dump> <upgrade-images>
#


if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


#---- globals

TOP=$(cd $(dirname $0)/; pwd)

# A start at this in the MG repo:
#   json -f targets.json -e 'var s=this; Object.keys(s).forEach(function (k) { if (s[k].repos) s[k] = s[k].repos[0].url });'
repo_url_from_service=$(cat <<EOM
{
  "smartlogin": "git@github.com:joyent/sdc-smart-login.git",
  "incr-upgrade": "git@github.com:joyent/sdc-headnode.git",
  "ca": "git@github.com:joyent/sdc-cloud-analytics.git",
  "amon": "git@github.com:joyent/sdc-amon.git",
  "assets": "git@github.com:joyent/sdc-assets.git",
  "adminui": "git@github.com:joyent/sdc-adminui.git",
  "dhcpd": "git@github.com:joyent/sdc-booter.git",
  "redis": "git@github.com:joyent/sdc-redis.git",
  "amonredis": "git@github.com:joyent/sdc-amonredis.git",
  "rabbitmq": "git@github.com:joyent/sdc-rabbitmq.git",
  "cloudapi": "git@github.com:joyent/sdc-cloudapi.git",
  "ufds": "git@github.com:joyent/sdc-ufds.git",
  "workflow": "git@github.com:joyent/sdc-workflow.git",
  "vmapi": "git@github.com:joyent/sdc-vmapi.git",
  "papi": "git@github.com:joyent/sdc-papi.git",
  "imgapi": "git@github.com:joyent/sdc-imgapi.git",
  "sdc": "git@github.com:joyent/sdc-sdc.git",
  "imgapi-cli": "git@github.com:joyent/sdc-imgapi-cli.git",
  "heartbeater": "git@github.com:joyent/sdc-heartbeater-agent.git",
  "provisioner": "git@github.com:joyent/sdc-provisioner-agent.git",
  "hagfish-watcher": "git@github.com:joyent/sdc-hagfish-watcher.git",
  "firewaller": "git@github.com:joyent/sdc-firewaller-agent.git",
  "cnapi": "git@github.com:joyent/sdc-cnapi.git",
  "fwapi": "git@github.com:joyent/sdc-fwapi.git",
  "napi": "git@github.com:joyent/sdc-napi.git",
  "sapi": "git@github.com:joyent/sdc-sapi.git",
  "binder": "git@github.com:joyent/binder.git",
  "manatee": "git@github.com:joyent/sdc-manatee.git",
  "moray": "git@github.com:joyent/moray.git",
  "manta": "git@github.com:joyent/sdc-manta.git"
}
EOM)


#---- support routines

function fatal
{
    echo "$0: fatal error: $*" >&2
    exit 1
}



#---- mainline

src=$1
dst=$2
[[ -f "$src" ]] || fatal "<sdc-versions-dump> is not an existing file: $src"
[[ -f "$dst" ]] || fatal "<upgrade-images> is not an existing file: $dst"

echo "# SDC upgrade changelog"
echo ""
echo '```'
cat $dst
echo '```'
echo ""
echo ""

echo "# incr-upgrade"
echo ""
echo "TODO"
echo ""
echo ""

echo "# agents"
echo ""
echo "TODO"
echo ""
echo ""


cat $dst | grep 'export ' | while read line; do
    service=$(echo "$line" | sed -E 's/^.* ([A-Z0-9]+)_IMAGE=.*$/\1/' \
        | tr 'A-Z' 'a-z')
    to_sha=$(echo "$line" | sed -E 's/^.* version=.*-g([0-9a-f]{7}) .*$/\1/')
    if [[ ${#to_sha} != 7 ]]; then
        # We couldn't parse "version=..." out of the line. Let's hit
        # updates.jo for that info.
        to_uuid=$(echo "$line" | cut -d'=' -f2 | cut -d' ' -f1)
        to_version=$(updates-imgadm get $to_uuid | json version)
        to_sha=$(echo $to_version | sed -E 's/^.*-g([0-9a-f]{7})$/\1/')
    fi
    [[ ${#to_sha} == 7 ]] || fatal "could not determine git sha for image: '$line'"
    from_sha=$(json -f $src -ga -c "this.service === '$service'" git)
    repo_url=$(echo "$repo_url_from_service" | json $service)
    echo "# $service ($repo_url $from_sha..$to_sha)"
    echo ""
    repo_dir=$TOP/tmp/$service
    if [[ -d $repo_dir ]]; then
        echo "Git pull $repo_url" >&2
        (cd $repo_dir && git pull >/dev/null)
    else
        echo "Git clone $repo_url" >&2
        mkdir -p $(dirname $repo_dir)
        rm -rf $repo_dir.tmp
        git clone $repo_url $repo_dir.tmp >/dev/null
        mv $repo_dir.tmp $repo_dir
    fi
    echo '```'
    # Compact git log, drop the timezone info for brevity.
    (cd $repo_dir && \
        git log --pretty=format:'[%ci] %h -%d %s <%an>' $from_sha..$to_sha \
        | sed -E 's/ [-+][0-9]{4}\]/]/')
    echo ""
    echo '```'
    # TODO: get full log, extract list of tickets and show ticket info
    echo ""
    echo ""
done

