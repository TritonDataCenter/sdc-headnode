#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# We set errexit (a.k.a. "set -e") to force an exit on error conditions, but
# there are many important error conditions that this does not capture --
# first among them failures within a pipeline (only the exit status of the
# final stage is propagated).  To exit on these failures, we also set
# "pipefail" (a very useful option introduced to bash as of version 3 that
# propagates any non-zero exit values in a pipeline).
#

set -o errexit
set -o pipefail

if [[ $1 == "-c" ]]; then
    shift
    # BASHSTYLED
    echo "NOTICE: building without config is the only option now, -c is unnecessary."
fi

REUSE_USB_BUILD=0
if [[ $1 == "-r" ]]; then
    shift
    REUSE_USB_BUILD=1
    echo "Re-using USB build rather than creating new copy. "
fi

function rel2abs () {
  local abs_path end
  abs_path=$(unset CDPATH; cd `dirname $1` 2>/dev/null && pwd -P)
  [[ -z "$abs_path" ]] && return 1
  end=$(basename $1)
  echo "${abs_path%*/}/$end"
}

if [[ -z "$1" ]]; then
    echo "ERROR: no usb tarball supplied"
    echo ""
    echo "Usage:"
    echo "    $0 [-r] <usb_tarball>"
    echo "    -r     Consume the usb build rather than copy it"
    echo ""
    exit 1
fi

TAR_BUILD_FILENAME=$(rel2abs $1)
shift

TAR_BUILD_IS_DIRECTORY=0
if [[ -d $TAR_BUILD_FILENAME ]]; then
    TAR_BUILD_IS_DIRECTORY=1
fi

ROOT=$(cd $(dirname $0)/../; pwd)

# Write output to log file.
THIS_TIMESTAMP=${TIMESTAMP}
if [[ -z "$THIS_TIMESTAMP" ]]; then
    THIS_TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
LOGDIR="${ROOT}/log"
LOGFILE="${LOGDIR}/build.log.coal.${THIS_TIMESTAMP}"
mkdir -p log
exec > >(tee ${LOGFILE}) 2>&1

if [[ $(echo $BASH_VERSION | cut -d '.' -f1-2) > 4.0 ]]; then
    BASH_IS_NOT_ANCIENT='true'
fi
#export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
#set -x
if [[ `hostname` == "bh1-autobuild" || `hostname` == "bldzone2.joyent.us" \
      || ! -z $BASH_IS_NOT_ANCIENT ]]; then
    # BASHSTYLED
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    export BASH_XTRACEFD=4
    set -o xtrace
fi

MERGED_SPEC=
if [[ -f "${ROOT}/build.spec" && -f "${ROOT}/build.spec.local" ]]; then
    MERGED_SPEC=$(${ROOT}/bin/json-merge \
                  ${ROOT}/build.spec ${ROOT}/build.spec.local);
elif [[ -f "${ROOT}/build.spec" ]]; then
    MERGED_SPEC=$(cat ${ROOT}/build.spec);
elif [[ -f "${ROOT}/build.spec.local" ]]; then
    MERGED_SPEC=$(cat ${ROOT}/build.spec.local);
fi

function build_spec () {
    local thing=$1;
    echo $(echo $MERGED_SPEC | ${ROOT}/bin/json ${thing});
};

BUILD_TGZ=$(build_spec build-tgz)

# Tools.
TAR=tar

MNT_DIR=/mnt/tmp
USB_SIZE="4gb"
USB_SKIP=7812500
USB_PADDING=508
OUTPUT_IMG="${USB_SIZE}.img"
TEMPLATE_IMG="${OUTPUT_IMG}.tgz"
COAL_VMDK="${USB_SIZE}.coal.vmdk"
if [[ -z $IMG_TMP_DIR ]]; then
  IMG_TMP_DIR=/tmp
fi
PLATFORM=$(uname -s)

if [[ "$PLATFORM" != "Darwin" ]]; then
    SUCMD='pfexec'
fi

STAGE=${ROOT}/cache/stage_coal
mkdir -p $STAGE
rm -rf $STAGE/*

echo ">> Starting build at $(date)"

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function errexit
{
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

trap 'errexit $? $LINENO' EXIT


function unpack_image
{
    echo -n "==> Unpacking USB image... "
    mkdir -p $IMG_TMP_DIR/coal.$$
    if [[ $TAR_BUILD_IS_DIRECTORY == 1 ]]; then
        if [[ $REUSE_USB_BUILD == 1 ]]; then
            rm -rf $IMG_TMP_DIR/coal.$$
            mv $TAR_BUILD_FILENAME $IMG_TMP_DIR/coal.$$
        else
            (cd $TAR_BUILD_FILENAME \
                && tar -c . | tar -C $IMG_TMP_DIR/coal.$$ -xovf - )
        fi

        (cd $IMG_TMP_DIR/coal.$$ \
            && mv usb-*${OUTPUT_IMG} $$.${OUTPUT_IMG}) \
            || fatal "Unable to unpack USB image"
    else
        (cd $IMG_TMP_DIR/coal.$$ && ${TAR} -xzf $TAR_BUILD_FILENAME \
            && mv usb-*${OUTPUT_IMG} $$.${OUTPUT_IMG}) \
            || fatal "Unable to unpack USB image"
    fi
    echo "done."
}

# In the case of VMWare we want to expand the image out so that the cylinders
# matches what's in the vmdk.
function expand_image
{
    echo -n "==> Expanding USB image for VMWare... "

    if [[ -f $IMG_TMP_DIR/coal.$$/$$.${OUTPUT_IMG} && \
          -n ${USB_SKIP} && -n ${USB_PADDING} ]]; then
        echo ""
        local file=$IMG_TMP_DIR/coal.$$/$$.${OUTPUT_IMG}
        dd if=/dev/zero of=${file} conv=notrunc seek=${USB_SKIP} \
           bs=512 count=${USB_PADDING}
    else
        echo "skipped."
    fi
}

function mount_image
{
    echo -n "==> Mounting new USB image... "
    if [[ "$PLATFORM" == "Darwin" ]]; then
        [ ! -d ${ROOT}/cache/tmp_volumes ] && mkdir -p ${ROOT}/cache/tmp_volumes
        hdiutil attach $IMG_TMP_DIR/coal.$$/$$.${OUTPUT_IMG} \
            >/tmp/output.hdiattach.$$ \
            -mountrandom ${ROOT}/cache/tmp_volumes 2>&1
        LOOPBACK=`grep "FDisk_partition_scheme" /tmp/output.hdiattach.$$ \
            | awk '{ print $1 }'`
        MNT_DIR=`grep "Windows_FAT_32" /tmp/output.hdiattach.$$ \
            | awk '{ print $3 }'`

    else
        ${SUCMD} mkdir -p ${MNT_DIR}
        LOOPBACK=$(${SUCMD} lofiadm -a $IMG_TMP_DIR/coal.$$/$$.${OUTPUT_IMG})
        ${SUCMD} mount -F pcfs -o foldcase ${LOOPBACK}:c ${MNT_DIR}
    fi
    echo "(${IMG_DEV} mounted on ${MNT_DIR}) done."
}

function copy_config {

    # Clear current configs from stage area
    rm -f ${MNT_DIR}/config || true
    rm -rf ${MNT_DIR}/config.inc || true

    cp -r config/config.inc ${MNT_DIR}/config.inc
}

# Copy to mount is basically just extracting everything to the image mount
function copy_to_mount
{
    THIS_VERSION=$(cat ${MNT_DIR}/version)
    THIS_BUILDSTAMP=$THIS_VERSION
    LIVEIMG_VERSION=$(ls -1 $MNT_DIR/os)
    cp ${MNT_DIR}/private/root.password.$LIVEIMG_VERSION $STAGE
    # BASHSTYLED
    cp ${MNT_DIR}/os/$LIVEIMG_VERSION/platform/i86pc/amd64/boot_archive.manifest $STAGE

    rm -f $STAGE/usb_key.manifest || true
    cp $MNT_DIR/usb_key.manifest $STAGE
    rm -f $STAGE/boot_archive.manifest || true
    cp ${MNT_DIR}/boot_archive.manifest $STAGE
    chmod 444 $STAGE/*.manifest

    # Also copy in devtools
    echo "==> Copying in devtools"
    cp -r $ROOT/devtools $MNT_DIR/devtools
}

CLEANED=0
function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        CLEANED=1
        if [[ -n ${LOOPBACK} ]]; then
            if [[ "$PLATFORM" == "Darwin" ]]; then
                hdiutil detach ${MNT_DIR} || true
            else
                ${SUCMD} umount ${MNT_DIR} || /usr/bin/true
                ${SUCMD} lofiadm -d ${LOOPBACK}
            fi
            sync; sync
            LOOPBACK=
        fi

    fi
    rm -rf $IMG_TMP_DIR/fs.*.$$
    rm -rf $IMG_TMP_DIR/output.*.$$
}

function create_output
{
    local vmxfile="${STAGE}/USB-headnode.vmwarevm/USB-headnode.vmx"
    local vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.tbz2"
    local vmware_ver
    vmware_ver=$(build_spec vmware_version)

    if [[ -n ${vmware_ver} && ${vmware_ver} -ge 5 ]]; then
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.5.tbz2"
    fi

    echo "==> Unpacking VMWare image... "
    rm -rf $STAGE/USB-headnode.vmwarevm || true
    (cd $STAGE && ${TAR} -jxvf ${vmwarevm_tarball}) \
        || fatal "Unable to unpack image"
    (cd $STAGE/USB-headnode.vmwarevm \
        && sed -e "s|<USB_IMAGE_FILE>|${OUTPUT_IMG}|" ${ROOT}/usb/${COAL_VMDK} \
        > USB-headnode.vmdk)
    echo "done."

    coal_numvcpus=$(build_spec coal-numvcpus)
    if [[ -n ${coal_numvcpus} ]]; then
        echo -n "==> Setting COAL HN vcpu count to: ${coal_numvcpus} "
        sed -e "s/^numvcpus.*$/numvcpus = \"${coal_numvcpus}\"/" \
            "${vmxfile}" > "${vmxfile}.new"
        mv "${vmxfile}.new" "${vmxfile}"
        echo "done."
    fi

    coal_memsize=$(build_spec coal-memsize)
    if [[ -n ${coal_memsize} ]]; then
        if [[ ${coal_memsize} < 4096 ]]; then
            # BEGIN BASHSTYLED
            echo "* * *"
            echo "* Warning: Your COAL memory size (coal-memsize) is set to <4096 MiB."
            echo "* That is likely to cause problems in your COAL. Consider a larger"
            echo "* value for 'coal-memsize' in 'build.spec.local'."
            echo "* * *"
            # END BASHSTYLED
            sleep 5
        fi
        echo -n "==> Setting COAL HN memory to: ${coal_memsize} MiB... "
        sed -e "s/^memsize.*$/memsize = \"${coal_memsize}\"/" \
            "${vmxfile}" > "${vmxfile}.new"
        mv "${vmxfile}.new" "${vmxfile}"
        echo "done."
    fi

    local coal_enable_serial
    coal_enable_serial=$(build_spec coal-enable-serial)
    sed -e "/^serial[0-1]\./d" "${vmxfile}" > "${vmxfile}.new"
    mv "${vmxfile}.new" "${vmxfile}"
    if [[ "${coal_enable_serial}" == "true" ]]; then
        echo -n "==> Adding serial ports to VMware configuration..."
        for i in 0 1; do
            local coal_serial_path
            coal_serial_path=$(build_spec coal-serial${i}-path)
            if [[ -z ${coal_serial_path} ]]; then
              coal_serial_path="socket.serial${i}"
            fi
            echo "serial${i}.present = \"TRUE\""
            echo "serial${i}.fileType = \"pipe\""
            echo "serial${i}.yieldOnMsrRead = \"TRUE\""
            echo "serial${i}.startConnected = \"TRUE\""
            echo "serial${i}.fileName = \"${coal_serial_path}\""
            echo
        done >> "${vmxfile}"
    fi

    echo -n "==> Copying in ${OUTPUT_IMG}... "
    mv $IMG_TMP_DIR/coal.$$/$$.${OUTPUT_IMG} \
        $STAGE/USB-headnode.vmwarevm/${OUTPUT_IMG}
    echo "done."

    coal_zpool_disk_size=$(build_spec coal-zpool-disk-size)
    # BEGIN BASHSTYLED
    if [[ -n ${coal_zpool_disk_size} ]]; then
        if [[ -x "/Applications/VMware Fusion.app/Contents/Library/vmware-vdiskmanager" ]]; then
            /Applications/VMware\ Fusion.app/Contents/Library/vmware-vdiskmanager \
                -x ${coal_zpool_disk_size}GB ${STAGE}/USB-headnode.vmwarevm/zpool.vmdk
        else
            echo " !!! WARNING !!! Cannot resize zpool disk with missing vmware-vdiskmanager!" >&2
        fi
    fi
    # END BASHSTYLED

    if [[ "$BUILD_TGZ" == "false" ]]; then
        echo "==> Creating coal-${THIS_BUILDSTAMP}/"
        [[ -d $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE} ]] \
            && rm -rf $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE}
        (cd $STAGE \
            && mv USB-headnode.vmwarevm \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm)
        mv $STAGE $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE}
    else
        echo "==> Creating coal-${THIS_BUILDSTAMP}.tgz"
        (cd $STAGE \
            && mv USB-headnode.vmwarevm \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm \
            && ${TAR} -zcf ${ROOT}/coal-${THIS_BUILDSTAMP}-${USB_SIZE}.tgz \
            root.password.${LIVEIMG_VERSION} \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
    fi

    rm -rf $IMG_TMP_DIR/coal.$$
    #XXX
    #rm -rf $STAGE || true
}

unpack_image
expand_image
mount_image
trap 'cleanup' EXIT
copy_to_mount
copy_config
cleanup
create_output
