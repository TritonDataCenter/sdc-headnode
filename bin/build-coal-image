#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#

ROOT=$(cd $(dirname $0)/../; pwd)

. "${ROOT}/buildtools/lib/error_handler.sh"
. "${ROOT}/buildtools/lib/common.sh"

function usage {
    if [[ -n "$1" ]]; then
        echo "ERROR: $1" >&2
    fi
    echo "" >&2
    echo "Usage:" >&2
    echo "    $0 [-r] <usb_tarball>" >&2
    echo "    -r     Consume the usb build rather than copy it" >&2
    echo "" >&2
    exit 1
}

REUSE_USB_BUILD=0

while getopts 'cr' name; do
    case "${name}" in
    c)
        usage "the \"-${name}\" option is no longer supported"
        ;;
    r)
        REUSE_USB_BUILD=1
        echo "Re-using USB build rather than creating new copy. "
        ;;
    \?)
        usage 'unknown option'
        ;;
    esac
done
shift $((OPTIND - 1))

if [[ -z "$1" ]]; then
    usage 'must provide <usb_tarball> filename'
fi

TAR_BUILD_FILENAME=$(rel2abs $1)
shift

TAR_BUILD_IS_DIRECTORY=0
if [[ -d $TAR_BUILD_FILENAME ]]; then
    TAR_BUILD_IS_DIRECTORY=1
fi

# Write output to log file.
THIS_TIMESTAMP=${TIMESTAMP}
if [[ -z "$THIS_TIMESTAMP" ]]; then
    THIS_TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
LOGDIR="${ROOT}/log"
LOGFILE="${LOGDIR}/build.log.coal.${THIS_TIMESTAMP}"
mkdir -p log
exec > >(tee ${LOGFILE}) 2>&1

. "${ROOT}/buildtools/lib/trace_logger.sh"

BUILD_TGZ=$(build_spec build-tgz)
USB_SIZE="4gb"
USB_SKIP=7812500
USB_PADDING=508
PARTMAP="${USB_SIZE}.partition.map"
OUTPUT_IMG="${USB_SIZE}.img"
IMG_TMP_DIR=/tmp/sdc-headnode-tmp.$$
MNT_DIR=$IMG_TMP_DIR/mnt

STAGE=${ROOT}/cache/stage_coal

mkdir -p $STAGE
rm -rf $STAGE/*

echo ">> Starting build at $(date)"

function unpack_image
{
    echo -n "==> Unpacking USB image... "
    mkdir -p $IMG_TMP_DIR
    if [[ $TAR_BUILD_IS_DIRECTORY == 1 ]]; then
        if [[ $REUSE_USB_BUILD == 1 ]]; then
            rm -rf $IMG_TMP_DIR
            mv $TAR_BUILD_FILENAME $IMG_TMP_DIR/
        else
            (cd $TAR_BUILD_FILENAME \
                && tar -c . | tar -C $IMG_TMP_DIR/ -xovf - )
        fi
    else
        (cd $IMG_TMP_DIR/ && ${TAR} -xzf $TAR_BUILD_FILENAME) || \
            fatal "Unable to unpack USB image"
    fi

    (cd $IMG_TMP_DIR && mv usb-*${OUTPUT_IMG} ${OUTPUT_IMG} && \
        mv usb-*${PARTMAP} ${PARTMAP}) || \
        fatal "Unable to unpack USB image"

    echo "done."
}

# In the case of VMWare we want to expand the image out so that the cylinders
# matches what's in the vmdk.
function expand_image
{
    echo -n "==> Expanding USB image for VMWare... "

    if [[ -f $IMG_TMP_DIR/${OUTPUT_IMG} && \
          -n ${USB_SKIP} && -n ${USB_PADDING} ]]; then
        echo ""
        local file=$IMG_TMP_DIR/${OUTPUT_IMG}
        dd if=/dev/zero of=${file} conv=notrunc seek=${USB_SKIP} \
           bs=512 count=${USB_PADDING}
    else
        echo "skipped."
    fi
}

function copy_config {

    # Clear current configs from stage area
    rm -f ${MNT_DIR}/config || true
    rm -rf ${MNT_DIR}/config.inc || true

    cp -r config/config.inc ${MNT_DIR}/config.inc
}

#
# COAL should default to booting from the USB key, not iPXE.
#
function modify_loader {
    local ipxe=

    ipxe=$(build_spec ipxe)

    if [ -z "$ipxe" ]; then
        ipxe="false"
    fi

    sed -i'.tmp' "s+^ipxe=.*+ipxe=\"$ipxe\"+" $MNT_DIR/boot/loader.conf
    rm $MNT_DIR/boot/loader.conf.tmp
}

# Copy to mount is basically just extracting everything to the image mount
function copy_to_mount
{
    THIS_VERSION=$(cat ${MNT_DIR}/version)
    THIS_BUILDSTAMP=$THIS_VERSION
    LIVEIMG_VERSION=$(ls -1 $MNT_DIR/os)
    cp ${MNT_DIR}/private/root.password.$LIVEIMG_VERSION $STAGE
    # BASHSTYLED
    cp ${MNT_DIR}/os/$LIVEIMG_VERSION/platform/i86pc/amd64/boot_archive.manifest $STAGE

    rm -f $STAGE/usb_key.manifest || true
    cp $MNT_DIR/usb_key.manifest $STAGE
    rm -f $STAGE/boot_archive.manifest || true
    cp ${MNT_DIR}/boot_archive.manifest $STAGE
    chmod 444 $STAGE/*.manifest

    # Also copy in devtools
    echo "==> Copying in devtools"
    cp -r $ROOT/devtools $MNT_DIR/devtools
}

function create_output
{
    local vmxfile="${STAGE}/USB-headnode.vmwarevm/USB-headnode.vmx"
    local vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.tbz2"
    local vmdk_img=$STAGE/USB-headnode.vmwarevm/$OUTPUT_IMG
    local vmdk_file=$STAGE/USB-headnode.vmwarevm/USB-headnode.vmdk
    local vmware_version
    vmware_version=$(build_spec vmware_version)

    if [[ -z "${vmware_version}" ]]; then
        fatal "No 'vmware_version' in build.spec[.local]"
    elif [[ ${vmware_version} -le 4 ]]; then
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.4.tbz2"
    elif [[ ${vmware_version} -le 5 ]]; then
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.5.tbz2"
    elif [[ ${vmware_version} -le 7 ]]; then
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.7.tbz2"
    elif [[ ${vmware_version} -le 8 ]]; then
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.8.tbz2"
    else
        vmwarevm_tarball="${ROOT}/vmware/USB-headnode.vmwarevm.10.tbz2"
    fi

    echo "==> Unpacking VMWare image... "
    rm -rf $STAGE/USB-headnode.vmwarevm
    (cd $STAGE && ${TAR} -jxvf ${vmwarevm_tarball}) \
        || fatal "Unable to unpack image"
    echo "done."

    coal_numvcpus=$(build_spec coal-numvcpus)
    if [[ -n ${coal_numvcpus} ]]; then
        echo -n "==> Setting COAL HN vcpu count to: ${coal_numvcpus} "
        sed -e "s/^numvcpus.*$/numvcpus = \"${coal_numvcpus}\"/" \
            "${vmxfile}" > "${vmxfile}.new"
        mv "${vmxfile}.new" "${vmxfile}"
        echo "done."
    fi

    coal_memsize=$(build_spec coal-memsize)
    if [[ -n ${coal_memsize} ]]; then
        if [[ ${coal_memsize} < 6144 ]]; then
            # BEGIN BASHSTYLED
            echo "* * *"
            echo "* Warning: Your COAL memory size (coal-memsize) is set to <6144 MiB."
            echo "* That is likely to cause problems in your COAL. Consider a larger"
            echo "* value for 'coal-memsize' in 'build.spec.local'."
            echo "* * *"
            # END BASHSTYLED
            sleep 5
        fi
        echo -n "==> Setting COAL HN memory to: ${coal_memsize} MiB... "
        sed -e "s/^memsize.*$/memsize = \"${coal_memsize}\"/" \
            "${vmxfile}" > "${vmxfile}.new"
        mv "${vmxfile}.new" "${vmxfile}"
        echo "done."
    fi

    local coal_enable_serial
    coal_enable_serial=$(build_spec coal-enable-serial)
    sed -e "/^serial[0-1]\./d" "${vmxfile}" > "${vmxfile}.new"
    mv "${vmxfile}.new" "${vmxfile}"
    if [[ "${coal_enable_serial}" == "true" ]]; then
        echo -n "==> Adding serial ports to VMware configuration..."
        for i in 0 1; do
            local coal_serial_path
            coal_serial_path=$(build_spec coal-serial${i}-path)
            if [[ -z ${coal_serial_path} ]]; then
              coal_serial_path="socket.serial${i}"
            fi
            echo "serial${i}.present = \"TRUE\""
            echo "serial${i}.fileType = \"pipe\""
            echo "serial${i}.yieldOnMsrRead = \"TRUE\""
            echo "serial${i}.startConnected = \"TRUE\""
            echo "serial${i}.fileName = \"${coal_serial_path}\""
            echo
        done >> "${vmxfile}"
        echo "done."
    fi

    echo -n "==> Copying in ${OUTPUT_IMG}... "
    mv $IMG_TMP_DIR/${OUTPUT_IMG} "$vmdk_img"
    echo "done."

    echo -n "==> Generating VMDK file for ${OUTPUT_IMG}... "
    /bin/rm -f "$vmdk_file"
    if ! "$ROOT/vmware/make_vmdk" -i "$vmdk_img" -o "$vmdk_file"; then
        fatal 'could not create VMDK file'
    fi
    echo "done."

    coal_zpool_disk_size=$(build_spec coal-zpool-disk-size)
    # BEGIN BASHSTYLED
    if [[ -n ${coal_zpool_disk_size} ]]; then
        vdiskmanager=$(which vmware-vdiskmanager || echo "/Applications/VMware Fusion.app/Contents/Library/vmware-vdiskmanager")
        if [[ -x "${vdiskmanager}" ]]; then
            "${vdiskmanager}" \
                -x ${coal_zpool_disk_size}GB ${STAGE}/USB-headnode.vmwarevm/zpool.vmdk
        else
            echo " !!! WARNING !!! Cannot resize zpool disk with missing vmware-vdiskmanager!" >&2
        fi
    fi
    # END BASHSTYLED

    if [[ "$BUILD_TGZ" == "false" ]]; then
        echo "==> Creating coal-${THIS_BUILDSTAMP}/"
        [[ -d $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE} ]] \
            && rm -rf $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE}
        (cd $STAGE \
            && mv USB-headnode.vmwarevm \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm)
        mv $STAGE $ROOT/coal-${THIS_BUILDSTAMP}-${USB_SIZE}
    else
        echo "==> Creating coal-${THIS_BUILDSTAMP}-${USB_SIZE}.tgz"
        (cd $STAGE \
            && mv USB-headnode.vmwarevm \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm \
            && ${TAR} ${TAR_COMPRESSION_ARG} \
                -cf ${ROOT}/coal-${THIS_BUILDSTAMP}-${USB_SIZE}.tgz \
            root.password.${LIVEIMG_VERSION} \
            coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
    fi

    #XXX
    #rm -rf $STAGE || true
}

function cleanup
{
    echo '==> Cleaning up'

    unmount_loopback

    rm -f $IMG_TMP_DIR/${OUTPUT_IMG}
    rm -f $IMG_TMP_DIR/$PARTMAP
    rm -f ${IMG_TMP_DIR}/rootfs.img
    rm -f ${IMG_TMP_DIR}/root.password.${LIVEIMG_VERSION}
    rm -rf $IMG_TMP_DIR/*.manifest
    rm -rf $IMG_TMP_DIR/fs.*
    rm -rf $IMG_TMP_DIR/output.*
    rmdir $MNT_DIR
    rmdir $IMG_TMP_DIR
}

unpack_image
expand_image
trap 'cleanup' EXIT
mount_root_image
copy_to_mount
copy_config
modify_loader
unmount_root_image
create_output
