#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019, Joyent, Inc.
#

#
# We set errexit (a.k.a. "set -e") to force an exit on error conditions, but
# there are many important error conditions that this does not capture --
# first among them failures within a pipeline (only the exit status of the
# final stage is propagated).  To exit on these failures, we also set
# "pipefail" (a very useful option introduced to bash as of version 3 that
# propagates any non-zero exit values in a pipeline).
#

set -o errexit
set -o pipefail

REUSE_USB_BUILD=0
if [[ $1 == "-r" ]]; then
    shift
    REUSE_USB_BUILD=1
    echo "Re-using USB build rather than creating new copy. "
fi

function rel2abs () {
  local abs_path end
  abs_path=$(unset CDPATH; cd `dirname $1` 2>/dev/null && pwd -P)
  [[ -z "$abs_path" ]] && return 1
  end=$(basename $1)
  echo "${abs_path%*/}/$end"
}

if [[ -z "$1" ]]; then
    echo "ERROR: no usb tarball supplied"
    echo ""
    echo "Usage:"
    echo "    $0 [-r] <usb_tarball>"
    echo "    -r     Consume the usb build rather than copy it"
    echo ""
    exit 1
fi

TAR_BUILD_FILENAME=$(rel2abs $1)
shift

TAR_BUILD_IS_DIRECTORY=0
if [[ -d $TAR_BUILD_FILENAME ]]; then
    TAR_BUILD_IS_DIRECTORY=1
fi

ROOT=$(cd $(dirname $0)/../; pwd)

# Write output to log file.
THIS_TIMESTAMP=${TIMESTAMP}
if [[ -z "$THIS_TIMESTAMP" ]]; then
    THIS_TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
LOGDIR="${ROOT}/log"
LOGFILE="${LOGDIR}/build.log.dataset.${THIS_TIMESTAMP}"
mkdir -p log
exec > >(tee ${LOGFILE}) 2>&1

if [[ $(uname -s) != "SunOS" || $(zonename) == "global"
    || ${USER} != "root" ]]; then

    echo "This is only supported on a SmartOS non-global zone as root." >&2
    exit 2
fi

if ! zfs list zones/$(zonename)/data; then
    echo "You must have a delegated dataset for this to work."
    exit 2
fi

# BASHSTYLED
export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export BASH_XTRACEFD=4
set -o xtrace

echo ">> Starting build at $(date)"

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function errexit
{
    echo ">> Doing cleanup"
    if [[ -n ${DATASET} ]]; then
        echo ">> Removing ${DATASET}"
        zfs destroy -r ${DATASET}
    fi

    if [[ $1 -ne 0 ]]; then
				# Failed so also delete output file(s).
        if [[ -z ${filename} && -f ${filename} ]]; then
            echo ">> Removing ${filename}"
            rm ${filename}
        fi
        if [[ -z ${manifest} && -f ${manifest} ]]; then
            echo ">> Removing ${manifest}"
            rm ${manifest}
        fi
        fatal "error exit status $1 at line $2"
    fi

    exit 0
}

trap 'errexit $? $LINENO' EXIT

NEW_UUID=$(uuid)
echo ">> Building dataset ${NEW_UUID} from ${TAR_BUILD_FILENAME}"
DATASET=zones/$(zonename)/data/${NEW_UUID}
zfs create -V 4G ${DATASET}
if [[ ${TAR_BUILD_IS_DIRECTORY} == 1 ]]; then
    dd if=${TAR_BUILD_FILENAME}/${TAR_BUILD_FILENAME}-4gb.img \
        of=/dev/zvol/rdsk/zones/$(zonename)/data/${NEW_UUID} bs=$((1024 * 1024))
else
    gtar -O -zxf ${TAR_BUILD_FILENAME} \
        $(basename ${TAR_BUILD_FILENAME} .tgz)-4gb.img \
        | dd of=/dev/zvol/rdsk/zones/$(zonename)/data/${NEW_UUID} \
        bs=$((1024 * 1024))
fi
zfs snapshot ${DATASET}@sending
filename=$(basename ${TAR_BUILD_FILENAME} .tgz).zvol.bz2
zfs send -p ${DATASET}@sending | pbzip2 >${filename}
#zfs destroy -r ${DATASET}

now=$(date -u +%Y-%m-%dT%H:%M.000Z)
shasum=$(/usr/bin/sum -x sha1 ${filename} | cut -d' ' -f1)
filesize=$(ls -l ${filename} | awk '{ print $5 }')
# fix in 2099 ;)
version=$(basename ${TAR_BUILD_FILENAME} .tgz | sed -e "s/^usb-.*-20/20/")
manifest=$(basename ${TAR_BUILD_FILENAME} .tgz).dsmanifest

# MG's ${TIMESTAMP} is in the wrong format, we need:
#
# "2012-08-31T16:04:51.970Z"
#
# BASHSTYLED
mangled_timestamp=$(echo ${TIMESTAMP} | sed -e "s/^\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)T\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)Z/\1-\2-\3T\4:\5:\6.000Z/")

cat >${manifest} <<EOF
{
  "name": "sdc-headnode ",
  "version": "${version}",
  "type": "zvol",
  "cpu_type": "host",
  "description": "SDC Headnode for use on SDC",
  "created_at": "${now}",
  "updated_at": "${now}",
  "os": "smartos",
  "image_size": 4096,
  "files": [
    {
      "path": "${filename}",
      "sha1": "${shasum}",
      "size": ${filesize}
    }
  ],
  "requirements": {
    "min_ram": 2048,
    "networks": [
      {
        "name": "net0",
        "description": "public"
      }
    ]
  },
  "disk_driver": "ide",
  "nic_driver": "e1000",
  "uuid": "${NEW_UUID}",
  "platform_type": "smartos",
  "published_at": "${mangled_timestamp}",
  "creator_uuid": "352971aa-31ba-496c-9ade-a379feaecd52",
  "creator_name": "sdc",
  "urn": "sdc:sdc:usbheadnode:${version}"
}
EOF

exit 0
