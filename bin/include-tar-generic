#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019, Joyent, Inc.
#

PLATFORM=$(uname -s)
MNT_DIR="${ROOT}/mnt"
GZCAT="zcat"
[ -z "$IMG_TYPE" ] && IMG_TYPE="usb"
case "$PLATFORM" in
  Darwin)
    # sudo is no longer required on OSX builds
    SUCMD=''
    if [[ $(uname -r | cut -d '.' -f1) -ge 13 ]]; then
      TAR=tar
    else
      TAR=gnutar
    fi
    TAR_ROOT=""
    PING="/sbin/ping -c 1"
    ;;
  Linux)
    # sudo is not required for tar extraction on Linux
    SUCMD=''
    TAR=tar
    TAR_ROOT=""
    PING="/bin/ping -c 1"
    ;;
  SunOS)
    SUCMD='pfexec'
    TAR=gtar
    TAR_ROOT="--owner=root --group=root"
    unset MACHINE_THAT_GOES_PING
    PING="/usr/sbin/ping"
    if [[ -z "$TAR_COMPRESSION_ARG" ]]; then
        TAR_COMPRESSION_ARG="-I pigz"
    fi
    ;;
  *)
    echo "Platform $PLATFORM not supported."
    exit 1
esac

if [[ -z "$TAR_COMPRESSION_ARG" ]]; then
    TAR_COMPRESSION_ARG="-z"
fi

# Tar 1.20 added --hard-dereference, which we need if using tar >=1.20.
TAR_MAJOR=$($TAR --version | head -n1 \
            | sed -n -E 's/.*([0-9])\.([0-9]+).*/\1/p')
TAR_MINOR=$($TAR --version | head -n1 \
            | sed -n -E 's/.*([0-9])\.([0-9]+).*/\2/p')
if [[ ${PLATFORM} == "SunOS" \
    && ($TAR_MAJOR -gt 1 || $TAR_MINOR -ge 20) ]]; then

    TAR_HARD_DEREF="--hard-dereference"
else
    TAR_HARD_DEREF=""
fi
USER=$(whoami)


function can_has_internets
{
    IP_LIST="8.8.8.8 4.2.2.1"
    for ip in $IP_LIST; do
        $PING $ip >/dev/null 2>&1 && return 0
    done
    return 1
}

function version
{
    echo "==> Building with variables from include-tar-smartos"
}

function cleanup
{
    rm -rf /tmp/fs.*.$$
    rm -rf $STAGE
}

function unpack_image
{
    # nop
    true
}

function mount_image
{
    ${SUCMD} rm -rf ${MNT_DIR}
    mkdir -p ${MNT_DIR}
}

function create_output
{
    echo "==> Checking current GIT branch"
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" \
        || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}

    # BASHSTYLED
    if [[ -f ${ROOT}/cache/stage/private/root.password.${LIVEIMG_VERSION} ]]; then
        echo "==> Copying root.password"
        if [[ -e $ROOT/cache/root.password.${LIVEIMG_VERSION} ]]; then
            rm -f $ROOT/cache/root.password.${LIVEIMG_VERSION};
        fi
        # BASHSTYLED
        ${SUCMD} cp ${ROOT}/cache/stage/private/root.password.${LIVEIMG_VERSION} ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
        ${SUCMD} chmod 400 ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
    fi

    if [[ ${BUILD_TGZ} == "false" && ${TYPE} != "tar" ]]; then
        echo "==> Creating boot-${THIS_BUILDSTAMP}/"
        ${SUCMD} chown -R ${USER} ${MNT_DIR}
        mv $MNT_DIR $ROOT/boot-${THIS_BUILDSTAMP}
    else
        echo "==> Creating boot-${THIS_BUILDSTAMP}.tgz"
        ${SUCMD} chown -R ${USER} ${MNT_DIR}
        ${TAR} $TAR_HARD_DEREF ${TAR_COMPRESSION_ARG} \
            -chf ${ROOT}/boot-${THIS_BUILDSTAMP}.tgz \
            -C ${MNT_DIR} .
    fi
    rm -rf $MNT_DIR || true
}
