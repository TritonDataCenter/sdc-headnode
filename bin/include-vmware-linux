#!/bin/bash
#
# Copyright (c) 2010,2011 Joyent Inc., All rights reserved.
#

SUCMD='sudo'
MNT_DIR="${ROOT}/mnt"
MD5CMD="md5sum"
GZCAT="zcat"
TAR=tar
TAR_ROOT="--owner=root --group=root"
IMG_TYPE="coal" # if we're VMWare we're COAL

function can_has_internets
{
    if ping -c 1 8.8.8.8 >/dev/null 2>&1 \
        || ping -c 1 4.2.2.1 >/dev/null 2>&1; then

        return 0
    fi
    return 1
}

function version
{
    echo "==> Building with variables from include-linux-vmware"
}

function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        # Ensure we've unmounted the disk
        ${SUCMD} vmware-mount -d ${ROOT}/mnt
        CLEANED=1

        if [ $ERROR -eq 0 ]; then
            echo "==> Defragmenting VMDK"
            ${SUCMD} vmware-vdiskmanager \
                -d ${ROOT}/cache/USB-headnode.vmwarevm/USB-headnode.vmdk
        fi
    fi
    rm -rf /tmp/fs.*.$$
}

function unpack_image
{
    echo -n "==> Unpacking VMWare image... "
    rm -rf ${ROOT}/cache/USB-headnode.vmwarevm
    (cd ${ROOT}/cache && ${TAR} -jxvf ${ROOT}/vmware/USB-headnode.vmwarevm.tbz2) \
        || fatal "Unable to unpack image."
    echo "done."
}

function mount_image
{
    echo -n "==> Mounting new VMWare image... "
    mkdir -p ${MNT_DIR}
    ${SUCMD} vmware-mount \
        ${ROOT}/cache/USB-headnode.vmwarevm/USB-headnode.vmdk ${MNT_DIR}
    echo "done."
}

function add_manifests
{
    # build manifest of USB files + move in boot_archive manifest
    rm -f ${ROOT}/cache/usb_key.manifest
    (cd ${STAGE}/ \
        && find . -type f -exec ${MD5CMD} {} \;) \
        > ${ROOT}/cache/USB-headnode.vmwarevm/usb_key.manifest
    mv -f ${STAGE}/os/${LIVEIMG_VERSION}/platform/i86pc/amd64/boot_archive.manifest \
        ${ROOT}/cache/USB-headnode.vmwarevm/boot_archive.manifest
    chmod 444 ${ROOT}/cache/USB-headnode.vmwarevm/boot_archive.manifest \
        ${ROOT}/cache/USB-headnode.vmwarevm/usb_key.manifest
}

function create_output
{
    echo "==> Checking current GIT branch"
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" \
        || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}

    output_version="${branch_name}-${LIVEIMG_VERSION}"
    if [ -f build-number.txt ]; then
      output_version="$output_version-$(cat build-number.txt \
          | sed -n 's,^build\.number=\(.*\),\1,p')"
    fi

    if [[ -f ${ROOT}/cache/stage/private/root.password.${LIVEIMG_VERSION} ]]; then
        echo "==> Copying root.password.${LIVEIMG_VERSION}"
        ${SUCMD} cp ${ROOT}/cache/stage/private/root.password.${LIVEIMG_VERSION} \
            ${ROOT}/cache/USB-headnode.vmwarevm/root.password.${LIVEIMG_VERSION}
        ${SUCMD} chmod 400 ${ROOT}/cache/USB-headnode.vmwarevm/root.password.${LIVEIMG_VERSION}
    fi

    if [[ -z ${BUILD_TGZ} ]] || [[ ${BUILD_TGZ} != "false" ]]; then
        echo "==> Creating coal-${output_version}.tgz"
        (cd ${ROOT}/cache \
            && ${SUCMD} chown -R ${USER} USB-headnode.vmwarevm \
            && ${TAR} -zcf ${ROOT}/coal-${output_version}.tgz \
            USB-headnode.vmwarevm) \
            || fatal "Unable to create .tgz output"
    else
        mv ${ROOT}/cache/USB-headnode.vmware coal-${output_version}.vmwarevm
        ${SUCMD} chown -R ${USER} coal-${output_version}.vmwarevm
    fi

}

