#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2015 Joyent, Inc.
#

ROOT=$(cd $(dirname $0)/../; pwd)

. "${ROOT}/buildtools/lib/error_handler.sh"
. "${ROOT}/buildtools/lib/common.sh"

function usage {
    if [[ -n "$1" ]]; then
        echo "ERROR: $1" >&2
    fi
    echo "" >&2
    echo "Usage:" >&2
    echo "    $0 <boot_tarball>" >&2
    echo "" >&2
    exit 1
}

while getopts cr name; do
    case "${name}" in
    c)
        usage 'the "-c" option is no longer supported'
        ;;
    \?)
        usage 'unknown option'
        ;;
    esac
done
shift $((OPTIND - 1))

function rel2abs () {
    local abs_path end
    abs_path=$(unset CDPATH; cd `dirname $1` 2>/dev/null && pwd -P)
    [[ -z "$abs_path" ]] && return 1
    end=$(basename $1)
    echo "${abs_path%*/}/$end"
}

if [[ -z "$1" ]]; then
    usage 'must provide <boot_tarball> filename'
fi

TAR_BUILD_FILENAME=$(rel2abs $1)
shift

TAR_BUILD_IS_DIRECTORY=0
if [[ -d $TAR_BUILD_FILENAME ]]; then
    TAR_BUILD_IS_DIRECTORY=1
fi

# Write output to log file.
THIS_TIMESTAMP=${TIMESTAMP}
if [[ -z "$THIS_TIMESTAMP" ]]; then
    THIS_TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
LOGDIR="${ROOT}/log"
LOGFILE="${LOGDIR}/build.log.usb.${THIS_TIMESTAMP}"
mkdir -p log
exec > >(tee ${LOGFILE}) 2>&1

. "${ROOT}/buildtools/lib/trace_logger.sh"

BUILDSPEC=$ROOT/bin/buildspec

MERGED_SPEC=
if [[ -f "${ROOT}/build.spec" && -f "${ROOT}/build.spec.local" ]]; then
    MERGED_SPEC=$(${ROOT}/bin/json-merge ${ROOT}/build.spec \
                  ${ROOT}/build.spec.local);
elif [[ -f "${ROOT}/build.spec" ]]; then
    MERGED_SPEC=$(cat ${ROOT}/build.spec);
elif [[ -f "${ROOT}/build.spec.local" ]]; then
    MERGED_SPEC=$(cat ${ROOT}/build.spec.local);
fi

function build_spec () {
    local thing=$1;
    echo $(echo $MERGED_SPEC | ${ROOT}/bin/json ${thing});
};

BUILD_TGZ=$(build_spec build-tgz)


MNT_DIR=/mnt/tmp
USB_SIZE="4gb"
OUTPUT_IMG="${USB_SIZE}.img"
if [[ -z $IMG_TMP_DIR ]]; then
  IMG_TMP_DIR=/tmp
fi
PLATFORM=$(uname -s)

#
# Determine the name of the template images archive.  This depends on
# whether or not the archive is part of a release or debug build of the
# platform.
#
PLATFORM_SUFFIX=
if [[ $($BUILDSPEC -f debug-platform) == 'true' ]]; then
    PLATFORM_SUFFIX='-debug'
fi
TEMPLATE_IMG="$ROOT/cache/file.platimages$PLATFORM_SUFFIX.tgz"

if [[ "$PLATFORM" != "Darwin" ]]; then
    SUCMD='pfexec'
fi

STAGE=${ROOT}/cache/stage_usb
mkdir -p $STAGE
rm -rf $STAGE/*

echo ">> Starting build at $(date)"

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function errexit
{
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

trap 'errexit $? $LINENO' EXIT


function unpack_image
{
    echo -n "==> Unpacking USB image... "
    rm -f "$IMG_TMP_DIR/$OUTPUT_IMG.$$"
    (cd "$IMG_TMP_DIR" && $TAR -xzf "$TEMPLATE_IMG" "$OUTPUT_IMG" &&
        mv "$OUTPUT_IMG" "$$.$OUTPUT_IMG") ||
        fatal "Unable to unpack USB image"
    echo "done."
}

function mount_image
{
    echo -n "==> Mounting new USB image... "
    if [[ "$PLATFORM" == "Darwin" ]]; then
        # REVIEW - [ blah ] ?
        [ ! -d ${ROOT}/cache/tmp_volumes ] && mkdir -p ${ROOT}/cache/tmp_volumes
        hdiutil attach $IMG_TMP_DIR/$$.${OUTPUT_IMG} \
            >/tmp/output.hdiattach.$$ \
            -mountrandom ${ROOT}/cache/tmp_volumes 2>&1
        LOOPBACK=`grep "FDisk_partition_scheme" /tmp/output.hdiattach.$$ \
            | awk '{ print $1 }'`
        MNT_DIR=`grep "Windows_FAT_32" /tmp/output.hdiattach.$$ \
            | awk '{ print $3 }'`

    else
        ${SUCMD} mkdir -p ${MNT_DIR}
        LOOPBACK=$(${SUCMD} lofiadm -a $IMG_TMP_DIR/$$.${OUTPUT_IMG})
        ${SUCMD} mount -F pcfs -o foldcase ${LOOPBACK}:c ${MNT_DIR}
    fi
    # REVIEW - IMG_DEV not defined?
    echo "(${IMG_DEV} mounted on ${MNT_DIR}) done."
}

function copy_config {

    # Clear current configs from stage area
    rm -f ${MNT_DIR}/config || true
    rm -rf ${MNT_DIR}/config.inc || true

    cp -r config/config.inc ${MNT_DIR}/config.inc

    ANSWER_FILE=$(build_spec answer-file)
    if [[ -z ${ANSWER_FILE} ]]; then
        # Support 'answers-file' key as well, because that's what we
        # doc'd for a long time.
        ANSWER_FILE=$(build_spec answers-file)
    fi
    if [[ -n ${ANSWER_FILE} && -f ${ANSWER_FILE} ]]; then
        # BASHSTYLED
        echo "WARNING: Copying in ${ANSWER_FILE}, remove answer-file from build.spec* to disable."
        mkdir -p ${MNT_DIR}/private
        cp ${ANSWER_FILE} ${MNT_DIR}/private/answers.json
    fi
}

# Copy to mount is basically just extracting everything to the image mount
function copy_to_mount
{
    if [[ $TAR_BUILD_IS_DIRECTORY == 1 ]]; then
        (cd $TAR_BUILD_FILENAME \
            && ${TAR} -c .[a-zA-Z]* * | ${TAR} -C $MNT_DIR -xovf -) \
            || fatal "Unable to copy files to mount"
    else
        (cd ${MNT_DIR} && ${SUCMD} ${TAR} --no-same-owner \
         -xvzf $TAR_BUILD_FILENAME) \
            || fatal "Unable to copy files to mount"
    fi

    rm -rf $MNT_DIR/agents65 || true

    THIS_VERSION=$(cat ${MNT_DIR}/version)
    THIS_BUILDSTAMP=$THIS_VERSION
    LIVEIMG_VERSION=$(ls -1 $MNT_DIR/os)
    cp ${MNT_DIR}/private/root.password.$LIVEIMG_VERSION $STAGE
    # BASHSTYLED
    cp ${MNT_DIR}/os/$LIVEIMG_VERSION/platform/i86pc/amd64/boot_archive.manifest $STAGE

    rm -f $STAGE/usb_key.manifest || true
    cp $MNT_DIR/usb_key.manifest $STAGE
    rm -f $STAGE/boot_archive.manifest || true
    cp ${MNT_DIR}/boot_archive.manifest $STAGE
    chmod 444 $STAGE/*.manifest
}

CLEANED=0
function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        CLEANED=1
        if [[ -n ${LOOPBACK} ]]; then
            if [[ "$PLATFORM" == "Darwin" ]]; then
                hdiutil detach ${MNT_DIR} || true
            else
                ${SUCMD} umount ${MNT_DIR} || /usr/bin/true
                ${SUCMD} lofiadm -d ${LOOPBACK}
            fi
            sync; sync
            LOOPBACK=
        fi

    fi
    rm -rf $IMG_TMP_DIR/fs.*.$$
    rm -rf $IMG_TMP_DIR/output.*.$$
}

function create_output
{
    if [[ "$BUILD_TGZ" == "false" ]]; then
        echo "==> Creating usb-${THIS_BUILDSTAMP}/"
        [[ -d $ROOT/usb-${THIS_BUILDSTAMP} ]] \
            && rm -rf $ROOT/usb-${THIS_BUILDSTAMP}
        (cd $STAGE \
            && mv $IMG_TMP_DIR/$$.${OUTPUT_IMG} \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG})
        mv $STAGE $ROOT/usb-${THIS_BUILDSTAMP}
    else
        echo "==> Creating usb-${THIS_BUILDSTAMP}.tgz"
        (cd $STAGE \
            && mv $IMG_TMP_DIR/$$.${OUTPUT_IMG} \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
            && ${TAR} -zcf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
            root.password.${LIVEIMG_VERSION} \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."

    fi
    rm -rf $IMG_TMP_DIR/*.${OUTPUT_IMG} || true
    rm -rf $STAGE || true
}

unpack_image
mount_image
trap 'cleanup' EXIT
copy_to_mount
copy_config
cleanup
create_output
