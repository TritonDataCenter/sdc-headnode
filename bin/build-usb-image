#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#

ROOT=$(cd $(dirname $0)/../; pwd)

. "${ROOT}/buildtools/lib/error_handler.sh"
. "${ROOT}/buildtools/lib/common.sh"

function usage {
    if [[ -n "$1" ]]; then
        echo "ERROR: $1" >&2
    fi
    echo "" >&2
    echo "Usage:" >&2
    echo "    $0 <boot_tarball>" >&2
    echo "" >&2
    exit 1
}

while getopts cr name; do
    case "${name}" in
    c)
        usage 'the "-c" option is no longer supported'
        ;;
    \?)
        usage 'unknown option'
        ;;
    esac
done
shift $((OPTIND - 1))

if [[ -z "$1" ]]; then
    usage 'must provide <boot_tarball> filename'
fi

TAR_BUILD_FILENAME=$(rel2abs $1)
shift

TAR_BUILD_IS_DIRECTORY=0
if [[ -d $TAR_BUILD_FILENAME ]]; then
    TAR_BUILD_IS_DIRECTORY=1
fi

# Write output to log file.
THIS_TIMESTAMP=${TIMESTAMP}
if [[ -z "$THIS_TIMESTAMP" ]]; then
    THIS_TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
LOGDIR="${ROOT}/log"
LOGFILE="${LOGDIR}/build.log.usb.${THIS_TIMESTAMP}"
mkdir -p log
exec > >(tee ${LOGFILE}) 2>&1

. "${ROOT}/buildtools/lib/trace_logger.sh"

BUILDSPEC=$ROOT/bin/buildspec

BUILD_TGZ=$(build_spec build-tgz)
USB_SIZE="4gb"
PARTMAP="${USB_SIZE}.partition.map"
OUTPUT_IMG="${USB_SIZE}.img"
IMG_TMP_DIR=/tmp/sdc-headnode-tmp.$$
MNT_DIR=$IMG_TMP_DIR/mnt

#
# Determine the name of the template images archive.  This depends on
# whether or not the archive is part of a release or debug build of the
# platform.
#
PLATFORM_SUFFIX=
if [[ $($BUILDSPEC -f debug-platform) == 'true' ]]; then
    PLATFORM_SUFFIX='-debug'
fi
TEMPLATE_IMG="$ROOT/cache/file.platimages$PLATFORM_SUFFIX.tgz"

mkdir -p $IMG_TMP_DIR

STAGE=${ROOT}/cache/stage_usb
mkdir -p $STAGE
rm -rf $STAGE/*

echo ">> Starting build at $(date)"

function unpack_image
{
    echo -n "==> Unpacking USB image... "
    rm -f "$IMG_TMP_DIR/$OUTPUT_IMG"
    (cd "$IMG_TMP_DIR" &&
        $TAR -xzf "$TEMPLATE_IMG" "$PARTMAP" "$OUTPUT_IMG") ||
        fatal "Unable to unpack USB image"
    echo "done."
}

function copy_config {

    # Clear current configs from stage area
    rm -f ${MNT_DIR}/config || true
    rm -rf ${MNT_DIR}/config.inc || true

    cp -r config/config.inc ${MNT_DIR}/config.inc

    ANSWER_FILE=$(build_spec answer-file)
    if [[ -z ${ANSWER_FILE} ]]; then
        # Support 'answers-file' key as well, because that's what we
        # doc'd for a long time.
        ANSWER_FILE=$(build_spec answers-file)
    fi
    if [[ -n ${ANSWER_FILE} && -f ${ANSWER_FILE} ]]; then
        # BASHSTYLED
        echo "WARNING: Copying in ${ANSWER_FILE}, remove answer-file from build.spec* to disable."
        mkdir -p ${MNT_DIR}/private
        cp ${ANSWER_FILE} ${MNT_DIR}/private/answers.json
    fi
}

# Copy to mount is basically just extracting everything to the image mount
function copy_to_mount
{
    echo "Extracting content to image root"
    if [[ $TAR_BUILD_IS_DIRECTORY == 1 ]]; then
        (cd $TAR_BUILD_FILENAME \
            && rsync -av .[a-zA-Z]* * $MNT_DIR/) \
            || fatal "Unable to copy files to mount"
    else
        (cd ${MNT_DIR} && ${PCFSTAR} --no-same-owner \
         -xvzf $TAR_BUILD_FILENAME) \
            || fatal "Unable to copy files to mount"
    fi

    rm -rf $MNT_DIR/agents65 || true

    THIS_VERSION=$(cat ${MNT_DIR}/version)
    THIS_BUILDSTAMP=$THIS_VERSION
    LIVEIMG_VERSION=$(ls -1 $MNT_DIR/os)
    cp ${MNT_DIR}/private/root.password.$LIVEIMG_VERSION $STAGE
    # BASHSTYLED
    cp ${MNT_DIR}/os/$LIVEIMG_VERSION/platform/i86pc/amd64/boot_archive.manifest $STAGE

    rm -f $STAGE/usb_key.manifest || true
    cp $MNT_DIR/usb_key.manifest $STAGE
    rm -f $STAGE/boot_archive.manifest || true
    cp ${MNT_DIR}/boot_archive.manifest $STAGE
    chmod 444 $STAGE/*.manifest
}

function create_output
{
    if [[ "$BUILD_TGZ" == "false" ]]; then
        echo "==> Creating usb-${THIS_BUILDSTAMP}/"
        [[ -d $ROOT/usb-${THIS_BUILDSTAMP} ]] \
            && rm -rf $ROOT/usb-${THIS_BUILDSTAMP}
        (cd $STAGE \
            && mv $IMG_TMP_DIR/${OUTPUT_IMG} \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
            && mv $IMG_TMP_DIR/$PARTMAP \
            usb-${THIS_BUILDSTAMP}-$PARTMAP)
        mv $STAGE $ROOT/usb-${THIS_BUILDSTAMP}
    else
        echo "==> Creating usb-${THIS_BUILDSTAMP}.tgz"
        (cd $STAGE \
            && mv $IMG_TMP_DIR/${OUTPUT_IMG} \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
            && mv $IMG_TMP_DIR/$PARTMAP \
            usb-${THIS_BUILDSTAMP}-$PARTMAP \
            && ${TAR} ${TAR_COMPRESSION_ARG} \
            -cf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
            root.password.${LIVEIMG_VERSION} \
	    usb-${THIS_BUILDSTAMP}-$PARTMAP \
            usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."

    fi

    rm -rf $STAGE || true
}

function cleanup
{
    echo '==> Cleaning up'

    unmount_loopback

    rm -f $IMG_TMP_DIR/*gb.img
    rm -f $IMG_TMP_DIR/*gb.partition.map
    rm -f ${IMG_TMP_DIR}/rootfs.img
    rm -rf $IMG_TMP_DIR/fs.*
    rm -rf $IMG_TMP_DIR/output.*
    rmdir $MNT_DIR
    rmdir $IMG_TMP_DIR
}

unpack_image
mount_root_image
trap 'cleanup' EXIT
copy_to_mount
copy_config
unmount_root_image
create_output
