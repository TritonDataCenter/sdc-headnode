#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2023 MNX Cloud, Inc.
#

#
# This script is to test password escaping done by scripts/prompt-config.sh
# It is not used by Triton itself, just to prove that the logic in
# prompt-config.sh is correct.
#
# Run this script to interactively enter a password with whatever crazy
# characters that shouldn't be in passwords to see how it works out.
#
# For the root (Unix) password we hand that directly over to cryptpass and
# only ever store the hash in the config.
#
# For the UFDS admin password we store the bare password in the config and it
# needs to be read/parsed by `ufds-reconcile-data` in the sdc-ufds repo to
# generate the bootstrap LDIF file so we need to make sure that we can get
# back out exactly what the user put in.
#
# Q: Why bother with all this escaping? Why not just base64 encode it in the
#    config so that it doesn't matter?
# A: After b64 decoding it you still need to parse the string into a variable
#    value that will be guaranteed to be correct in consuming scripts, which
#    means that it needs to be properly escaped before being base64 encoded
#    anyway.
#

#
# How this works:
#
# 1. read -r will escape special characters, and set IFS='' to preserve
#    leading/trailing whitespace.
#    Things like | will become \| and \ will become \\
# 2. This is written to /usbkey/config *without* *quotes*. The string has
#    already been escaped properly and needs to be evaluated as-is later.
# 3. The /usbkey/config is parsed by /lib/sdc/config.sh. It is now unescaped.
# 4. /lib/sdc/config.sh needs to output JSON that can be parsed bo JavaScript.
# 5. ufds-reconcile-data process a template to produce an LDIF file that is
#    given to UFDS. Because there may be special characters here we need to
#    base64 encode the value in the LDIF file.
#

#=============================================================================

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

config=$(mktemp)

# part 1
if [[ -n $1 ]]; then
    p_pass="$1"
else
    IFS='' read -p 'Enter pass: ' -r p_pass
fi
printf 'You entered: >%s<\n' "$p_pass"

# part 2
printf 'pass=%q\n' "${p_pass}" > "$config"
printf '\nconfig file contents:\n'
printf '====================================================\n'
cat "$config"
printf '====================================================\n'

# part 3
# shellcheck disable=SC1090
source "$config"
printf 'Password read from config: >%s<\n' "$pass"

# part 4
printf '\nJSON stringified\n'
printf '====================================================\n'
j_val="$(pass="$pass" node -e 'console.log(JSON.stringify(process.env["pass"]))')"
printf '{"pass":%s}\n' "$j_val" | json
printf '====================================================\n'
printf 'JSON parsed: '
printf '>%s<\n' "$(printf '{"pass":%s}\n' "$j_val" | json pass)"

# part 5
b64_pass=$(printf '%s' "$pass" | base64)
pass=$(printf "%q" "$pass")
# shellcheck disable=SC2086
printf '\nLDIF file contents:\n'
printf '====================================================\n'
sed -e "s|ABC|${b64_pass}|" << EOF
userpassword:: ABC
EOF
printf '====================================================\n'

printf 'Decoded base64 password: >%s<\n' "$(base64 -d <<< "$b64_pass")"

# Clean up the temp file
rm -f "${config:?}"
