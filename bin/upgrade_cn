#!/bin/bash
#
# Copyright (c) 2012, Joyent Inc., All rights reserved.
#
# SUMMARY
#
# This compute node upgrade script is delivered inside the upgrade image, so
# this script is from the latest build.  During headnode upgrade it is copied
# to the assets zone so that compute nodes can upgrade themselves using
# sdc-upgrade after the headnode upgrade has completed.
#

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin:/smartdc/bin
export PATH

export SDC_UPGRADE_DIR=/var/tmp/upgrade

# This writes xtrace output and anything redirected to LOGFD to the log file.
LOGFD=4
exec 4>$SDC_UPGRADE_DIR/upgrade_log.$$
export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export BASH_XTRACEFD=${LOGFD}
set -o xtrace

function cleanup
{
	[ -e $conf_bak ] && mv $conf_bak /opt/smartdc/config/node.config
}

# We have to use curl directly here since sdc-setup -D only runs on the HN.
function delete_sdc_zones
{
	local creds="admin:$CONFIG_mapi_http_admin_pw"
	local mapi=$CONFIG_mapi_admin_ip

	for zone in $ZONE_LIST
	do
		echo "    $zone"
		curl -i -s -u $creds http://${mapi}/zones/$zone -X DELETE \
		    >/tmp/sdc$$.out 2>&1

		check_mapi_err
		if [ -n "$emsg" ]; then
			printf "Error: deleting zone %s\n" $zone >/dev/stderr
			printf "       %s\n" "$emsg" >/dev/stderr
			rm -f /tmp/sdc$$.out
			continue
		fi
		rm -f /tmp/sdc$$.out

		wait_for_done "Warning: deleting zone $zone timed out"
	done
}

# Make sure we have a new enough /usr/node_modules
[ ! -e /usr/node_modules/system.js ] && \
    fatal "You must reboot the system on the latest image to upgrade."

# Make sure we have a sdc-setup that supports reprovisioning on CNs
sdc-setup -R >/dev/null 2>&1
[ $? != 0 ] && \
    fatal "You must reboot the system on the latest image to upgrade."

HEADNODE=0

# We can use the functions here since we know we are already running an
# image that has these.
. /smartdc/lib/sdc-common

. /lib/sdc/config.sh
load_sdc_sysinfo
load_sdc_config

# $SDC_UPGRADE_DIR was created by the sdc-upgrade command and we're running
# this script from there.

cd $SDC_UPGRADE_DIR

# Pull over the common code and source it in
curl -k -o upgrade_common -s \
    $CONFIG_assets_admin_ip:/extra/upgrade/upgrade_common
hd=$(dd if=$SDC_UPGRADE_DIR/upgrade_common bs=1 count=6 2>/dev/null)
[ "$hd" == "<html>" ] && fatal "Missing upgrade_common file"
. $SDC_UPGRADE_DIR/upgrade_common

upgrade_pools
upgrade_zfs_datasets

get_sdc_zonelist
if [ -z "$ROLE_LIST" ]; then
	echo "No zones to upgrade"
	exit 0
fi

curl -k -o config -s $CONFIG_assets_admin_ip:/extra/upgrade/config
hd=$(dd if=$SDC_UPGRADE_DIR/config bs=1 count=6 2>/dev/null)
[ "$hd" == "<html>" ] && fatal "Missing config file"

conf_bak=/opt/smartdc/config/node.config.bak
trap cleanup EXIT

# Save the CN config, use the remote one we just pulled instead
cp /opt/smartdc/config/node.config $conf_bak
cp config /opt/smartdc/config/node.config

# Reload config values with the data we just pulled over
load_sdc_config

# Make sure we can talk to MAPI
curl -s -u admin:$CONFIG_mapi_http_admin_pw \
    http://$CONFIG_mapi_admin_ip/servers >/tmp/sdc$$.out 2>&1
check_mapi_err
rm -f /tmp/sdc$$.out
[ -n "$emsg" ] && fatal "MAPI API is not responding"

shutdown_non_core_zones

# Run full backup then unpack the backup archive.
echo "Creating a backup"
sdc-backup -d $SDC_UPGRADE_DIR
bfile=`ls $SDC_UPGRADE_DIR/backup-* 2>/dev/null`
[ -z "$bfile" ] && fatal "unable to make a backup"

mkdir $SDC_UPGRADE_DIR/bu.tmp
(cd $SDC_UPGRADE_DIR/bu.tmp; gzcat $bfile | tar xbf 512 -)

echo "Cleaning up existing zones"
delete_sdc_zones
# Wait a bit for zone deletion to finish
sleep 10

recreate_extra_zones

cd /
mkdir -p /var/tmp/upgrade_save
cp $SDC_UPGRADE_DIR/upgrade_log.$$ /tmp
tar cbf 512 - tmp/*log*  | \
    gzip >/var/tmp/upgrade_save/logs.$(date -u +%Y%m%dT%H%M%S).tgz

message="
The compute node has been upgraded. You should reboot the system for the
upgrade to take effect.\n\n"
printf "$message"

exit 0
