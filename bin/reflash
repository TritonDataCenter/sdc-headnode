#!/bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#
#
# This tool is for reflashing an existing headnode with a new tar image.
#
# WARNING: This is a very dangerous tool! Do not point it at a host containing
# any data you want to keep!
#
#
# You can use:
#
# ./bin/reflash latest <host> [<identityfile>]
#
#    To install the latest master version from your build.spec.* bits-url
#
# ./bin/reflash release-XXXXX <host> [<identityfile>]
#
#    To install the latest release-XXXXX version from your build.spec.* bits-url
#
# ./bin/reflash boot-master-20120530T021716Z-gaba5e72.tgz <host> [<identityfile>]
#
#    To install a specific tar image you created with './bin/build-image tar'
#
# ./bin/reflash https://foo.host.com/path/to/whatever.tgz <host> [<identityfile>]
#
#    To install an image from a remote URL
#

if [[ -n "$TRACE" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
#set -o pipefail


ROOT=$(cd $(dirname $0)/../; pwd)

usage()
{
    cat <<EOF
Usage: $0 <filename|URL> <hostname>
EOF
    exit 1
}

if [[ $1 == "-F" ]]; then
    LIVE_DANGEROUSLY=1
    shift
fi
if [[ $1 == "-?" || $1 == "-h" ]]; then
    usage
fi

filename=$1
hostname=$2
identityfile=$3
bits_url=

SSH_OPTS=
if [[ -f "$identityfile" ]]; then
  SSH_OPTS="-i $identityfile"
fi

MD5_SUM=
if [[ $(uname -s) == "SunOS" ]]; then
    MD5_CMD="/usr/bin/sum -x md5"
elif [[ $(uname -s) == "Darwin" ]]; then
    MD5_CMD="md5 -q"
else
    echo "Unsupported platform $(uname -s)" >&2
    exit 2
fi

get_bits_url()
{
    if [[ -n ${bits_url} ]]; then
        echo ${bits_url}
        return 0
    fi

    bits_url="https://stuff.smartdatacenter.org/"

    if [[ -f "${ROOT}/build.spec" && -f "${ROOT}/build.spec.local" ]]; then
        MERGED_SPEC=$(${ROOT}/bin/json-merge ${ROOT}/build.spec \
        ${ROOT}/build.spec.local)
    elif [[ -f "${ROOT}/build.spec" ]]; then
        MERGED_SPEC=$(cat ${ROOT}/build.spec)
    elif [[ -f "${ROOT}/build.spec.local" ]]; then
        MERGED_SPEC=$(cat ${ROOT}/build.spec.local)
    fi

    spec_bits_url=$(echo ${MERGED_SPEC} | ${ROOT}/bin/json "bits-url")
    if [[ -n ${spec_bits_url} ]]; then
        bits_url=${spec_bits_url}
    fi

    if [[ ${bits_url:0:23} == "https://stuff.joyent.us" ]]; then
        echo "Adding auth to bits url from '~/.sdcbuild.json'." >&2
        if [[ ! -f "${HOME}/.sdcbuild.json" ]]; then
            echo "error: '~/.sdcbuild.json' does not exist" >&2
            exit 1
        fi
        username=$(cat ~/.sdcbuild.json | ${ROOT}/bin/json username)
        password=$(cat ~/.sdcbuild.json | ${ROOT}/bin/json password)
        bits_url=$(echo ${bits_url} | sed -e "s/\/\//\/\/${username}:${password}@/g")
    fi

    echo ${bits_url}
}

get_latest()
{
    release=$1
    bits_url=$(get_bits_url)

    if [[ $(echo ${release} | tr -d [0-9]) == "release-" ]]; then
        file=$(curl -f -s -k \
            ${bits_url}/sdc/${release}-latest/usbheadnode/ \
            | grep "href" | cut -d '"' -f2 | grep "^boot-")

        if [[ -n ${file} ]]; then
            echo "${bits_url}/sdc/${release}-latest/usbheadnode/${file}"
        fi
    else
        file=$(curl -f -sS -k \
            ${bits_url}/usbheadnodetar/master-latest/usbheadnode/ \
            | grep "href" | cut -d '"' -f2 | grep "^boot-")

        if [[ -n ${file} ]]; then
            echo "${bits_url}/usbheadnodetar/master-latest/usbheadnode/${file}"
        fi
    fi
}

get_md5()
{
    release=$1
    file=$2
    bits_url=$(get_bits_url)

    if [[ $(echo ${release} | tr -d [0-9]) == "release-" ]]; then
        md5=$(curl -f -s -k ${bits_url}/sdc/${release}-latest/md5sums.txt \
            | grep "${file}" | cut -d ' ' -f1)

        if [[ -n ${md5} ]]; then
            echo "${md5}"
        fi
    else
        md5=$(curl -f -sS -k ${bits_url}/usbheadnode/master-latest/md5sums.txt \
            | grep "${file}" | cut -d ' ' -f1)

        if [[ -n ${md5} ]]; then
            echo "${md5}"
        fi
    fi
}

if [[ -z ${filename} || -z ${hostname} || -n $4 ]]; then
    usage
fi

URL=
FILENAME=
if [[ ${filename} == "latest" ]]; then
    echo "Finding latest usbheadnode build..."
    URL=$(get_latest)
    if [[ -z ${URL} ]]; then
        echo "Failed to find latest from ${URL}!" >&2
        exit 1
    fi
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 "latest" "${FILENAME}")
    echo "Latest is ${URL}..."
elif [[ $(echo ${filename} | tr -d [0-9]) == "release-" ]]; then
    echo "Finding latest ${filename} usbheadnode build..."
    URL=$(get_latest ${filename})
    if [[ -z ${URL} ]]; then
        echo "Failed to find latest ${filename} from ${URL}!" >&2
        exit 1
    fi
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 "${filename}" "${FILENAME}")
    echo "Latest ${filename} is ${URL}..."
elif [[ ${filename} =~ "^http" ]]; then
    URL=${filename}
    echo "Using URL ${URL}..."
    FILENAME=$(basename ${URL})
elif [[ ! -f ${filename} ]]; then
    usage
else
    echo "Attempting upload..."
    scp ${filename} root@${hostname}:/var/tmp
    FILENAME=$(basename ${filename})
    MD5_SUM=$(${MD5_CMD} ${filename} | cut -d ' ' -f1)
fi

if [[ -z ${LIVE_DANGEROUSLY} ]]; then
cat <<EOF

 *** WARNING ***

This is about to attempt flash the machine '${hostname}' without any further
confirmation if this is not what you want to do:

 PRESS CTRL-C NOW!

All data on the specified machine will be destroyed. Including potential
customer data!

 *** WARNING ***

EOF

for i in {9..1}; do
    printf "Starting flash in %d seconds...   \r" ${i}
    sleep 1
done

echo "Continuing!                                "
fi

set +o errexit
ssh $SSH_OPTS -T root@${hostname} <<EOF
set -o errexit

# Turn on DNS since we might need it
echo "Enabling DNS..."
sed -i "" "s/^hosts:.*/hosts:      files mdns dns/" /etc/nsswitch.conf

# XXX this is a hack to figure out if we're in the bh1 lab (assume we are if
# the IP is 10.2.X.X) so that we can switch the stuff url to an IP because the
# URL doesn't work in the lab.
URL="${URL}"
if [[ \$(sysinfo -p | grep "^Network_Interface.*IPv4_Address=" \
    | cut -d "'" -f2 | grep 10\.2\. | wc -l | tr -d ' ') -gt 0 ]]; then

    # assume we're in the lab
    echo "Running in BH1, fixing URL..."
    URL=\$(echo "\${URL}" | sed -e "s/stuff.joyent.us/10.2.0.190/")
fi

# Make sure we've got our file
if [[ ! -f "/var/tmp/${FILENAME}" ]]; then
    echo "Downloading \${URL}"
    curl -f -k -o /var/tmp/${FILENAME} \${URL}
    if [[ ! -f "/var/tmp/${FILENAME}" ]]; then
        echo "FAILED to download image." >&2
        exit 1
    fi
fi

# Check MD5 of image
if [[ -n "${MD5_SUM}" ]]; then
    MD5=\$(/usr/bin/sum -x md5 /var/tmp/${FILENAME} | cut -d ' ' -f1)
    if [[ \${MD5} != "${MD5_SUM}" ]]; then
        echo "MD5 does not match." >&2
        exit 1
    fi
fi

# let everyone who might be logged in know
echo 'This system is being reimaged! ALL YOUR DATA ARE BELONG TO /dev/null.' \
    | wall

# mount the usb key
echo "Mounting USB key..."
/usbkey/scripts/mount-usb.sh

# Move these first so we only restore if they existed to start with
# keep them though in case there is a reflash failure.
timestamp=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")
mv /var/tmp/root.authorized_keys.flashing /var/tmp/root.authorized_keys.${timestamp} \
    || /bin/true
mv /var/tmp/answers.flashing /var/tmp/answers.${timestamp} || /bin/true
mv /var/tmp/devtools.flashing /var/tmp/devtools.${timestamp} || /bin/true

# Keep the answers.json if it exists
if [[ -f /mnt/usbkey/private/answers.json ]]; then
    echo "Saving answers.json..."
    cp /mnt/usbkey/private/answers.json /var/tmp/answers.flashing
fi

# Also keep root.authorized_keys if it exists
if [[ -f /mnt/usbkey/config.inc/root.authorized_keys ]]; then
    echo "Saving root.authorized_keys..."
    cp /mnt/usbkey/config.inc/root.authorized_keys \
        /var/tmp/root.authorized_keys.flashing
fi

# backup devtools
if [[ -d /mnt/usbkey/devtools ]]; then
     cp -RP /mnt/usbkey/devtools /var/tmp/devtools.flashing
fi

# Remove everything!
echo "Wiping /mnt/usbkey..."
rm -rf /mnt/usbkey/*

# copy devtools back (we'll unpack new ones over old ones but keep custom ones)
if [[ -d /var/tmp/devtools.flashing ]]; then
    cp -RP /var/tmp/devtools.flashing /mnt/usbkey/devtools
fi

# Unpack the image
# XXX there doesn't appear to be a way to disable these permission warnings on
# SmartOS tar. They occur because we're writing to pcfs which doesn't support
# the permissions from the tarball.
echo "Unpacking new image..."
(cd /mnt/usbkey && tar -zxf /var/tmp/${FILENAME}) 2>&1 \
     | sed -e "s/tar: warning - file permissions have changed for //" \
     | sed -e "s/ (are 0100.*, should be .*)$//"

# Restore the answers.json if we had one.
if [[ -f /var/tmp/answers.flashing ]]; then
    echo "Restoring answers.json..."
    mkdir -p /mnt/usbkey/private
    cp /var/tmp/answers.flashing /mnt/usbkey/private/answers.json
    rm -f /var/tmp/answers.flashing
fi

# Restore root.authorized_keys if we had one
if [[ -f /var/tmp/root.authorized_keys.flashing ]]; then
    echo "Restoring root.authorized_keys..."
    cp /var/tmp/root.authorized_keys.flashing \
        /mnt/usbkey/config.inc/root.authorized_keys
    rm -f /var/tmp/root.authorized_keys.flashing
fi

# Ensure we've got a platform + grub
if [[ ! -f /mnt/usbkey/boot/grub/menu.lst ]]; then
    echo "Missing grub menu.lst, bailing" >&2
    exit 1
fi
if [[ -z \$(find /mnt/usbkey/os/ -name "boot_archive") ]]; then
    echo "Missing boot_archive, bailing" >&2
    exit 1
fi

# This is what sdc-factoryreset does
echo "Performing factoryreset..."
SYS_ZPOOL=\$(svcprop -p config/zpool smartdc/init)
[[ -n \${SYS_ZPOOL} ]] || SYS_ZPOOL=zones
if zfs list zones/var > /dev/null; then
    zfs set smartdc:factoryreset=yes \${SYS_ZPOOL}/var
fi

# Good to go!
echo "Rebooting..."
(sleep 1; reboot -q)&

exit 0
EOF
retval=$?
set -o errexit

if [[ $retval == 0 ]]; then
    echo "Success! '${hostname}' should be running through setup shortly!"
    exit 0
else
    echo "Uh-oh! Something failed (retval=$retval), good luck fixing it!" >&2
    exit 2
fi
