#!/bin/bash
#
# Copyright (c) 2014 Joyent Inc., All rights reserved.
#
#
# This tool is for reflashing an existing headnode with a new tar image.
#
# WARNING: This is a very dangerous tool! Do not point it at a host containing
# any data you want to keep!
#
#
# You can use:
#
# ./bin/reflash latest <host> [<identityfile>]
#
#    To install the latest master version from your build.spec.* bits-url
#
# ./bin/reflash release-XXXXX <host> [<identityfile>]
#
#    To install the latest release-XXXXX version from your build.spec.*
#    reflash-proxy-url, will fall back to builds-proxy-url if not set
#

DEBUG=0

# need at least this much space to download the image and do a reflash
MIN_TMP_FREE=3200

if [[ -n "$TRACE" ]]; then
    # BASHSTYLED
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
#set -o pipefail


ROOT=$(cd $(dirname $0)/../; pwd)

usage()
{
    cat <<EOF
Usage: $0 [-p <proxy_url>] [-F] <filename|URL> <hostname>
EOF
    exit 1
}

if [[ $1 == "-?" ]]; then
    usage
fi

args=$(getopt Fh $*)
if [[ $? != 0 ]]; then
    usage
fi

for i in $*; do
    case $i in
        -F) LIVE_DANGEROUSLY=1; shift;;
    esac
done

filename=$1
hostname=$2
identityfile=$3
bits_url=

if [[ ${DEBUG} == 1 ]]; then
cat <<EOF
LIVE_DANGEROUSLY=${LIVE_DANGEROUSLY}
filename=${filename}
hostname=${hostname}
identityfile=${identityfile}
EOF
fi

SSH_OPTS="-A -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "
if [[ -f "$identityfile" ]]; then
  SSH_OPTS="${SSH_OPTS} -i $identityfile"
fi

MD5_SUM=
if [[ $(uname -s) == "SunOS" ]]; then
    MD5_CMD="/usr/bin/sum -x md5"
elif [[ $(uname -s) == "Darwin" ]]; then
    MD5_CMD="md5 -q"
else
    echo "Unsupported platform $(uname -s)" >&2
    exit 2
fi

add_bits_creds()
{
    bits_url=$1

    if [[ -n $(echo "${bits_url}" | grep "@") ]]; then
        # already have an @, assume password included
        echo ${bits_url}
        return;
    fi

    echo "Warning: adding credentials to ${bits_url} from ~/.sdcbuild.json" >&2

    username=$(cat ~/.sdcbuild.json | ${ROOT}/bin/json username)
    password=$(cat ~/.sdcbuild.json | ${ROOT}/bin/json password)

    if [[ -n ${username} && -n ${password} ]]; then
        bits_url=$(echo ${bits_url} \
                   | sed -e "s/\/\//\/\/${username}:${password}@/g")
    fi

    echo ${bits_url}
}

get_bits_url()
{
    if [[ -n ${bits_url} ]]; then
        echo ${bits_url}
        return 0
    fi

    if [[ -f "${ROOT}/build.spec" && -f "${ROOT}/build.spec.local" ]]; then
        MERGED_SPEC=$(${ROOT}/bin/json-merge ${ROOT}/build.spec \
        ${ROOT}/build.spec.local)
    elif [[ -f "${ROOT}/build.spec" ]]; then
        MERGED_SPEC=$(cat ${ROOT}/build.spec)
    elif [[ -f "${ROOT}/build.spec.local" ]]; then
        MERGED_SPEC=$(cat ${ROOT}/build.spec.local)
    fi

    spec_bits_url=$(echo ${MERGED_SPEC} | ${ROOT}/bin/json "reflash-proxy-url")
    if [[ -n ${spec_bits_url} ]]; then
        bits_url=${spec_bits_url}
    else
        spec_bits_url=$(echo ${MERGED_SPEC} \
                        | ${ROOT}/bin/json "builds-proxy-url")
        if [[ -n ${spec_bits_url} ]]; then
            bits_url=${spec_bits_url}
        fi
    fi

    if [[ -z ${bits_url} ]]; then
        echo "Unable to determine bits_url, check that reflash-proxy-url or" \
            " builds-proxy-url in build.spec.local" >&2
        exit 2
    fi

    bits_url=$(add_bits_creds ${bits_url})

    echo ${bits_url}
}

get_latest()
{
    release=$1
    bits_url=$(get_bits_url)

    suffix=

    [[ -z ${release} ]] && release="master"
    if [[ ${release} == "-debug" ]]; then
        release="master"
        suffix="-debug"
    fi

    if [[ $(echo ${release} | tr -d [0-9]) == "release-" ]]; then
        dir=$(curl -f -s -k \
            ${bits_url}/sdc/${release}-latest \
            | sed -e "s|^.*/stor/builds/||")
        file=$(curl -f -s -k ${bits_url}/${dir}/usbheadnode${suffix}/ \
            | grep "href" | cut -d '"' -f2 | grep "^usb-" | grep ".tgz$")

        if [[ -n ${file} ]]; then
            echo "${bits_url}/${dir}/usbheadnode${suffix}/${file}"
        fi
    else
        dir=$(curl -f -sS -k \
            ${bits_url}/usbheadnode${suffix}/${release}-latest \
            | sed -e "s|^.*/stor/builds/||")
        file=$(curl -f -sS -k \
            ${bits_url}/${dir}/usbheadnode${suffix}/ \
            | grep "href" | cut -d '"' -f2 | grep "^usb-" | grep ".tgz$")
        if [[ -n ${file} ]]; then
            echo "${bits_url}/${dir}/usbheadnode${suffix}/${file}"
        fi
    fi
}

get_md5()
{
    release=$1
    file=$2
    url=$(dirname $3)
    bits_url=$(get_bits_url)

    md5=$(curl -f -s -k ${url}/../md5sums.txt | grep "${file}" | cut -d ' ' -f1)

    if [[ -z ${md5} ]]; then
        echo "Unable to find MD5 in ${url}/md5sums.txt" >&2
        exit 2
    fi

    echo "${md5}"
}

if [[ -z ${filename} || -z ${hostname} || -n $4 ]]; then
    usage
fi

# BASHSTYLED
echo "NOTE: If you're prompted for Password:, you need the current root password of ${hostname}"

echo "Attempting to set SSH keys"
ssh $SSH_OPTS -T root@${hostname} <<EOF
if [[ ! -f /root/.ssh/authorized_keys ]]; then
    mkdir -p /root/.ssh
    ssh-add -L > /root/.ssh/authorized_keys
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/authorized_keys
fi
EOF

MISSING_POOL=
# BASHSTYLED
if [[ $(ssh $SSH_OPTS root@${hostname} "zpool list") == "no pools available" ]]; then
    echo "No pool on remote host, applying countermeasures."
    MISSING_POOL="true"
fi

# If we have no pool, use /tmp instead of /var/tmp because /var/tmp will
# be in the ramdisk and /tmp should be bigger.
WHICH_TMP="/var/tmp"
if [[ -n ${MISSING_POOL} ]]; then
    WHICH_TMP="/tmp"
fi

TMP_FREE=$(ssh ${SSH_OPTS} root@${hostname} \
    "echo \$((\$(df -b ${WHICH_TMP} | tail -1 | awk '{ print \$2 }') / 1000))")
if [[ -z ${TMP_FREE} ]]; then
    echo "Unable to find free space in ${WHICH_TMP} on ${hostname}" >&2
    exit 1
fi
if [[ ${TMP_FREE} -lt ${MIN_TMP_FREE} ]]; then
    # BASHSTYLED
    echo "Not enough space in ${WHICH_TMP} to start reflash, you must fix before continuing." >&2
    echo "Have: ${TMP_FREE} Need: ${MIN_TMP_FREE}"
    exit 1
fi

URL=
FILENAME=
if [[ ${filename} == "latest" ]]; then
    echo "Finding latest usbheadnode build..."
    URL=$(get_latest)
    if [[ -z ${URL} ]]; then
        echo "Failed to find latest from ${URL}!" >&2
        exit 1
    fi
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 "latest" "${FILENAME}" "${URL}")
    echo "Latest is ${URL}..."
elif [[ ${filename} == "latest-debug" ]]; then
    echo "Finding latest usbheadnode-debug build..."
    URL=$(get_latest -debug)
    if [[ -z ${URL} ]]; then
        echo "Failed to find latest from ${URL}!" >&2
        exit 1
    fi
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 "latest-debug" "${FILENAME}" "${URL}")
    echo "Latest (debug) is ${URL}..."
elif [[ $(echo ${filename} | tr -d [0-9]) == "release-" ]]; then
    echo "Finding latest ${filename} usbheadnode build..."
    URL=$(get_latest ${filename})
    if [[ -z ${URL} ]]; then
        echo "Failed to find latest ${filename} from ${URL}!" >&2
        exit 1
    fi
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 "${filename}" "${FILENAME}" "${URL}")
    echo "Latest ${filename} is ${URL}..."
elif [[ "${filename:0:4}" == "http" ]]; then
    URL=$(add_bits_creds ${filename})
    echo "Using URL ${URL}..."
    FILENAME=$(basename ${URL})
    MD5_SUM=$(get_md5 $(basename ${URL}) $(basename ${URL}) ${URL})
elif [[ ! -f ${filename} ]]; then
    usage
else
    echo "Attempting upload..."
    scp ${filename} root@${hostname}:${WHICH_TMP}
    FILENAME=$(basename ${filename})
    MD5_SUM=$(${MD5_CMD} ${filename} | cut -d ' ' -f1)
fi

if [[ -z ${LIVE_DANGEROUSLY} ]]; then
cat <<EOF

 *** WARNING ***

This is about to attempt flash the machine '${hostname}' without any further
confirmation if this is not what you want to do:

 PRESS CTRL-C NOW!

All data on the specified machine will be destroyed. Including potential
customer data!

 *** WARNING ***

EOF

for i in {9..1}; do
    printf "Starting flash in %d seconds...   \r" ${i}
    sleep 1
done

echo "Continuing!                                "
fi

set +o errexit
# BEGIN BASHSTYLED
ssh $SSH_OPTS -T root@${hostname} <<EOF
set -o errexit
if [[ -n "${TRACE}" ]]; then
    set -o xtrace
fi

# Turn on DNS since we might need it
echo "Enabling DNS..."
sed -i "" "s/^hosts:.*/hosts:      files mdns dns/" /etc/nsswitch.conf

# XXX this is a hack to figure out if we're in the bh1 lab (assume we are if
# the IP is 10.2.X.X) so that we can switch the stuff/bits url to an IP
# because the URL doesn't work in the lab.
URL="${URL}"

done=0
retries=3
while [[ \${done} == 0 && \${retries} -gt 0 ]]; do

    # Make sure we've got our file
    if [[ ! -f "${WHICH_TMP}/${FILENAME}" ]]; then
        echo "Downloading \${URL}"
        curl -k -o ${WHICH_TMP}/${FILENAME} \${URL}
        if [[ ! -f "${WHICH_TMP}/${FILENAME}" ]]; then
            echo "FAILED to download image." >&2
            exit 1
        fi
    fi

    # Check MD5 of image
    if [[ -n "${MD5_SUM}" ]]; then
        MD5=\$(/usr/bin/sum -x md5 ${WHICH_TMP}/${FILENAME} | cut -d ' ' -f1)
        if [[ \${MD5} != "${MD5_SUM}" ]]; then
            echo "MD5 does not match, deleting..." >&2
            rm ${WHICH_TMP}/${FILENAME}
        else
            done=1
        fi
    fi

    if [[ \${done} == 0 ]]; then
        echo "Trying again in 2 seconds." >&2
        sleep 2
        retries=\$((\${retries} - 1))
    fi
done

if [[ \${done} != 1 ]]; then
    echo "Unable to get ${FILENAME}." >&2
    exit 1
fi

# let everyone who might be logged in know
echo \$(hostname)/\$(sysinfo | json UUID) 'is being reimaged! ALL YOUR DATA ARE BELONG TO /dev/null.' \
    | wall

MOUNT_SCRIPT="/usbkey/scripts/mount-usb.sh"
if [[ ! -f \${MOUNT_SCRIPT} ]]; then
    MOUNT_SCRIPT="/mnt/usbkey/scripts/mount-usb.sh"
fi

# mount the usb key
echo "Mounting USB key..."
\${MOUNT_SCRIPT}

# Move these first so we only restore if they existed to start with
# keep them though in case there is a reflash failure.
timestamp=\$(TZ=UTC date "+%Y%m%dT%H%M%SZ")
mv ${WHICH_TMP}/root.authorized_keys.flashing ${WHICH_TMP}/root.authorized_keys.\${timestamp} \
    || /bin/true
mv ${WHICH_TMP}/answers.flashing ${WHICH_TMP}/answers.\${timestamp} || /bin/true
mv ${WHICH_TMP}/devtools.flashing ${WHICH_TMP}/devtools.\${timestamp} || /bin/true

# Keep the answers.json if it exists
if [[ -f /mnt/usbkey/private/answers.json ]]; then
    echo "Saving answers.json..."
    cp /mnt/usbkey/private/answers.json ${WHICH_TMP}/answers.flashing
fi

# Also keep root.authorized_keys if it exists
if [[ -f /mnt/usbkey/config.inc/root.authorized_keys ]]; then
    echo "Saving root.authorized_keys..."
    cp /mnt/usbkey/config.inc/root.authorized_keys \
        ${WHICH_TMP}/root.authorized_keys.flashing
fi

# backup devtools
if [[ -d /mnt/usbkey/devtools ]]; then
     cp -RP /mnt/usbkey/devtools ${WHICH_TMP}/devtools.flashing
fi

set -o xtrace
# We mounted above, check device now
USB_DEV=\$(mount -p | grep " /mnt/usbkey " | cut -d ' ' -f1 | sed -e "s|/dsk/|/rdsk/|" -e 's/:1\$//' -e 's/p1\$/p0/')
if [[ -z \${USB_DEV} ]]; then
    echo "Unable to determine USB device."
    exit 2
else
    echo "USB Device is: \${USB_DEV}"
fi

# unmount the key while we dd over it
umount -f /mnt/usbkey

#set +o errexit
# dd over it, using dirty hack to tell if we can have progress or not
if strings /usr/bin/dd | grep "bytes transferred"; then
    gtar --wildcards -zOxvf ${WHICH_TMP}/${FILENAME} usb-*.img \\
        | dtrace -q -w -n 'BEGIN {need_info=0;} tick-10s {need_info=1;} syscall:::entry /pid == \$target && need_info == 1/ {raise(SIGINFO); need_info=0;}' \\
        -c "/usr/bin/dd of=\${USB_DEV} bs=1024k"
else
    # no progress for you!
    gtar --wildcards -zOxvf ${WHICH_TMP}/${FILENAME} usb-*.img \\
        | /usr/bin/dd of=\${USB_DEV} bs=1024k
fi
#| dd of=\${USB_DEV} bs=1024k
#set -o errexit

# mount it again
\${MOUNT_SCRIPT}

# move new devtools out of way so we can drop in old first
if [[ -d /mnt/usbkey/devtools ]]; then
    mv /mnt/usbkey/devtools /mnt/usbkey/devtools.new
fi

# copy devtools back (we'll unpack new ones over old ones but keep custom ones)
if [[ -d ${WHICH_TMP}/devtools.flashing ]]; then
    cp -RP ${WHICH_TMP}/devtools.flashing /mnt/usbkey/devtools
fi

# write over devtools with old ones
if [[ ! -d /mnt/usbkey/devtools ]]; then
    mkdir /mnt/usbkey/devtools
fi
(cd /mnt/usbkey/devtools.new && tar -cpf - ./) \
    | (cd /mnt/usbkey/devtools && tar -xf -)
rm -rf /mnt/usbkey/devtools.new

# Restore the answers.json if we had one.
if [[ -f ${WHICH_TMP}/answers.flashing ]]; then
    echo "Restoring answers.json..."
    mkdir -p /mnt/usbkey/private
    cp ${WHICH_TMP}/answers.flashing /mnt/usbkey/private/answers.json
    rm -f ${WHICH_TMP}/answers.flashing
fi

# Restore root.authorized_keys if we had one
if [[ -f ${WHICH_TMP}/root.authorized_keys.flashing ]]; then
    echo "Restoring root.authorized_keys..."
    cp ${WHICH_TMP}/root.authorized_keys.flashing \
        /mnt/usbkey/config.inc/root.authorized_keys
    rm -f ${WHICH_TMP}/root.authorized_keys.flashing
fi

# Ensure we've got a platform + grub
if [[ ! -f /mnt/usbkey/boot/grub/menu.lst ]]; then
    echo "Missing grub menu.lst, bailing" >&2
    exit 1
fi
if [[ -z \$(find /mnt/usbkey/os/ -name "boot_archive") ]]; then
    echo "Missing boot_archive, bailing" >&2
    exit 1
fi

if [[ ! -d /mnt/usbkey/zones/mapi ]]; then
    # Set default to 1 so we can boot unattended (we know this is a HN and flashing to 7)
    sed -e "s/^default.*$/default 1/" /mnt/usbkey/boot/grub/menu.lst \
        > /mnt/usbkey/boot/grub/menu.lst.new \
        && mv /mnt/usbkey/boot/grub/menu.lst.new /mnt/usbkey/boot/grub/menu.lst
fi

# This is what sdc-factoryreset does
echo "Performing factoryreset..."
SYS_ZPOOL=\$(svcprop -p config/zpool smartdc/init)
[[ -n \${SYS_ZPOOL} ]] || SYS_ZPOOL=zones
if zfs list zones/var > /dev/null; then
    zfs set smartdc:factoryreset=yes \${SYS_ZPOOL}/var
fi

# Good to go!
echo "Rebooting..."
(sleep 10; reboot -q)&

exit 0
EOF
# END BASHSTYLED
retval=$?
set -o errexit

if [[ $retval == 0 ]]; then
    # BASHSTYLED
    echo "Success at $(date '+%Y-%m-%dT%H:%M:%SZ')! '${hostname}' should be running through setup shortly!"
    exit 0
else
    echo "Uh-oh! Something failed (retval=$retval), good luck fixing it!" >&2
    exit 2
fi
