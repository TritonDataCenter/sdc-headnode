#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#
#
# This tool is for reflashing an existing headnode with a new tar image. There
# are 2 basic modes:
#
# 1) reflash from Manta (either latest master, or specific release)
#
# 2) reflash from a local tar image created with `make tar` at the top-level of
#    sdc-headnode.
#
#
# ****************************************************************************
# WARNING: This is a very dangerous tool! Do not point it at a host containing
# any data you want to keep!
# ****************************************************************************
#
#
# You can use:
#
# ./bin/reflash latest <host> [<identityfile>]
#
#    To install the latest master version (from Manta)
#
# ./bin/reflash release-XXXXX <host> [<identityfile>]
#
#    To install the latest release-XXXXX version (from Manta)
#
# ./bin/reflash /path/to/local.tgz <host> [<identityfile>]
#
#    To install from a tarball that exists locally.
#
# ./bin/reflash /path/to/remote.tgz <host> [<identityfile>]
#
#    To install from a tarball that exists on the remote <host> to be reflashed.
#
# ./bin/reflash https://example.com/path/to/some.tgz <host> [<identityfile>]
#
#    To install from a URL to a tarball. A HEAD request to this URL must
#    include a Content-MD5 header.
#
# In any case where a local tarball is not specified, the manta credentials from
# build.spec.* are used.
#
#
# The overall process looks like:
#
#  1) Ensure remote host has enough space, and we can login w/ SSH
#
#  2) Determine whether version or path specified
#
#  3) Get the MD5 of the tarball (from Manta or local)
#
#  4) Get the tarball onto the remote host
#     a) if path:
#         * scp file to remote host
#     b) if version:
#         * find latest image in Manta matching version
#         * msign the image from manta
#         * ssh to remote host and use curl to download file
#
#  5) Check MD5 of tarball on remote host, if doesn't match or download failed
#     retry by going back to previous step up to 3 times.
#
#  6) Mount the USB Key, backup some files (answers.json, root_authorized_keys,
#     devtools directory) then umount the USB Key.
#
#  7) Write over the existing USB Key (using dd)
#
#  8) Mount the new USB Key
#
#  9) Copy back backed up files
#
#  10) Do basic sanity checks (ensure we have grub and a platform)
#
#  11) Start a "factory reset", and reboot
#
#  12) Proclaim Success
#
# If there are any unexpected errors, the script will exit without continuing.
# It tries to be idempotent so that you should be able to re-run after any
# failure to try again after determining what went wrong.
#

ROOT=$(cd $(dirname $0)/../; pwd)
. "${ROOT}/buildtools/lib/common.sh"

DOWNLOAD_RETRIES=3
MIN_TMP_FREE=3200 # need at least this much space to download image and reflash
ROOT=$(cd $(dirname $0)/../; pwd)
SIGN_MINUTES=30 # minutes to msign Manta URLs for downloading
SSH_COMMON_OPTS="-o StrictHostKeyChecking=no"
SSH_COMMON_OPTS="${SSH_COMMON_OPTS} -o UserKnownHostsFile=/dev/null"
SSH_COMMON_OPTS="${SSH_COMMON_OPTS} -o LogLevel=error"
SSH_OPTS="-A"

if [[ -n "$TRACE" ]]; then
    # BASHSTYLED
    export PS4='[\D{%FT%TZ}] $(basename ${BASH_SOURCE}):${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}():} '
    set -o xtrace
fi
set -o errexit


add_identity()
{
    local identity_file

    identity_file=$1

    if [[ -n ${identity_file} && -f ${identity_file} ]]; then
        SSH_COMMON_OPTS="${SSH_COMMON_OPTS} -i ${identity_file}"
    fi
}

backup_usb_key()
{
    echo "# backing up usbkey files"

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit
        set -o pipefail

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

        /opt/smartdc/bin/sdc-usbkey mount >/dev/null || {
            echo "unable to mount USB key" >&2
            exit 1
        }

        # Keep the answers.json if it exists
        if [[ -f /mnt/usbkey/private/answers.json ]]; then
            echo "# saving answers.json..."
            cp /mnt/usbkey/private/answers.json ${WHICH_TMP}/answers.flashing
        fi

        # Also keep root.authorized_keys if it exists
        if [[ -f /mnt/usbkey/config.inc/root.authorized_keys ]]; then
            echo "# saving root.authorized_keys..."
            cp /mnt/usbkey/config.inc/root.authorized_keys \
                ${WHICH_TMP}/root.authorized_keys.flashing
        fi

        # backup devtools
        if [[ -d /mnt/usbkey/devtools ]]; then
            if [[ ! -e ${WHICH_TMP}/devtools.flashing ]]; then
                echo "# saving devtools..."
                cp -RP /mnt/usbkey/devtools ${WHICH_TMP}/devtools.flashing
            else
                echo "# WARN: skipping backup of devtools," \
                    "${WHICH_TMP}/devtools.flashing already exists."
            fi
        fi

        exit 0
EOF
}

check_prerequisites()
{
    local uname

    uname=$(uname -s)

    if [[ ${uname} == "SunOS" || ${uname} == "Darwin" ]]; then
        echo "# detected ${uname}"
    else
        fatal "Unsupported platform ${uname}"
    fi
}

check_user_sanity()
{
    local force
    local i

    force=$1

    if [[ ${force} != "1" ]]; then
        cat <<EOF

 *** WARNING ***

This is about to attempt flash the machine '${REMOTE_HOST}' without any further
confirmation if this is not what you want to do:

 PRESS CTRL-C NOW!

All data on the specified machine will be destroyed. Including potential
customer data!

 *** WARNING ***

EOF

        for i in {9..1}; do
            printf "Starting flash in %d seconds...   \r" ${i}
            sleep 1
        done

        echo "Continuing!                                "
    else
        echo "# WARN: skipping sanity pause as -F was provided"
    fi
}

download_attempt_to_remote()
{
    local download_target
    local remote_md5

    download_target="${WHICH_TMP}/usb-headnode-$$.tgz"

    echo "# attempting to download to ${download_target}"

    if [[ -n ${SOURCE_UPLOAD_FILE} ]]; then
        # we've got a local file, try to just scp it
        send_local_file "${SOURCE_UPLOAD_FILE}" "${download_target}"
    elif [[ -n ${SOURCE_REMOTE_FILE} ]]; then
        # the file is already there on the server to reflash, just use it
        remote_cp "${SOURCE_REMOTE_FILE}" "${download_target}"
    elif [[ -n ${SOURCE_URL} ]]; then
        # The file is an HTTPS URL, we'll curl it from the remote end.
        remote_download_url "${SOURCE_URL}" "${download_target}"
    elif [[ -n ${SOURCE_MANTA_FILE} ]]; then
        # we've got a manta file, msign it then curl
        remote_download_manta "${SOURCE_MANTA_FILE}" "${download_target}"
    else
        fatal "download_attempt_to_remote error: none of" \
            "SOURCE_UPLOAD_FILE, SOURCE_URL, or SOURCE_MANTA_FILE is set"
    fi

    # Now check whether MD5 matches ${SOURCE_MD5} or ${SOURCE_CONTENT_MD5}.
    if [[ -n "${SOURCE_MD5}" ]]; then
        remote_md5=$(get_remote_md5 "${download_target}")

        if [[ "${remote_md5}" != "${SOURCE_MD5}" ]]; then
            echo "# WARN: MD5 mismatch '${remote_md5}' != '${SOURCE_MD5}'"
            return 1
        fi
    elif [[ -n "${SOURCE_CONTENT_MD5}" ]]; then
        remote_md5=$(get_remote_content_md5 "${download_target}")

        if [[ "${remote_md5}" != "${SOURCE_CONTENT_MD5}" ]]; then
            echo "# WARN: MD5 mismatch '${remote_md5}'" \
                "!= '${SOURCE_CONTENT_MD5}'"
            return 1
        fi
    else
        fatal "download_attempt_to_remote error: neither of SOURCE_MD5" \
            "or SOURCE_CONTENT_MD5 is set"
    fi


    return 0
}

download_to_remote()
{
    local download_complete
    local retries_remaining

    download_complete=0
    retries_remaining=$((${DOWNLOAD_RETRIES} + 1))

    while [[ ${retries_remaining} -gt 0 && ${download_complete} -eq 0 ]]; do
        retries_remaining=$((${retries_remaining} - 1))
        if download_attempt_to_remote; then
            download_complete=1
        else
            echo "# WARN: failed download, retries remaining:" \
                "${retries_remaining}"
        fi
    done

    [[ retries_remaining -gt 0 ]] \
        || fatal "Unable to download after ${DOWNLOAD_RETRIES} attempts"
}

ensure_manta_tools()
{
    local my_tool

    for my_tool in mget mls mmd5 msign; do
        [[ -n $(which ${my_tool}) ]] \
            || fatal "Missing ${my_tool} in PATH. (hint: npm install manta -g)"
    done

    # Set the MANTA_* vars from the build.spec.*
    MANTA_USER=$(build_spec "manta-user")
    MANTA_URL=$(build_spec "manta-url")
    NEW_MANTA_KEY_ID=$(build_spec "manta-key-id")

    [[ -n ${MANTA_USER} ]] || fatal "build.spec.* missing 'manta-user'"
    [[ -n ${MANTA_URL} ]] || fatal "build.spec.* missing 'manta-url'"

    # If MANTA_KEY_ID is in environment, use that when none is specified since
    # we're not guaranteed to have one in build.spec.*.
    if [[ -n ${NEW_MANTA_KEY_ID} ]]; then
        MANTA_KEY_ID=${NEW_MANTA_KEY_ID}
    fi

    [[ -n ${MANTA_KEY_ID} ]] || fatal "build.spec.* missing 'manta-key-id'" \
        "and also not set in environment."

    export MANTA_USER MANTA_URL MANTA_KEY_ID
}

fatal()
{
    echo "FATAL: $*" >&2
    exit 2
}

get_local_md5()
{
    local filename
    local md5

    filename=$1

    md5=$(openssl dgst -md5 ${filename} | cut -d' ' -f2)

    [[ -n ${md5} ]] || fatal "Unable to determine MD5 of ${filename}"

    echo "${md5}"
}

get_url_content_md5()
{
    local url
    local content_md5

    url=$1

    content_md5=$(curl -sS --fail --head "${url}" \
        | grep -i '^Content-MD5:' \
        | tr -d '\r' \
        | awk '{print $2}')

    [[ -n ${content_md5} ]] \
        || fatal "HEAD request for '$url' did not include a Content-MD5 header"

    echo "${content_md5}"
}

get_manta_base_path()
{
    local manta_base_path

    manta_base_path=$(build_spec "joyent-manta-base-path")

    if [[ -z ${manta_base_path} ]]; then
        fatal "Unable to find manta_base_path, check that " \
            "joyent-manta-base-path is set in your build.spec or " \
            "build.spec.local"
    fi

    echo "${manta_base_path}"
}

get_manta_latest_release()
{
    local latest_dir
    local release
    local manta_base
    local manta_latest_path
    local manta_subdir

    latest_dir=
    release=$1
    manta_base=$(get_manta_base_path)
    manta_latest_path=
    manta_subdir="headnode-joyent"

    [[ -n ${release} ]] || release="master"
    [[ ${release} == "latest" ]] && release="master"

    manta_latest_path="${manta_base}/${manta_subdir}/${release}-latest"
    latest_dir=$(mget_stdout ${manta_latest_path})

    [[ -n ${latest_dir} ]] \
        || fatal "Unable to find directory in ${manta_latest_path}"

    latest_filename=$(mls ${latest_dir}/${manta_subdir} | grep "^usb-.*.tgz")

    [[ -n ${latest_filename} ]] \
        || fatal "Unable to find usb-*.tgz in ${latest_dir}/${manta_subdir}"

    echo "${latest_dir}/${manta_subdir}/${latest_filename}"
}

get_manta_md5()
{
    local manta_file
    local manta_md5

    local manta_file=$1

    manta_md5=$(mmd5 ${manta_file} | cut -d' ' -f1)

    [[ -n ${manta_md5} ]] \
        || fatal "Unable to find MD5 for ${manta_file} in Manta"

    echo "${manta_md5}"
}

get_remote_md5()
{
    local remote_filename
    local remote_md5

    remote_filename=$1

    remote_md5=$(ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} \
        "openssl dgst -md5 ${remote_filename}" | cut -d' ' -f2)

    [[ -n ${remote_md5} ]] \
        || fatal "Unable to determine MD5 of ${remote_filename}"

    echo "${remote_md5}"
}

get_remote_content_md5()
{
    local remote_filename
    local remote_md5

    remote_filename=$1

    remote_md5=$(ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} \
        "openssl dgst -md5 -binary ${remote_filename}" | base64)

    [[ -n ${remote_md5} ]] \
        || fatal "Unable to determine MD5 of ${remote_filename}"

    echo "${remote_md5}"
}

# Sets one of SOURCE_REMOTE_FILE, SOURCE_UPLOAD_FILE, SOURCE_URL, or
# SOURCE_MANTA_FILE depending on the source type. It also sets either SOURCE_MD5
# (a hex digest) or SOURCE_CONTENT_MD5 (a base64-encoded binary digest) for the
# source file.
identify_source()
{
    local source_spec

    source_spec=$1

    if [[ -f ${source_spec} ]]; then
        # source is a local file, record the md5
        SOURCE_UPLOAD_FILE=${source_spec}
        SOURCE_MD5=$(get_local_md5 ${source_spec})

        echo "# source ${SOURCE_UPLOAD_FILE} (MD5 ${SOURCE_MD5})"
    elif $(ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} \
            test -f ${source_spec}); then
        # Source is a remote file on the server to be reflashed.
        SOURCE_REMOTE_FILE=${source_spec}
        SOURCE_MD5=$(get_remote_md5 ${source_spec})

        echo "# source ${SOURCE_REMOTE_FILE} (MD5 ${SOURCE_MD5})"
    elif [[ "${source_spec:0:8}" == "https://" ]]; then
        # source is an HTTPS URL
        SOURCE_URL=${source_spec}
        SOURCE_CONTENT_MD5=$(get_url_content_md5 "${source_spec}")

        echo "# source ${SOURCE_URL} (Content-MD5 ${SOURCE_CONTENT_MD5})"
    else
        # from here out we'll need the manta tools, so ensure we've got them
        ensure_manta_tools

        # source is expected to be a manta target, e.g.:
        #
        #  latest
        #  release-20171231
        #
        SOURCE_MANTA_FILE=$(get_manta_latest_release ${source_spec})
        SOURCE_MD5=$(get_manta_md5 ${SOURCE_MANTA_FILE})

        echo "# source ${SOURCE_MANTA_FILE} (MD5 ${SOURCE_MD5})"
    fi
}

mget_stdout()
{
    local manta_path

    manta_path=$1

    mget -q ${manta_path}
}

msign_manta_file()
{
    local manta_file
    local sign_until
    local signed_url

    manta_file=$1
    sign_until=$(($(date +%s) + (60 * ${SIGN_MINUTES})))

    signed_url=$(msign -e ${sign_until} ${manta_file})

    [[ -n ${signed_url} ]] || fatal "Unable to sign Manta URL"

    echo "${signed_url}"
}

overwrite_usb_key()
{
    local download_target

    download_target="${WHICH_TMP}/usb-headnode-$$.tgz"

    echo "# overwriting usbkey"

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit
        set -o pipefail

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

	# We mounted above, derive the p0 device
        DISKPATTERN="^/dev/dsk/\\(.*\\)[ps][0-9]\\(:1\\)*"
        USB_DEV=\$(mount -p | grep "\$DISKPATTERN - /mnt/usbkey " | \\
            sed -e "s+\$DISKPATTERN .*+/dev/rdsk/\\1p0+")

        if [[ -z \${USB_DEV} ]]; then
            echo "FATAL: Unable to determine USB device." >&2
            exit 2
        else
            echo "# USB Device is: \${USB_DEV}"
        fi

        # unmount the key while we dd over it
        umount -f /mnt/usbkey

        # dd over it, using dirty hack to tell if we can have progress or not
        # but first, we need to decide if platform is new enough.
        if strings /usr/bin/dd | grep "bytes transferred"; then
            # BEGIN BASHSTYLED
            gtar --wildcards -zOxvf ${download_target} usb-*.img \\
                | dtrace -q -w -n 'BEGIN {need_info=0;} tick-10s {need_info=1;} syscall:::entry /pid == \$target && need_info == 1/ {raise(SIGINFO); need_info=0;}' \\
                -c "/usr/bin/dd of=\${USB_DEV} bs=1024k"
            # END BASHSTYLED
        else
            # no progress for you!
            gtar --wildcards -zOxvf ${download_target} usb-*.img \\
                | /usr/bin/dd of=\${USB_DEV} bs=1024k
        fi

        exit 0
EOF
}

remote_cp()
{
    local src
    local dst

    src=$1
    dst=$2

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} "cp ${src} ${dst}"
}

remote_download_url()
{
    local url
    local remote_target

    url=$1
    remote_target=$2

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} \
        "curl --fail -ko ${remote_target} '${url}'"
}

remote_download_manta()
{
    local manta_file
    local remote_target
    local signed_url

    manta_file=$1
    remote_target=$2

    signed_url=$(msign_manta_file "${manta_file}")

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} \
        "curl -ko ${remote_target} '${signed_url}'"
}

remote_factory_reset()
{
    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

        # This is what sdc-factoryreset does
        echo "# performing factory reset..."
        SYS_ZPOOL=\$(svcprop -p config/zpool smartdc/init)
        [[ -n \${SYS_ZPOOL} ]] || SYS_ZPOOL=zones
        if zfs list zones/var > /dev/null; then
            zfs set smartdc:factoryreset=yes \${SYS_ZPOOL}/var
        fi

        # Good to go!
        echo "Rebooting..."
EOF

    # Do the reboot separately because uadmin will kill our ssh connection and
    # therefore this always exits non-zero.
    set +o errexit
    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        # Because "reboot" is too simple for us
        uadmin 2 1
EOF
    set -o errexit
}

restore_usb_key()
{
    echo "# restoring usbkey"

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit
        set -o pipefail

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

        /opt/smartdc/bin/sdc-usbkey mount >/dev/null || {
            echo "unable to mount USB key" >&2
            exit 1
        }

        # move new devtools out of way so we can drop in old first
        if [[ -d /mnt/usbkey/devtools ]]; then
            mv /mnt/usbkey/devtools /mnt/usbkey/devtools.new
        fi

        # copy devtools back (we'll unpack new ones over old ones but keep
        # custom ones)
        if [[ -d ${WHICH_TMP}/devtools.flashing ]]; then
            cp -RP ${WHICH_TMP}/devtools.flashing /mnt/usbkey/devtools
        fi

        # write over devtools with new ones
        if [[ ! -d /mnt/usbkey/devtools ]]; then
            mkdir /mnt/usbkey/devtools
        fi

        if [[ -d /mnt/usbkey/devtools.new ]]; then
            (cd /mnt/usbkey/devtools.new && tar -cpf - ./) \
                | (cd /mnt/usbkey/devtools && tar -xf -)
            rm -rf /mnt/usbkey/devtools.new
        fi

        # Restore the answers.json if we had one.
        if [[ -f ${WHICH_TMP}/answers.flashing ]]; then
            echo "# restoring answers.json..."
            mkdir -p /mnt/usbkey/private
            cp ${WHICH_TMP}/answers.flashing /mnt/usbkey/private/answers.json
        fi

        # Restore root.authorized_keys if we had one
        if [[ -f ${WHICH_TMP}/root.authorized_keys.flashing ]]; then
            echo "# restoring root.authorized_keys..."
            cp ${WHICH_TMP}/root.authorized_keys.flashing \
                /mnt/usbkey/config.inc/root.authorized_keys
        fi

        exit 0
EOF
}

sanity_check_usb()
{
    echo "# sanity checking USB key"

    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

        if [[ -z \$(find /mnt/usbkey/os/ -name "boot_archive") ]]; then
            echo "Missing boot_archive, bailing" >&2
            exit 1
        fi

        #
        # Make sure to boot from USB, so we can boot unattended (we know this is
        # an HN since we're reflashing, so don't boot the CN image).
        #
        # sdc-usbkey might not be new enough for this; in that case, we know
        # we're using grub.
        #
        if ! /opt/smartdc/bin/sdc-usbkey set-variable \
	    ipxe false 2>/dev/null; then

            # Ensure we've got a platform + grub
            if [[ ! -f /mnt/usbkey/boot/grub/menu.lst ]]; then
                echo "Missing grub menu.lst, bailing" >&2
                exit 1
            fi

            sed -e "s/^default.*$/default 1/" /mnt/usbkey/boot/grub/menu.lst \
                > /mnt/usbkey/boot/grub/menu.lst.new \
                && mv /mnt/usbkey/boot/grub/menu.lst.new \
                    /mnt/usbkey/boot/grub/menu.lst
        fi

        exit 0
EOF
}

send_local_file()
{
    local local_file
    local remote_file

    local_file=$1
    remote_file=$2

    scp ${SSH_COMMON_OPTS} ${local_file} root@${REMOTE_HOST}:${remote_file}
}

setup_remote()
{
    local tmp_free

    echo "NOTE: If you're prompted for 'Password:', you need the current root" \
        "password of ${REMOTE_HOST}"

    echo "# attempting to set SSH keys"
    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} -T root@${REMOTE_HOST} <<EOF
        set -o errexit

        if [[ -n "$TRACE" ]]; then
            # BASHSTYLED
            export PS4='[\D{%FT%TZ}] \${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
            set -o xtrace
        fi

        if [[ ! -f /root/.ssh/authorized_keys ]]; then
            mkdir -p /root/.ssh
        fi

        ssh-add -L >> /root/.ssh/authorized_keys || /bin/true
        chmod 700 /root/.ssh
        chmod 600 /root/.ssh/authorized_keys

        exit 0
EOF

    WHICH_TMP="/var/tmp"
    if [[ $(ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} \
        root@${REMOTE_HOST} "zpool list") == "no pools available" ]]; then

        echo "# WARN: no pool on remote host, using /tmp instead of /var/tmp"
        WHICH_TMP="/tmp"
    fi

    tmp_free=$(ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} root@${REMOTE_HOST} \
        "echo \$((\$(df -b ${WHICH_TMP} | tail -1 \
            | awk '{ print \$2 }') / 1000))")

    if [[ -z ${tmp_free} ]]; then
        fatal "Unable to determine free space in ${WHICH_TMP} on ${REMOTE_HOST}"
    fi

    if [[ ${tmp_free} -lt ${MIN_TMP_FREE} ]]; then
        echo "Not enough space in ${WHICH_TMP} to start reflash, you must fix" \
            " before continuing." >&2
        fatal "have ${tmp_free} MB, need ${MIN_TMP_FREE} MB"
    fi
}

usage()
{
    local msg

    msg=$1

    if [[ -n $1 ]]; then
        echo "FATAL: $*" >&2
    fi

    cat >&2 <<EOF
Usage: $0 [options] <path|version> <hostname> [<identityfile>]

Options:

    -F

        Force reflash without prompt. Use at your own risk!

EOF
    exit 1
}

warn_remote_users() {
    # let everyone who might be logged in know
    ssh ${SSH_OPTS} ${SSH_COMMON_OPTS} root@${REMOTE_HOST} \
        "echo \$(hostname)/\$(sysinfo | json UUID) 'is being reimaged!" \
        "ALL YOUR DATA ARE BELONG TO /dev/null.' | wall"
}


# Coordinator

do_reflash()
{
    local source_spec
    local hostname
    local identity_file
    local force

    source_spec=$1
    hostname=$2
    identity_file=$3
    force=$4

    REMOTE_HOST=${hostname}

    check_user_sanity "${force}"
    check_prerequisites
    add_identity "${identity_file}"
    setup_remote
    identify_source "${source_spec}"
    download_to_remote
    warn_remote_users
    backup_usb_key
    overwrite_usb_key
    restore_usb_key
    sanity_check_usb
    remote_factory_reset

    echo "Success at $(date '+%Y-%m-%dT%H:%M:%SZ')! '${hostname}'" \
        "should be running through setup shortly!"
}


# Main

if [[ $1 == "-?" ]]; then
    usage
fi

args=$(getopt Fh $*)
if [[ $? != 0 ]]; then
    usage
fi

LIVE_DANGEROUSLY=0
for i in $*; do
    case $i in
        -F) LIVE_DANGEROUSLY=1; shift;;
    esac
done

if [[ ${DEBUG} == 1 ]]; then
cat <<EOF
force=${LIVE_DANGEROUSLY}
hostname=$2
identity_file=$3
source_spec=$1
EOF
fi

[[ -n $1 ]] || usage "<path|version> argument is required"
[[ -n $2 ]] || usage "<hostname> argument is required"

do_reflash "$1" "$2" "$3" ${LIVE_DANGEROUSLY}

exit 0
