#!/bin/bash
#
# Copyright (c) 2010 Joyent Inc., All rights reserved.
#
#
# WARNING: WIP. Actually, case-insensitivity on MacOsX is a problem.
# Images build this way have all the copied files without a dash on their names
# written to the image uppercased.
#
# Verified that this problem cannot be addressed using any variant of HFS+ to
# build & run the image, HFS+ Case Sensitive Journaled included.
# Next try: use either a UFS Image or a SSH mounted disk.

SUCMD='sudo'
MNT_DIR="/Volumes/USB-headnode.vmdk"
MD5CMD="md5 -r"
GZCAT=gzcat

function version
{
    echo "==> Building with variables from include-osx-vmware"
}

function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        # Ensure we've unmounted the disk
        fusepath=$(/sbin/mount|grep vmware-vmdkMounterTool|awk '{print $3}')
        if [ -n "$fusepath" ]; then
          ${SUCMD} diskutil umount force "$fusepath"
          # Let's be polite with the Mac umounting ...
          sleep 3
        fi
        CLEANED=1

        if [ $ERROR -eq 0 ]; then
            echo "==> Defragmenting VMDK"
            ${SUCMD} /Library/Application\ Support/VMware\ Fusion/vmware-vdiskmanager -d ${ROOT}/cache/USB-headnode.vmwarevm/USB-headnode.vmdk
        fi
    fi
    rm -rf /tmp/fs.*.$$
}

function unpack_image
{
    echo -n "==> Unpacking VMWare image... "
    rm -rf ${ROOT}/cache/USB-headnode.vmwarevm
    (cd ${ROOT}/cache && tar -jxvf ${ROOT}/vmware/USB-headnode.vmwarevm.tbz2)
    echo "done."
}

function mount_image
{
    echo -n "==> Mounting new VMWare image... "
    # Mount the disk as '/Volumes/USB-headnode.vmdk':
    # This is not linux, waiting for the volume to be mounted:
    ${SUCMD} open -a /Library/Application\ Support/VMWare\ Fusion/VMDKMounter.app ${ROOT}/cache/USB-headnode.vmwarevm/USB-headnode.vmdk
    sleep 5
    echo "done."
}

function add_manifests
{
    # build manifest of USB files + move in boot_archive manifest
    rm -f ${ROOT}/cache/usb_key.manifest
    (cd ${STAGE}/ && find . -type f -exec ${MD5CMD} {} \;) > ${ROOT}/cache/USB-headnode.vmwarevm/usb_key.manifest
    mv -f ${STAGE}/platform/i86pc/amd64/boot_archive.manifest ${ROOT}/cache/USB-headnode.vmwarevm/boot_archive.manifest
    chmod 444 ${ROOT}/cache/USB-headnode.vmwarevm/boot_archive.manifest ${ROOT}/cache/USB-headnode.vmwarevm/usb_key.manifest
}

function create_output
{
    echo "==> Checking current GIT branch"
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}

    if [[ "$branch_name" != "master" ]]; then
      output_version="${branch_name}-${LIVEIMG_VERSION}"
    else
      output_version="${LIVEIMG_VERSION}"
    fi

    echo "==> Creating coal-147-${output_version}.tgz"
    (cd ${ROOT}/cache \
        && ${SUCMD} chown -R ${USER} USB-headnode.vmwarevm \
        && tar -zcf ${ROOT}/coal-147-${output_version}.tgz USB-headnode.vmwarevm)
}

