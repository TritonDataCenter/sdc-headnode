#!/bin/bash
#
# Copyright (c) 2010,2011 Joyent Inc., All rights reserved.
#

# sudo is no longer required on OSX
SUCMD=''
MD5CMD="md5 -r"
GZCAT=gzcat
TAR=tar
IMG_TYPE="usb"
USB_SIZE="4gb"
OUTPUT_IMG="${USB_SIZE}.img"
TEMPLATE_IMG="${OUTPUT_IMG}.tgz"
SUDO_PROMPT="[sudo] Password: "; export SUDO_PROMPT

function can_has_internets
{
    if ping -o -c 5 8.8.8.8 >/dev/null 2>&1 \
        || ping -o -c 5 4.2.2.1 >/dev/null 2>&1; then

        return 0
    fi
    return 1
}

function version
{
    echo "==> Building with variables from include-osx-usb"
}

function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        CLEANED=1
        if [[ -n ${IMG_DEV} ]]; then
            hdiutil detach ${IMG_DEV}
            IMG_DEV=
            MNT_DIR=
        fi
    fi
    rm -rf /tmp/fs.*.$$
    rm -rf /tmp/output.*.$$
}

function unpack_image
{
    echo -n "==> Unpacking USB image... "
    rm -f ${ROOT}/cache/${TEMPLATE_IMG}
    (cd ${ROOT}/cache && ${TAR} -zxf ${ROOT}/usb/${TEMPLATE_IMG}) \
        || fatal "Unable to unpack USB image"
    echo "done."
}

function mount_image
{
    echo -n "==> Mounting new USB image... "
    [ ! -d ${ROOT}/cache/tmp_volumes ] && mkdir -p ${ROOT}/cache/tmp_volumes
    hdiutil attach ${ROOT}/cache/${OUTPUT_IMG} \
        >/tmp/output.hdiattach.$$ -mountrandom ${ROOT}/cache/tmp_volumes 2>&1
    IMG_DEV=`grep "FDisk_partition_scheme" /tmp/output.hdiattach.$$ \
        | awk '{ print $1 }'`
    MNT_DIR=`grep "Windows_FAT_32" /tmp/output.hdiattach.$$ \
        | awk '{ print $3 }'`
    echo "(${IMG_DEV} mounted on ${MNT_DIR}) done."
}

function create_output
{
    echo "==> Checking current GIT branch"
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" \
        || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}

    if [[ -n ${MNT_DIR} ]]; then
        hdiutil detach ${MNT_DIR} || /usr/bin/true
        sync; sync
        IMG_DEV=
        MNT_DEV=
    fi

    if [[ -f ${STAGE}/private/root.password.${LIVEIMG_VERSION} ]]; then
        echo "==> Copying root.password.${LIVEIMG_VERSION}"
        rm -f ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
        cp ${STAGE}/private/root.password.${LIVEIMG_VERSION} \
            ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
        chmod 400 ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
    else
	    rm -f ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
    fi

    if [[ -z ${BUILD_TGZ} ]] || [[ ${BUILD_TGZ} != "false" ]]; then
        echo "==> Creating usb-${THIS_BUILDSTAMP}.tgz"
        (cd ${ROOT}/cache \
            && mv ${OUTPUT_IMG} usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
            && ${TAR} -zcf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
            root.password.${LIVEIMG_VERSION} usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
    else
        mv ${ROOT}/cache/${OUTPUT_IMG} usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG}
    fi
}
