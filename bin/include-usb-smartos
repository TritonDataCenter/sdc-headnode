#!/bin/bash
#
# Copyright (c) 2010,2011 Joyent Inc., All rights reserved.
#

SUCMD='pfexec'
MD5CMD="md5sum"
GZCAT=gzcat
GREP=ggrep
TAR=gtar
IMG_TYPE="usb"
USB_SIZE="4gb"
OUTPUT_IMG="${USB_SIZE}.img"
TEMPLATE_IMG="${OUTPUT_IMG}.tgz"
if [[ -z $IMG_TMP_DIR ]]; then
	IMG_TMP_DIR=/tmp
fi
function can_has_internets
{
    if ping 8.8.8.8 64 3 >/dev/null 2>&1 \
        || ping 4.2.2.1 64 3 >/dev/null 2>&1; then

        return 0
    fi
    return 1
}

function version
{
    echo "==> Building with variables from include-usb-smartos"
}

function cleanup
{
    if [ ${CLEANED} -eq 0 ]; then
        echo '==> Cleaning up'
        CLEANED=1
        if [[ -n ${IMG_DEV} ]]; then
            hdiutil detach ${IMG_DEV}
            IMG_DEV=
        fi
    fi
    rm -rf $IMG_TMP_DIR/fs.*.$$
    rm -rf $IMG_TMP_DIR/output.*.$$
}

function unpack_image
{
    echo -n "==> Unpacking USB image... "
    [[ -f $IMG_TMP_DIR/${OUTPUT_IMG}.$$ ]] \
        && rm -f $IMG_TMP_DIR/${OUTPUT_IMG}.$$
    (cd $IMG_TMP_DIR && ${TAR} -zxf ${ROOT}/usb/${TEMPLATE_IMG} \
        && mv ${OUTPUT_IMG} ${OUTPUT_IMG}.$$) \
        || fatal "Unable to unpack USB image"
    echo "done."
}

function mount_image
{
    echo -n "==> Mounting new USB image... "
    MNT_DIR=/mnt/tmp
    ${SUCMD} mkdir -p ${MNT_DIR}
    LOOPBACK=$(${SUCMD} lofiadm -a $IMG_TMP_DIR/${OUTPUT_IMG}.$$)
    ${SUCMD} mount -F pcfs -o foldcase ${LOOPBACK}:c ${MNT_DIR}
    echo "(${IMG_DEV} mounted on ${MNT_DIR}) done."
}

function create_output
{
    echo "==> Checking current GIT branch"
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" \
        || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}

    if [[ -n ${MNT_DIR} ]]; then
        ${SUCMD} umount ${MNT_DIR} || /usr/bin/true
        ${SUCMD} lofiadm -d ${LOOPBACK}
        sync; sync
    fi

    if [[ -f ${STAGE}/private/root.password.${LIVEIMG_VERSION} ]]; then
        echo "==> Copying root.password.${LIVEIMG_VERSION}"
        rm -f ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
        cp ${STAGE}/private/root.password.${LIVEIMG_VERSION} ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
        chmod 400 ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
    else
        rm -f ${ROOT}/cache/root.password.${LIVEIMG_VERSION}
    fi

    if [[ -z ${BUILD_TGZ} ]] || [[ ${BUILD_TGZ} != "false" ]]; then
        echo "==> Creating usb-${THIS_BUILDSTAMP}.tgz"
        (cd ${ROOT}/cache \
            && mv $IMG_TMP_DIR/${OUTPUT_IMG}.$$ usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
            && ${TAR} -zcf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
            root.password.${LIVEIMG_VERSION} usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} *.manifest)
        [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
    else
        mv $IMG_TMP_DIR/${OUTPUT_IMG}.$$ usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG}
    fi
}
