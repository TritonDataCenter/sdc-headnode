{
  "name": "cmdln",
  "version": "1.1.1",
  "description": "helper lib for creating CLI tools with subcommands; think `git`, `svn`, `zfs`",
  "author": {
    "name": "Trent Mick",
    "url": "http://trentm.com"
  },
  "main": "./lib/cmdln.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/trentm/node-cmdln.git"
  },
  "engines": [
    "node >=0.8.0"
  ],
  "keywords": [
    "cmdln",
    "cli",
    "tool"
  ],
  "dependencies": {
    "assert-plus": "0.1.2",
    "extsprintf": "1.0.2",
    "verror": "1.3.6",
    "dashdash": "1.2.0"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "readme": "`node-cmdln` is a node.js helper lib for creating CLI tools with subcommands\n(think `git`, `svn`, `zfs`, `brew`, etc.). It is a sister of my earlier\n[Python lib for this](https://github.com/trentm/cmdln).\n\nFollow <a href=\"https://twitter.com/intent/user?screen_name=trentmick\" target=\"_blank\">@trentmick</a>\nfor updates to node-cmdln.\n\n\n# Usage\n\nYou define a subclass of `Cmdln` and subcommands as `do_NAME` methods.\nMinimally you could have a \"conan.js\" as follows:\n\n    #!/usr/bin/env node\n    var util = require('util');\n    var cmdln = require('cmdln');\n\n    function Conan() {\n        cmdln.Cmdln.call(this, {\n            name: 'conan',\n            desc: 'What is best in life?'\n        });\n    }\n    util.inherits(Conan, cmdln.Cmdln);\n\n    Conan.prototype.do_crush = function do_crush(subcmd, opts, args, callback) {\n        console.log('Yargh!');\n        callback();\n    };\n    Conan.prototype.do_crush.help = 'Crush your enemies.';\n\n    cmdln.main(Conan);  // mainline\n\nWith this, you get the following behaviour:\n\n    $ node conan.js\n    What is best in life?\n\n    Usage:\n        conan [OPTIONS] COMMAND [ARGS...]\n        conan help COMMAND\n\n    Options:\n        -h, --help      Show this help message and exit.\n\n    Commands:\n        help (?)        Help on a specific sub-command.\n        crush           Crush your enemies.\n\n    $ node conan.js help crush\n    Crush your enemies.\n\n    $ node conan.js crush\n    Yargh!\n\n\n# Option processing\n\nOption processing (using [dashdash](https://github.com/trentm/node-dashdash))\nis integrated. `do_crush` above could be replaced with:\n\n    Conan.prototype.do_crush = function (subcmd, opts, args, callback) {\n        console.log('Yargh!');\n        callback();\n    };\n    Conan.prototype.do_crush = function (subcmd, opts, args, callback) {\n        if (opts.help) {\n            this.do_help('help', {}, [subcmd], callback);\n            return;\n        }\n        if (!args.length) {\n            console.log('No enemies? Yarg!');\n        } else {\n            args.forEach(function (enemy) {\n                console.log('Smite %s with a %s!', enemy, opts.weapon);\n            });\n        }\n        callback();\n    };\n    Conan.prototype.do_crush.options = [\n        {\n            names: ['help', 'h'],\n            type: 'bool',\n            help: 'Show this help.'\n        },\n        {\n            names: ['weapon', 'w'],\n            helpArg: 'WEAPON',\n            type: 'string',\n            default: 'sword',\n            help: 'Weapon with which to smite.'\n        }\n    ];\n    Conan.prototype.do_crush.help = (\n        'Crush your enemies.\\n'\n        + '\\n'\n        + 'Usage:\\n'\n        + '     conan crush [OPTIONS] [ENEMIES...]\\n'\n        + '\\n'\n        + '{{options}}'\n    );\n\nThen we get this behaviour:\n\n    $ node conan.js crush Bob\n    Smite Bob with a sword!\n\n    $ node conan.js crush Bob Linda --weapon mattock\n    Smite Bob with a mattock!\n    Smite Linda with a mattock!\n\n    $ node conan.js crush -h\n    Crush your enemies.\n\n    Usage:\n         conan crush [OPTIONS] [ENEMIES...]\n\n    Options:\n        -h, --help                  Show this help.\n        -w WEAPON, --weapon=WEAPON  Weapon with which to smite.\n\n\nSee \"examples/conan.js\" for the complete example. Run\n`node example/conan.js ...` to try it out.\n\n\n# License\n\nMIT. See LICENSE.txt\n",
  "readmeFilename": "README.md",
  "_id": "cmdln@1.1.1",
  "dist": {
    "shasum": "9e95155b8bd839079da4f036f2f637d701f3fdd3"
  },
  "_from": "cmdln@",
  "_resolved": "https://registry.npmjs.org/cmdln/-/cmdln-1.1.1.tgz"
}
