{
  "name": "verror",
  "version": "1.1.0",
  "description": "richer JavaScript errors",
  "main": "./lib/verror.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/davepacheco/node-verror.git"
  },
  "dependencies": {
    "extsprintf": "1.0.0"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "readme": "# verror: richer JavaScript errors\n\nThis module provides VError, which is like JavaScript's built-in Error class,\nbut supports a \"cause\" argument and a printf-style message.  The cause argument\ncan be null.  For example:\n\n    if (err)\n        throw (new VError(err, 'operation \"%s\" failed', opname));\n\nIf err.message is \"file not found\" and \"opname\" is \"rm\", then the thrown\nexception's toString() would return:\n\n       operation \"rm\" failed: file not found\n\nThis is useful for annotating exceptions up the stack, rather than getting an\nextremely low-level error (like \"file not found\") for a potentially much higher\nlevel operation.\n\nAdditionally, when printed using node-extsprintf using %r, each exception's\nstack is printed.\n\n\n# Example\n\nFirst, install it:\n\n    # npm install verror\n\nNow, use it:\n\n    var mod_fs = require('fs');\n    var mod_extsprintf = require('extsprintf');\n    var mod_verror = require('../lib/verror');\n    \n    mod_fs.stat('/nonexistent', function (err) {\n    \tconsole.log(mod_extsprintf.sprintf('%r',\n    \t    new mod_verror.VError(err, 'operation failed')));\n    });\n\noutputs:\n\n    EXCEPTION: VError: operation failed: ENOENT, no such file or directory '/nonexistent'\n        at Object.oncomplete (/home/dap/node-verror/examples/simple.js:7:6)\n    Caused by: EXCEPTION: Error: Error: ENOENT, no such file or directory '/nonexistent'\n",
  "readmeFilename": "README.md",
  "_id": "verror@1.1.0",
  "_from": "verror@1.1.0"
}
