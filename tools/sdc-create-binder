#!/usr/node/bin/node

/*
 * Copyright (c) 2013, Joyent, Inc. All rights reserved.
 *
 * sdc-create-binder.js: creates a binder instance, updates admin network
 * resolvers and SDC application ZK_SERVERS metadata.
 */

var assert = require('/opt/smartdc/node_modules/assert-plus');
var async = require('/usr/node/node_modules/async');
var cp = require('child_process');
var exec = cp.exec;
var sdc = require('/opt/smartdc/node_modules/sdc-clients');
var Logger = require('/usr/node/node_modules/bunyan');
var sprintf = require('util').format;

if (process.argv.length !== 3) {
    console.error('sdc-create-binder <server_uuid>');
    process.exit(1);
}

// Globals
var serverUuid = process.argv[2];
var log;
var app;
var ownerUuid;
var zoneUuid;
var myId;



// -- utility functions

function fatal(err, message) {
    self.log.fatal(err, message + " %s", err.message);
    console.error(message);
    process.exit(1);
}

function reserveAndGetNic(name, zone_uuid, owner_uuid, cb) {
    var log = self.log;
    var napi = self.NAPI;

    assert.string(name, 'name');
    assert.string(zone_uuid, 'zone_uuid');
    assert.string(owner_uuid, 'owner_uuid');

    var opts = {
        belongs_to_uuid: zone_uuid,
        owner_uuid: owner_uuid,
        belongs_to_type: 'zone'
    };

    log.debug({ opts: opts }, 'provisioning NIC');

    async.waterfall([
        function (subcb) {
            napi.listNetworks({ name: name },
                function (err, networks) {
                if (err) {
                    log.error(err,
                        'failed to list networks');
                    return (subcb(err));
                }

                log.debug({ network: networks[0] },
                    'found network %s', name);

                return (subcb(null, networks[0].uuid));
            });
        },
        function (network_uuid, subcb) {
            napi.provisionNic(network_uuid, opts,
                function (err, nic) {
                if (err) {
                    log.error(err,
                        'failed to provision NIC');
                    return (cb(err));
                }

                log.info({ nic: nic }, 'provisioned NIC');

                return (subcb(null, nic));
            });
        }
    ], cb);
}

// -- waterfall functions

function getApplication(cb) {
    var log = self.log;
    exec('/opt/smartdc/bin/sdc-sapi /applications?name=sdc | json -H',
         function(err, data) {
            if (err) fatal(err, 'Couldn\'t read config.');
            try {
                self.app = JSON.parse(data)[0];
            } catch (e) {
                fatal(e, "Couldn't parse config.");
            }
            log.debug('Loaded SDC application');
            cb(null);
    });
}

function getUuid(cb) {
    var log = self.log;
    exec('/usr/bin/uuid', function(err, data) {
        if (err) fatal(err, '/usr/bin/uuid error');
        self.zoneUuid = data.trim();
        log.debug('Obtained zone uuid: %s', self.zoneUuid);
        cb(null);
    });
}

function initializeClients(cb) {
    var log = self.log;
    var sapiUrl = 'http://' + self.app.metadata['SAPI_SERVICE'];
    var napiUrl = 'http://' + self.app.metadata['NAPI_SERVICE'];
    var cnapiUrl = 'http://' + self.app.metadata['CNAPI_SERVICE'];

    self.NAPI = new sdc.NAPI({
        log: self.log,
        url: napiUrl,
        agent: false
    });

    self.SAPI = new sdc.SAPI({
        log: self.log,
        url: sapiUrl,
        agent: false
    });

    self.CNAPI = new sdc.CNAPI({
        log: self.log,
        url: cnapiUrl,
        agent: false
    });

    log.debug('Initialized sdc-clients');

    return cb(null);
}

function checkServer(cb) {
    var log = self.log;
    self.CNAPI.getServer(serverUuid, function(err, server) {
        if (err) fatal(err, sprintf('Unable to find server %s', serverUuid));
        return cb(null);
    });
}

function reserveIp(cb) {
    var adminUuid = self.app.metadata['ufds_admin_uuid'];
    var log = self.log;
    reserveAndGetNic('admin', self.zoneUuid, adminUuid, function (err, nic) {
        self.nic = nic;
        log.debug({nic : nic}, 'Have a nic.');
        return cb(null);
    });
}

function getService(cb) {
    var log = self.log;
    self.SAPI.listServices({ name : 'binder'}, function(err, svcs) {
        if (err) fatal(err, 'Failed to find binder');

        var svcUuid = svcs[0].uuid;

        log.debug('Found binder service uuid: %s', svcUuid);
        return cb(null, svcUuid);
    });
}

function deployBinder(serviceUuid, cb) {
    var log = self.log;
    var extras = { metadata : {}, params : {} };

    self.myId = self.app.metadata['ZK_SERVERS'].length + 1;

    extras['uuid'] = self.zoneUuid;
    extras.params['alias'] = 'binder' + (self.myId-1);
    extras.params['server_uuid'] = serverUuid;
    extras.metadata['ZK_ID'] = self.myId;

    log.debug({extras : extras, myId : self.myId }, 'creating new binder instance');

    self.SAPI.createInstance(serviceUuid, extras, function (err, inst) {
        if (err) fatal(err, 'Failed to create binder instance');

        log.debug({ instances : inst }, 'Created binder instance %s', inst.uuid);
        return cb(null);
    });
}

function updateZkMetadata(cb) {
    var log = self.log;
    var sapi = self.SAPI;

    var zkServers = self.app.metadata['ZK_SERVERS'];
    zkServers.push({
        host: self.nic.ip,
        port: 2181,
        num: self.myId
    });

    var opts = { metadata: {} };
    opts.metadata['ZK_SERVERS'] = zkServers.map(function(e, i, c) {
        delete e.last;
        if (i == c.length-1) e.last = true;
        return e;
    });

    self.SAPI.updateApplication(self.app.uuid, opts, function (err, app) {
        if (err) fatal(err, 'Failed to update ZK_SERVERS in application');
        self.app = app;
        return cb(null);
    });
}

function updateResolvers(cb) {
    var log = self.log;

    async.waterfall([
        function getNetwork(_cb) {
            self.NAPI.listNetworks({ name : 'admin' },
                function (err, networks) {
                if (err) fatal(err, 'Failed to list networks');
                var network = networks[0];
                log.debug({ network : network },
                    "found network %s", network.name);
                return _cb(null, network);
            });
        },
        function updateNetwork(network, _cb) {
            var params = {};
            var resolvers = self.app.metadata['ZK_SERVERS'];
            params.resolvers = resolvers.map(function (e) {
                return e.host;
            });
            self.NAPI.updateNetwork(network.uuid, params, function (err, _net) {
                if (err) fatal(err, 'Failed to update admin network resolvers');
                log.debug({ network : _net }, 'Updated admin network resolvers');
                return _cb(null);
            });
        }
    ], cb);
}

// -- Mainline

var self = this;

self.log = new Logger({
    name: 'sdc-create-binder',
    level: 'debug',
    serializers: Logger.stdSerializers
});

async.waterfall([
    getApplication,
    getUuid,
    initializeClients,
    checkServer,
    reserveIp,
    getService,
    deployBinder,
    updateZkMetadata,
    updateResolvers
], function(err) {
    if (err) fatal(err, 'Error');
    process.exit(0);
});
