#!/usr/bin/bash
#

# Important! This is just a place-holder until we rewrite in node.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

if [[ ! -f /opt/smartdc/bin/libdc.sh ]]; then
    echo "fatal: unable to find libdc.sh"
    exit 1
fi
source /opt/smartdc/bin/libdc.sh

command=$1
shift

usage()
{
    cat <<EOF

Usage:
        $0 <sub-command> [options]

Sub-commands:

        list         - list all servers in this DC
        setup [uuid] - setup a new server in this DC

EOF
    exit 1
}

server_list()
{
    servers=$(cnapi /servers | json -H -a uuid)
    if [[ -n ${servers} ]]; then
        # this sets the variables:
        #
        #  nic_UUID_<tag>=<IP>
        #
        # with uuid's dashes changed to underscore to meet bash's variable name requirements.
        admin_ip_mappings=$(napi /nics?belongs_to_type=server | json -H -a \
            -e "eval_line='nic_' + this.belongs_to_uuid.replace(/\-/g, '_') + '_' + nic_tag + '=' + ip;" \
            eval_line)
        if [[ -n ${admin_ip_mappings} ]]; then
            eval ${admin_ip_mappings}
        fi

        printf "%-20s %-36s  %-5s  %7s  %15s\n" \
            "HOSTNAME" "UUID" "SETUP" "RAM" "ADMIN_IP"
        for uuid in $(cnapi /servers | json -H -a uuid); do
            # if someone has a better way to do this, it'd be a appreciated.
            admin_ip=$(eval echo \${nic_$(echo ${uuid} | tr '-' '_')_admin})
            [[ -z ${admin_ip} ]] && admin_ip="-"
                #| json -H -e 'if this.memory_total_bytes { memory_total_bytes=parseInt(memory_total_bytes) / (1024 * 1024) } else { memory_total_bytes=0 }' \
            data=$(cnapi /servers/${uuid} \
                | json -H -e 'memory_total_bytes = (this.hasOwnProperty("memory_total_bytes") ? memory_total_bytes : 0)' \
                -e 'memory_total_bytes=parseInt(memory_total_bytes / (1024 * 1024))' \
                -a hostname setup memory_total_bytes)
            hostname=${data%% *}
            setup=$(echo ${data} | cut -d ' ' -f2)
            ram=${data##* }

            printf "%-20s %36s  %-5s  %7s  %15s\n" \
                "${hostname}" "${uuid}" "${setup}" "${ram}" "${admin_ip}"
        done
    fi
}

server_setup()
{
    server_uuid=$1

    if [[ -n $2 ]]; then
        usage
    fi

    # Time for setup!
    cnapi /servers/${server_uuid}/setup -X PUT -m 60000
}

if [[ -z ${command} ]]; then
    usage
fi

case ${command} in
list)
    server_list "$@"
;;
setup)
    server_setup "$@"
;;
*)
    echo "Unknown command: ${command}" >&2
    usage
;;
esac

exit 0
