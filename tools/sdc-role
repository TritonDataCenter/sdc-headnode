#!/usr/bin/bash
#

# Important! This is just a place-holder until we rewrite in node.
#

if [ "$TRACE" != "" ]; then
    # BASHSTYLED
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

if [[ ! -f /opt/smartdc/bin/libdc.sh ]]; then
    echo "fatal: unable to find libdc.sh"
    exit 1
fi
source /opt/smartdc/bin/libdc.sh

command=$1
shift

usage()
{
    cat <<EOF

Usage:
        $0 <sub-command> [options]

Sub-commands:

        list                               - list all sdc_role zones in this DC

EOF
    exit 1
}

# -o is for special/advanced options (key=value pairs)
args=`getopt ho: $*`
# you should not use `getopt abo: "$@"` since that would parse
# the arguments differently from what the set command below does.
if [[ $? != 0 ]]; then
    usage;
fi

set -- $args
for opt; do
   case "$opt" in
       -h)
            usage;
            break;;
       -o)
           oarg="$2"; shift;
           if [[ ${oarg##*=} == ${oarg} ]]; then
               # stripping off everything before the equals doesn't change the
               # string, so it's missing one.
               echo "invalid -o option: ${oarg}" >&2
               usage
           fi
           # since oarg is key=value, this sets OPTION_key=value
           eval "OPTION_${oarg}"
           shift;;
       --)
           shift; break;;
   esac
done

next_alias()
{
    local zrole=$1
    local zone=
    local idx=0

    local all_zones
    all_zones=$(vmapi "/vms?owner_uuid=${CONFIG_ufds_admin_uuid}&state=active" \
        | json -H -e 'this.alias=(this.alias || "-")' \
        -e 'this.smartdc_role=(this.tags.smartdc_role || "-")' \
        -a smartdc_role alias | tr ' ' ',')

    # 100 here for runaway protection
    while [[ ${idx} -lt 100 ]]; do
        local found=0
        for zone in ${all_zones}; do
            local role=${zone%%,*}
            local alias=${zone##*,}

            if [[ ${role} == ${zrole} && ${alias} == "${zrole}${idx}" ]]; then
                found=1
            fi
        done

        # if it wasn't found, we'll use this one
        [[ ${found} == 0 ]] && break

        idx=$((${idx} + 1))
    done

    [[ ${idx} == 100 ]] && fatal "next_alias(${zrole}): alias overflow"

    echo "${zrole}${idx}"
}


sdc_list()
{
    local zone=

    printf "%-12s %-16s %-36s  %-7s %10s %16s %15s\n" \
        "ALIAS" "SERVER" "UUID" "RAM" "STATE" "ROLE" "ADMIN_IP"

    # this sets the variables:
    #
    #  hostname_UUID=<hostname>
    #
    # with uuid's dashes changed to underscore to meet bash's variable
    # name requirements.
    host_mappings=$(cnapi /servers \
        | json -H -e 'this.uuid=this.uuid.replace(/\-/g, "_");' -a uuid hostname \
        | tr ' ' '=' | sed -e "s/^\([0-9a-f].*$\)/local hostname_\\1/")
    if [[ -n ${host_mappings} ]]; then
       eval ${host_mappings}
    fi

    # BASHSTYLED
    for zone in $(vmapi "/vms?owner_uuid=${CONFIG_ufds_admin_uuid}&state=active" \
        | json -H -e 'this.smartdc_role=(this.tags.smartdc_role || "-")' \
            -a alias smartdc_role state uuid ram server_uuid \
        | tr ' ' ',' | sort); do

        local alias=$(echo "${zone}" | cut -d',' -f1)
        local role=$(echo "${zone}" | cut -d',' -f2)
        local state=$(echo "${zone}" | cut -d',' -f3)
        local uuid=$(echo "${zone}" | cut -d',' -f4)
        local ram=$(echo "${zone}" | cut -d',' -f5)
        local server_uuid=$(echo "${zone}" | cut -d',' -f6)
        local server_name=$(eval echo \${hostname_$(echo ${server_uuid} \
                            | tr '-' '_')})
        local admin_ip=$(napi /nics?belongs_to_uuid=${uuid} \
                         | json -H -a nic_tag ip | grep "^admin" \
                         | cut -d ' ' -f2)
        [[ -z ${admin_ip} ]] && admin_ip="-"
        [[ -z ${server_name} ]] && server_name="-"

        printf "%-12s %-16s %-36s  %-7s %10s %16s %15s\n" \
            "${alias}" "${server_name}" "${uuid}" "${ram}" \
            "${state}" "${role}" "${admin_ip}"
    done

    return 0
}

if [[ -z ${command} ]]; then
    usage
fi

case ${command} in
list)
    sdc_list "$@"
    exit $?
;;
*)
    echo "Unknown command: ${command}" >&2
    usage
;;
esac

exit 2
