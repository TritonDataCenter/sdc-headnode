#!/usr/node/bin/node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

//
//
// Summary:
//
//  This tool is used to manage servers (HN or CN) in SDC.
//

var assert = require('assert');
var async = require('/usr/node/node_modules/async');
var cp = require('child_process');
var exec = cp.exec;
var readline = require('readline');
var util = require('util');

var SDC_MODULES = '/opt/smartdc/node_modules';
var restify = require(SDC_MODULES + '/sdc-clients/node_modules/restify');
var sprintf = require('/usr/node/node_modules/sprintf').sprintf;
var sdcClients = require(SDC_MODULES + '/sdc-clients');

// global
var sdc_config;

function usage()
{
    /* BEGIN JSSTYLED */
    console.log([
        '',
        'Usage:',
        '        /opt/smartdc/bin/sdc-server <sub-command> [options]',
        '',
        'Sub-commands:',
        '',
        '    delete [-f] <uuid>                    - remove all CNAPI information about',
        '                                            this server',
        '    jobs <uuid>                           - list all jobs for this server',
        '    list                                  - list all servers in this DC',
        '    ips <uuid>                            - output the IPs for this server',
        '    nics <uuid>                           - output the nics for this server',
        '    admin-ip <uuid>                       - output the admin IP address for this server',
        '    setup [-s] <uuid> [params]            - setup a new server in this DC',
        '    sysinfo <uuid>                        - output the latest `sysinfo` from',
        '                                            the server',
        '    update-nictags [-s] <uuid> [params]   - update nic tags for this server',
        '    replace-nictags [-s] <uuid> [params]  - set nic tags for this server',
        '    delete-nictags [-s] <uuid> [params]   - delete nic tags from this server',
        ''
    ].join('\n'));
    /* END JSSTYLED */
}

function isUUID(str) {
    var re = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    if (!str) {
        return false;
    }
    if (str.length === 36 && str.match(re)) {
        return true;
    } else {
        return false;
    }
}

// TODO should pull this out to separate library. See OS-2065.

function getConfig(callback)
{
    var cmd = '/bin/bash /lib/sdc/config.sh -json';

    if (sdc_config) {
        callback();
        return;
    }

    exec(cmd, function (err, stdout, stderr) {
        if (!err) {
            try {
                sdc_config = JSON.parse(stdout);
            } catch (e) {
                err = e;
            }
        } else {
            err.stdout = stdout;
            err.stderr = stderr;
        }
        callback(err);
    });
}

// returns an sdc-client or restify handle for the API after finding the API
// endpoint for you.
function createClient(api, callback) {
    var handle;

    switch (api.toUpperCase()) {
        case 'CNAPI':
            handle = new sdcClients.CNAPI({
                url: sdc_config.cnapi_client_url,
                agent: false
            });
            callback(null, handle);
            return;
        case 'NAPI':
            handle = new sdcClients.NAPI({
                url: sdc_config.napi_client_url,
                agent: false
            });
            callback(null, handle);
            return;
        case 'WFAPI':
            handle = restify.createJsonClient({
                url: 'http://' + sdc_config.workflow_domain,
                agent: false
            });
            callback(null, handle);
            return;
        default:
            callback(new Error('Unknown API: ' + api));
            return;
    }
}

function getNics(server_uuid, params, callback)
{
    var nics;
    var napi;

    async.series([
        function (cb) {
            createClient('NAPI', function (err, handle) {
                if (!err) {
                    napi = handle;
                } else {
                    err.api = 'NAPI';
                }
                cb(err);
            });
        }, function (cb) {
            var listParams = {
                belongs_to_uuid: server_uuid
            };

            for (var p in params) {
                listParams[p] = params[p];
            }

            napi.listNics(listParams, function (err, n) {
                if (err) {
                    err.api = 'NAPI';
                } else {
                    nics = n;
                }
                cb(err);
            });
        }
    ], function (err) {
        if (err) {
            return callback(err);
        }

        return callback(null, nics);
    });
}

function outputServerData(data, callback)
{
    var admin_nics = {};
    var n;
    var nics;
    var servers;

    servers = data.servers;
    nics = data.nics;

    // nic info comes from napi
    for (n in nics) {
        n = nics[n];

        if (n.nic_tag === 'admin') {
            admin_nics[n.belongs_to_uuid] = n.ip;
        }
    }

    console.log(sprintf('%-20s %-36s %7s %8s  %8s  %7s  %-15s',
        'HOSTNAME', 'UUID', 'VERSION', 'SETUP', 'STATUS', 'RAM', 'ADMIN_IP'));

    servers.forEach(function (s) {
        var admin_ip = '-';
        var sdc_version;
        var setup_state = s.setup;

        // Eventually this will be a first-class property of a CN
        sdc_version = s.sysinfo['SDC Version'];
        if (!sdc_version) {
            sdc_version = '6.x';
        }

        if (admin_nics.hasOwnProperty(s.uuid)) {
            admin_ip = admin_nics[s.uuid];
        }

        function outputLine() {
            console.log(sprintf('%-20s %36s %7s %8s  %8s  %7d  %-15s',
                s.hostname,
                s.uuid,
                sdc_version,
                (typeof (setup_state) === 'undefined' ? 'unknown': setup_state),
                s.status,
                s.ram,
                admin_ip));
        }

        if (s.setup === false && s.setting_up) {
            // setup job is currently running
            setup_state = 'running';

            getJobs(s.uuid, function (err, jobs) {
                var newest = 0;

                if (err) {
                    callback(err);
                    return;
                }

                jobs.forEach(function (job) {
                    var start;

                    if (job.name.match(/^server-setup/)) {
                        start = new Date(job.created_at).getTime();
                        if (start > newest) {
                            setup_state = job.execution;
                            newest = start;
                        }
                    }
                });

                outputLine();
            });

        } else {
            outputLine();
        }
    });
    callback();
}

function outputServerList(callback)
{
    var cnapi;
    var servers;
    var napi;
    var nics;

    async.series([
        function (cb) {
            createClient('CNAPI', function (err, handle) {
                if (!err) {
                    cnapi = handle;
                } else {
                    err.api = 'CNAPI';
                }
                cb(err);
            });
        }, function (cb) {
            createClient('NAPI', function (err, handle) {
                if (!err) {
                    napi = handle;
                } else {
                    err.api = 'NAPI';
                }
                cb(err);
            });
        }, function (cb) {
            // grab all the servers
            cnapi.listServers({extras: 'sysinfo'}, function (err, s) {
                if (err) {
                    err.api = 'CNAPI';
                } else {
                    servers = s;
                }
                cb(err);
            });
        }, function (cb) {
            // Grab all the server nics so we can just pull them out as we list
            napi.listNics({belongs_to_type: 'server', limit: 10000,
                nic_tags_provided: 'admin'}, function (err, n) {

                if (err) {
                    err.api = 'NAPI';
                } else {
                    nics = n;
                }
                cb(err);
            });
        }
    ], function (err) {
        if (err) {
            callback(err);
            return;
        }
        outputServerData({servers: servers, nics: nics}, callback);
    });
}

function outputAdminIP(server_uuid, callback) {
    getNics(server_uuid, { nic_tags_provided: ['admin'] },
        function (err, nics) {
        if (!nics || nics.length === 0) {
            callback(new Error('No admin nic found'));
            return;
        }

        if (!nics[0].ip) {
            callback(new Error('No admin IP found'));
            return;
        }

        console.log(nics[0].ip);
    });
}

function deleteServer(server_uuid, callback)
{
    var cnapi;

    async.series([
        function (cb) {
            createClient('CNAPI', function (err, handle) {
                if (!err) {
                    cnapi = handle;
                }
                cb(err);
            });
        }, function (cb) {
            cnapi.del('/servers/' + server_uuid, function (err, result) {
                if (err) {
                    err.api = 'CNAPI';
                } else {
                    console.log('Server ' + server_uuid
                        + ' deleted successfully');
                }
                cb(err);
            });
        }
    ], callback);
}

function getJobs(server_uuid, callback)
{
    var result_jobs = [];
    var wfapi;

    async.series([
        function (cb) {
            createClient('WFAPI', function (err, handle) {
                if (!err) {
                    wfapi = handle;
                } else {
                    err.api = 'WFAPI';
                }
                cb(err);
            });
        }, function (cb) {
            var endpoint = '/jobs?server_uuid=' + server_uuid;

            /*
             * Note: WFAPI doesn't support querying on 'target' (WORKFLOW-91)
             * but it does support querying on params, so we look for all jobs
             * with server_uuid matching our server and then filter only those
             * results for the target also matching.
             */

            wfapi.get(endpoint, function (err, req, res, jobs) {
                if (err) {
                    err.api = 'WFAPI';
                    cb(err);
                    return;
                }

                jobs.forEach(function (job) {
                    if (job.target === server_uuid) {
                        result_jobs.push(job);
                    }
                });
                cb();
            });
        }
    ], function (err) {
        if (err) {
            callback(err);
            return;
        }
        callback(null, result_jobs);
    });
}

function outputJobs(server_uuid, callback)
{
    getJobs(server_uuid, function (err, jobs) {
        if (err) {
            callback(err);
            return;
        }

        if (jobs.length < 1) {
            console.log('No jobs for server ' + server_uuid);
            callback();
            return;
        }

        console.log(sprintf('%-28s %-12s %7s  %-24s  %-36s',
            'NAME', 'STATUS', 'ELAPSED', 'CREATED', 'UUID'));

        jobs.forEach(function (job) {

            console.log(sprintf('%-28s %-12s %7.1f  %24s  %36s', job.name,
                    job.execution, job.elapsed, job.created_at, job.uuid));
        });

        callback();
    });
}

function outputIps(server_uuid, callback)
{
    getNics(server_uuid, {}, function (err, nics) {
        if (err) {
            callback(err);
            return;
        }

        if (!nics || nics.length === 0) {
            return;
        }

        var ips = [];
        nics.forEach(function (n) {
            if (n.hasOwnProperty('ip') && ips.indexOf(n) === -1) {
                ips.push(n.ip);
            }
        });

        console.log(ips.join('\n'));
    });
}

function outputNics(server_uuid, callback)
{
    getNics(server_uuid, {}, function (err, nics) {
        if (err) {
            callback(err);
            return;
        }

        console.log(JSON.stringify(nics, null, 2));
    });
}

function outputSysinfo(server_uuid, callback)
{
    var cnapi;
    var server;

    async.series([
        function (cb) {
            createClient('CNAPI', function (err, handle) {
                if (!err) {
                    cnapi = handle;
                } else {
                    err.api = 'CNAPI';
                }
                cb(err);
            });
        }, function (cb) {
            cnapi.getServer(server_uuid, function (err, s) {
                if (err) {
                    err.api = 'CNAPI';
                } else {
                    server = s;
                }
                cb(err);
            });
        }
    ], function (err) {
        if (err) {
            callback(err);
            return;
        }
        console.log(JSON.stringify(server.sysinfo, null, 2));
    });
}

function runServerWorkflow(server_uuid, func, options, callback)
{
    var cnapi;
    var job_uuid;
    var wfapi;

    async.series([
        function (cb) {
            createClient('CNAPI', function (err, handle) {
                if (!err) {
                    cnapi = handle;
                } else {
                    err.api = 'CNAPI';
                }
                cb(err);
            });
        }, function (cb) {
            createClient('WFAPI', function (err, handle) {
                if (!err) {
                    wfapi = handle;
                } else {
                    err.api = 'WFAPI';
                }
                cb(err);
            });
        }, function (cb) {
            var e;
            var params = options.params || {};

            cnapi[func](server_uuid, params, function (err, result) {
                if (err) {
                    err.api = 'CNAPI';
                    cb(err);
                    return;
                }
                if (result.hasOwnProperty('job_uuid')) {
                    job_uuid = result.job_uuid;
                    cb();
                } else {
                    e = new Error('No job_uuid in result: '
                        + JSON.stringify(result));
                    e.api = 'CNAPI';
                    cb(e);
                }
            });
        }, function (cb) {
            var current_task;
            var endpoint = util.format('/jobs/%s', job_uuid);
            var ival;
            var line;
            var longest_line = 1;
            var result;
            var running = false;
            var startTime = Date.now(0);

            if (!options.sync) {
                // when we're async we just don't wait
                cb();
                return;
            }

            ival = setInterval(function () {
                if (!running) {
                    running = true;

                    wfapi.get(endpoint, function (err, req, res, job) {
                        var chain;
                        var e;
                        var execution;
                        var results;

                        if (err) {
                            err.api = 'WFAPI';
                            clearInterval(ival);
                            cb(err);
                            return;
                        }

                        execution = job.execution;

                        // for the 80 column glory
                        chain = job.chain;
                        results = job.chain_results;

                        if (results.length > 0) {
                            current_task = results[results.length - 1];
                        } else {
                            current_task = chain[0];
                        }
                        if ((current_task.hasOwnProperty('result') &&
                             current_task.result.length === 0) &&
                            (current_task.hasOwnProperty('error') &&
                             current_task.error.length === 0) &&
                            chain.length > results.length) {

                            current_task = chain[results.length];
                        }

                        if (execution === 'failed' ||
                            execution === 'cancelled') {
                            if (results[results.length - 1].error.length > 0) {
                                result = results[results.length - 1].name + ':'
                                    + results[results.length - 1].error;
                            } else {
                                result = results[results.length - 1].result
                                    + ':' + results[results.length - 1].result;
                            }
                            e = new Error('Job ' + execution + ' in "' + result
                                + '" (see /jobs/' + job_uuid + ' for details');
                            e.api = 'WFAPI';
                            clearInterval(ival);
                            cb(e);
                            return;
                        } else if (execution === 'succeeded') {
                            clearInterval(ival);
                            line = sprintf('\rJob(%s) - %0.1fs - completed '
                                + 'successfully', job_uuid,
                                (Date.now(0) - startTime) / 1000);
                            if (longest_line < line.length) {
                                longest_line = line.length;
                            }
                            // write the line with space padding at the end long
                            // enough to overwrite previous line(s)
                            console.log(line + sprintf('%'
                                + ((longest_line - line.length) + 1) + 's',
                                ' '));
                            cb();
                            return;
                        } else {
                            line = sprintf(
                                'Job(%s) - %0.1fs - currently %s: %s', job_uuid,
                                (Date.now(0) - startTime) / 1000, execution,
                                current_task.name);
                            if (longest_line < line.length) {
                                longest_line = line.length;
                            }
                            // write the line with space padding at the end long
                            // enough to overwrite previous line(s)
                            process.stdout.write('\r' + line + sprintf('%'
                                + ((longest_line - line.length) + 1) + 's',
                                ' '));
                        }

                        running = false;
                    });
                }
            }, 3000);
        }
    ], callback);
}

function dispatchCommand(command, args, callback)
{
    var rl;
    var server_uuid;

    switch (command) {
        case 'admin-ip':
            if (args.length !== 1 || !isUUID(args[0])) {
                usage();
                callback(new Error('admin-ip requires <uuid> argument'));
                return;
            }
            server_uuid = args[0];
            outputAdminIP(server_uuid, callback);
            break;

        case 'delete':
            if ((args.length !== 1 && args.length !== 2) ||
                !isUUID(args[args.length - 1])) {
                usage();
                callback(new Error('delete requires <uuid> argument'));
                return;
            }
            if (args.length === 2 && args[0] !== '-f') {
                usage();
                callback(new Error('Invalid delete flag: ' + args[0]));
                return;
            }
            server_uuid = args[args.length - 1];

            if (args.length === 1) {
                // prompt for confirm since no -f
                rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                rl.question('Are you sure you want to delete ' + server_uuid
                    + ' [Yes/No]? ', function (answer) {

                    if (answer.match(/^yes$/i)) {
                        deleteServer(server_uuid, callback);
                    } else {
                        callback(new Error('Cancelled at user request'));
                    }
                    rl.close();
                });
            } else {
                deleteServer(server_uuid, callback);
            }
            break;

        case 'ips':
            if (args.length !== 1 || !isUUID(args[0])) {
                usage();
                callback(new Error('ips requires <uuid> argument'));
                return;
            }
            server_uuid = args[0];
            outputIps(server_uuid, callback);
            break;


        case 'jobs':
            if (args.length !== 1 || !isUUID(args[0])) {
                usage();
                callback(new Error('jobs requires <uuid> argument'));
                return;
            }
            server_uuid = args[0];
            outputJobs(server_uuid, callback);
            break;

        case 'list':
            if (args.length > 0) {
                usage();
                callback(new Error('no arguments expected for list: '
                    + JSON.stringify(args)));
                return;
            }
            outputServerList(callback);
            break;

        case 'nics':
            if (args.length !== 1 || !isUUID(args[0])) {
                usage();
                callback(new Error('nics requires <uuid> argument'));
                return;
            }
            server_uuid = args[0];
            outputNics(server_uuid, callback);
            break;

        case 'sysinfo':
            if (args.length !== 1 || !isUUID(args[0])) {
                usage();
                callback(new Error('sysinfo requires <uuid> argument'));
                return;
            }
            server_uuid = args[0];
            outputSysinfo(server_uuid, callback);
            break;

        case 'setup':
        case 'update-nictags':
        case 'replace-nictags':
        case 'delete-nictags':
            if (args.length === 0 || (!isUUID(args[0]) && !isUUID(args[1]))) {
                usage();
                callback(new Error(command + ' requires <uuid> argument'));
                return;
            }

            var nics = {};
            var remain;
            var setupOpts = { params: {} };
            var sync;

            sync = (args[0].charAt(0) == '-');
            if (args.length > 1 && sync && args[0] !== '-s') {
                usage();
                callback(new Error('Invalid ' + command + ' flag: ' + args[0]));
                return;
            }

            if (sync) {
                server_uuid = args[1];
                remain = args.slice(2);
                setupOpts.sync = true;
            } else {
                server_uuid = args[0];
                remain = args.slice(1);
            }

            for (var p in remain) {
                var param = remain[p].split('=');
                if (param.length !== 2) {
                    usage();
                    callback(new Error('Invalid parameter: ' + remain[p]));
                    return;
                }

                if (param[0] === 'hostname') {
                    setupOpts.params.hostname = param[1];
                } else if (param[0] === 'postsetup_script') {
                    setupOpts.params.postsetup_script = param[1];
                } else {
                    var match = param[0].match(/^(.+)_nic$/);
                    if (!match) {
                        usage();
                        callback(new Error('Invalid nic tag parameter: ' + param[0]));
                        return;
                    }
                    if (!nics.hasOwnProperty(param[1])) {
                        nics[param[1]] = [];
                    }

                    nics[param[1]].push(match[1]);
                }
            }

            if (Object.keys(nics).length !== 0) {
                setupOpts.params.nics = [];
                for (var n in nics) {
                    setupOpts.params.nics.push(
                        { mac: n, nic_tags_provided: nics[n] });
                }
            }

            var commandMatch = command.match(/^([^-]+)-nictags$/);
            if (commandMatch) {
                if (!setupOpts.params.nics) {
                    usage();
                    callback(new Error(
                        command + ' requires nic tags to be specified'));
                    return;
                }
                setupOpts.params.action = commandMatch[1];
            }

            runServerWorkflow(server_uuid,
                command === 'setup' ? 'setupServer' : 'updateNics',
                setupOpts, callback);

            break;

        default:
            usage();
            callback(new Error('unknown command: ' + command));
            break;
    }
}

function main()
{
    var args = process.argv.slice(3);
    var command = process.argv[2];

    if (!command || command.length < 1) {
        usage();
        process.exit(2);
    }

    getConfig(function (err) {
        dispatchCommand(command, args, function (err) {
            var api;
            var code = 'unknown';

            if (err) {
                api = '';
                if (err.hasOwnProperty('api')) {
                    api = err.api + ' ';
                }
                if (err.hasOwnProperty('statusCode')) {
                    code = err.statusCode;
                }
                if (code !== 'unknown') {
                    console.error(api + 'Error(' + code + '): ' + err.message);
                } else {
                    console.error(api + 'Error: ' + err.message);
                }
                process.exit(1);
                return;
            }
        });
    });
}

main();
