#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#

#
# Since this script is grabbing data from a system in a potentially unknown
# state we don't use 'set -o errexit' here because we don't want to fail to
# grab other data when we fail to grab data from one source.
#

# Note for man page. Use this to generate the list of available args to "-c":
# grep ^function sdc-sbcreate | grep grab_ | cut -c 15- | grep -v default | sort

PATH=/usr/bin:/sbin:/usr/sbin:/opt/smartdc/bin:/opt/smartdc/agents/bin
PATH=$PATH:/smartdc/bin

. /lib/sdc/config.sh
load_sdc_config

function usage
{
    echo "Usage: `basename $0` [-d dir] [-o output] [-c content] [-iu]"
    usage=/tmp/usage.$$

    #
    # Some things are just worth doing properly.
    #
    cat > $usage <<EOF
        BEGIN { p = indent = 8; printf("%*s", p - 1, ""); }
        {
            l = length($1) + 1;
            if (p + l >= 80) {
                printf("\n%*s%s", indent, "", \$1);
                p = indent + l;
            } else {
                printf(" %s", \$1);
                p += l;
            }
        }
        END { printf("\n"); }
EOF

    echo "  'content' must be one or more of:"
    compgen -A function grab_ | cut -d_ -f2- | nawk -f $usage
    rm $usage
    exit 1
}

function fatal
{
    echo "`basename $0`: $*"
    exit 1
}

function do_countdown
{
    echo ""
    echo "This tool will create an SDC support bundle in `dirname $TEMPDIR`."
    echo "This may take some time...  If you wish to abort press CTRL-C now!"
    echo ""
    countdown=$((${COUNTDOWN} - 1))
    while [[ ${countdown} -ge 0 ]]; do
        printf "                                   \r"
        printf "Starting in ${countdown} seconds...\r"
        sleep 1
        countdown=$((${countdown} - 1))
    done
    echo ""
    echo ""
}

function grab_default
{
    #
    # By default, we grab everything.
    #
    grab_sysinfo
    grab_hw_config
    grab_dlinfo
    grab_ifconfig
    grab_routes
    grab_auditlog
    grab_svcs
    grab_ps
    grab_zfsinfo
    grab_df
    grab_modinfo
    grab_headnode_info
    grab_zoneinfo
    grab_zoneconfigs
    grab_zonelogs
    grab_vminfo
    grab_vmlogs
    grab_cores
    grab_dumps
    grab_fmdump
    grab_logs
    grab_phonehome
    grab_platform_md5
    grab_app_config
    grab_fmd
    grab_disk_list
    grab_zpool_history
    grab_rabbitmq_info
    grab_images
    grab_vms
    grab_servers
    grab_agents
}

function grab_sysinfo
{
    echo "  > sysinfo"
    sysinfo > ${TEMPDIR}/sysinfo.json
}

function grab_hw_config
{
    echo "  > hardware configuration"
    prtdiag -v > ${TEMPDIR}/prtdiag
    prtconf -v > ${TEMPDIR}/prtconf
    smbios -x > ${TEMPDIR}/smbios
    psrinfo -v > ${TEMPDIR}/psrinfo
}

function grab_dlinfo
{
    echo "  > datalink info"
    dladm show-phys -m > ${TEMPDIR}/dladm.phys
    dladm show-vnic > ${TEMPDIR}/dladm.vnic
    dladm show-linkprop > ${TEMPDIR}/dladm.linkprop
    dladm show-bridge > ${TEMPDIR}/dladm.bridge
}

function grab_ifconfig
{
    echo "  > network interface info"
    ifconfig -a > ${TEMPDIR}/ifconfig.a
}

function grab_routes
{
    echo "  > routing table"
    netstat -rn > ${TEMPDIR}/netstat.rn
}

function grab_auditlog
{
    echo "  > auditlog info"
    (cd /var/audit && tar -zcvf ${TEMPDIR}/var.audit.tar.gz .) >&4 2>&1
}

function grab_svcs
{
    echo "  > services"
    echo "    (all services)"
    svcs -Z -a > ${TEMPDIR}/svcs.all
    mkdir ${TEMPDIR}/svccfg_archive
    echo "    (global service archive)"
    svccfg archive | gzip -c > ${TEMPDIR}/svccfg_archive/global.gz
    if [[ -n $headnode ]]; then
        for zone in `zoneadm list`; do
            [ "$zone" == "global" ] && continue
            echo "    (service archive for $zone)"
            zlogin ${zone} svccfg archive \
            | gzip -c > ${TEMPDIR}/svccfg_archive/${zone}.gz
        done
    fi
}

function grab_ps
{
    echo "  > process information"
    ps -efZ > ${TEMPDIR}/ps.efZ
}

function grab_zfsinfo
{
    echo "  > zfs info"
    echo "    (zpool status)"
    zpool status -v > ${TEMPDIR}/zpool.status
    echo "    (zfs list)"
    zfs list -t all > ${TEMPDIR}/zfs.list
    echo "    (iostat -e)"
    iostat -en -Td > ${TEMPDIR}/iostat.e.out
}

function grab_app_config
{
    echo "  > app zone config"
    local znm=
    local cfg=

    znm=$(vmadm lookup -1 tags.smartdc_role=cloudapi 2>/dev/null)
    cfg=/zones/${znm}/root/opt/smartdc/cloudapi/etc/cloudapi.cfg
    [[ -n "$znm" && -f $cfg ]] && cp $cfg ${TEMPDIR}/cloudapi.cfg

    znm=$(vmadm lookup -1 tags.smartdc_role=portal 2>/dev/null)
    cfg=/zones/${znm}/root/opt/smartdc/portal/cfg/config.js
    [[ -n "$znm" && -f $cfg ]] && cp $cfg ${TEMPDIR}/portal.config.js

    znm=$(vmadm lookup -1 tags.smartdc_role=dhcpd 2>/dev/null)
    cfg=/zones/${znm}/root/opt/smartdc/booter/config.json
    [[ -n "$znm" && -f $cfg ]] && cp $cfg ${TEMPDIR}/dhcpd.config.json
}

function grab_disk_list
{
    echo "  > disk list"
    /usr/bin/disklist -a > ${TEMPDIR}/disklist
}

function grab_zpool_history
{
    echo "  > zpool history"
    zpool history > ${TEMPDIR}/zpool.history
}

function grab_fmd
{
    echo "  > fmd"
    (cd /var/fm ; /usr/bin/gtar -zcf ${TEMPDIR}/fmd.tgz fmd)
}

function grab_df
{
    echo "  > disk utilization"
    df > ${TEMPDIR}/df
}

function grab_modinfo
{
    echo "  > module information"
    modinfo -w > ${TEMPDIR}/modinfo
}

function grab_headnode_info
{
    if [[ -d /usbkey ]]; then
        find /usbkey -ls > ${TEMPDIR}/usbkey.filelist
        echo "  > usbkey filelist"
        tar -cvf ${TEMPDIR}/usbkey.config.tar usbkey/config* >&4 2>&1
    fi
}

function grab_zoneinfo
{
    echo "  > zone list"
    zoneadm list -v -c > ${TEMPDIR}/zonelist.vc
    vmadm list > ${TEMPDIR}/vmadmlist
    echo "  > zone kernel state"
    zonemon -k > ${TEMPDIR}/zonekstate
}

function grab_zoneconfigs
{
    echo "  > zone configs"
    tar -cvf ${TEMPDIR}/zone.configs.tar etc/zones >&4 2>&1
    vmadm lookup -j > ${TEMPDIR}/vmadm.lookup.json
}

function grab_zonelogs
{
    if [[ -n $headnode ]]; then
        echo "  > zone logs"
        tar -zcvf ${TEMPDIR}/zone.logs.tar.gz \
            zones/*/root/var/svc/log \
            zones/*/root/var/log \
            zones/*/root/opt/smartdc/*/log >&4 2>&1
    fi
}

function grab_vminfo
{
    mkdir -p ${TEMPDIR}/vminfo
    for vm in $(vmadm list -v brand=kvm | grep " running " | cut -d ' ' -f1); do
        vmadm info ${vm} > ${TEMPDIR}/vminfo/${vm}.vminfo
    done
}

# grab the last 10000 lines of log for each of the VMs that have a log.
function grab_vmlogs
{
    mkdir -p ${TEMPDIR}/vmlogs
    for vm in $(vmadm lookup brand=kvm); do
        zonepath=$(vmadm get ${vm} | json zonepath)
        if [[ -n ${zonepath} && -d ${zonepath}/root/tmp ]]; then
            for log in $(ls ${zonepath}/root/tmp/vm.log*); do
                tail -n 10000 ${log} \
                    > ${TEMPDIR}/vmlogs/${vm}.$(basename ${log})
            done
        fi
    done
    if [[ -f /var/log/vmactions.log ]]; then
        cp /var/log/vmactions.log ${TEMPDIR}/vmactions.log
    fi
    if [[ -f /var/log/vmactions.debug ]]; then
        cp /var/log/vmactions.debug ${TEMPDIR}/vmactions.debug
    fi
}

function grab_cores
{
    [[ $headnode != "true" ]] && return

    echo "  > cores"
    if [[ -z $opt_a ]]; then
        tar -zcvf ${TEMPDIR}/cores.tar.gz \
	    `find zones/*/cores -type f -mtime -7` >&4 2>&1
    else
        tar -zcvf ${TEMPDIR}/cores.tar.gz zones/*/cores >&4 2>&1
    fi
}

function grab_dumps
{
    # These are already compressed
    echo "  > kernel crash dumps"

    if [[ -z $opt_a ]]; then
        tar -cvf ${TEMPDIR}/dumps.tar \
            `find var/crash/volatile -type f -mtime -7` >&4 2>&1
    else
        tar -cvf ${TEMPDIR}/dumps.tar var/crash/volatile >&4 2>&1
    fi

    dmp_cnt=`ls var/crash/volatile | wc -l`
    if [ $dmp_cnt -gt 0 ]; then
        tar -zcvf ${TEMPDIR}/mdb_modules.tar.gz \
            usr/platform/i86pc/lib/mdb/kvm/amd64/* usr/lib/mdb/kvm/amd64/* \
            >&4 2>&1
    fi
}

function grab_fmdump
{
    echo "  > fmdump"
    fmdump > ${TEMPDIR}/fmdump.out
    fmdump -e > ${TEMPDIR}/fmdump.e.out
}

function grab_logs
{
    local upgrade_dir=""
    [ -d var/tmp/upgrade_save ] && upgrade_dir="var/tmp/upgrade_save"
    echo "  > logs"
    tar -zcvf ${TEMPDIR}/gz-logs.tar.gz var/svc/log \
        etc/svc/volatile var/adm var/log/*.log $upgrade_dir >&4 2>&1
}

function grab_phonehome
{
    if [[ -d /opt/smartdc/phonehome ]]; then
        tar -zcvf ${TEMPDIR}/phonehome.tar.gz opt/smartdc/phonehome >&4 2>&1
    fi
}

function grab_platform_md5
{
    if [[ $headnode != "true" ]]; then
        return
    fi

    echo "  > kernel & platform integrity hash"
    sum -R -x md5 /usbkey/os > ${TEMPDIR}/platforms_cache.md5
    usbmnt=$(sdc-usbkey mount)
    [ $? != 0 ] && return
    sum -R -x md5 $usbmnt/os > ${TEMPDIR}/platforms_bootable.md5
    sdc-usbkey unmount
}

function grab_rabbitmq_info
{
    if [[ $headnode != "true" ]]; then
        return
    fi

    echo "  > rabbitmq status"

    rbout=${TEMPDIR}/rabbitmq.list
    rbcmd=/opt/local/sbin/rabbitmqctl

    rbstatus=`zoneadm -z rabbitmq list -p 2>&1 | cut -d: -f3`
    if [ $? -eq 0 -a "$rbstatus" == "running" ]; then
        zlogin rabbitmq $rbcmd list_queues > $rbout
        echo >>$rbout
        zlogin rabbitmq $rbcmd list_exchanges >> $rbout
        echo >>$rbout
        zlogin rabbitmq $rbcmd list_bindings >> $rbout
        echo >>$rbout
        zlogin rabbitmq $rbcmd list_connections >> $rbout
        echo >>$rbout
        zlogin rabbitmq $rbcmd list_channels >> $rbout
        echo >>$rbout
        zlogin rabbitmq $rbcmd list_consumers >> $rbout
    else
        echo "No rabbitmq zone or zone not running" >$rbout
    fi
}

function grab_images
{
    if [[ $headnode != "true" ]]; then
        return
    fi

    echo "  > images"
    sdc-imgapi /images > ${TEMPDIR}/images.list
}

function grab_vms
{
    if [[ $headnode != "true" ]]; then
        return
    fi

    echo "  > vms"
    sdc-vmapi /vms | gzip > ${TEMPDIR}/vms.gz
}

function grab_servers
{
    if [[ $headnode != "true" ]]; then
        return
    fi

    echo "  > servers"
    sdc-cnapi /servers | gzip > ${TEMPDIR}/servers.gz
}

function grab_agents
{
    echo "  > agents"
    apm list > ${TEMPDIR}/agents.list
}

while getopts "ad:o:c:iu" opt; do
    if [[ "$opt" == "?" ]]; then
        usage
    fi

    varname=opt_${opt}

    if [[ -z $OPTARG ]]; then
        eval $varname=true
    else
        eval $varname=\$OPTARG
    fi
done

if [[ -n $opt_c ]]; then
    contents=`echo $opt_c | tr ',' ' '`

    # ensure -c didn't include 'default' and any other content
    contents_count=$(echo ${contents} | wc -w | tr -d '[:space:]')
    if echo " ${contents} " | grep " default " >/dev/null; then
        if [[ ${contents_count} -gt 1 ]]; then
            fatal "cannot specify default and contents included by default"
        fi
    fi

    opt_c=
    for content in $contents; do
        if ! compgen -A function grab_ | \
          grep "^grab_${content}\$" 1> /dev/null ; then
            echo "`basename $0`: unrecognized content '$content'"
            usage
        fi
        opt_c="${opt_c}${content},"
    done

    if [[ -z $opt_c ]]; then
        fatal "must specify content to gather"
    fi
fi

# Need the output dir first.
BASEDIR=${opt_d:-/var/tmp}
if [[ ${BASEDIR:0:1} != "/" ]]; then
    BASEDIR=`pwd`/$BASEDIR
fi
TEMPDIR=$BASEDIR/sdcsb.$$/`sysinfo | json UUID`
LOGFILE=$BASEDIR/sdcsb.$$.log
FILENAME=sdc-support.$(hostname).$(TZ=UTC date "+%Y%m%dT%H%M%SZ").tar.bz2
OUTFILE=${opt_o}
if [[ -z "${OUTFILE}" ]]; then
    OUTFILE=$BASEDIR/$FILENAME
elif [[ ${OUTFILE:0:1} != "/" ]]; then
    OUTFILE=$BASEDIR/$OUTFILE
fi
COUNTDOWN=5

if [[ -z $opt_i ]]; then
    #
    # If the user has not specified immediate operation (-i), give them a
    # sanity pause before beginning -- this script can take some time and
    # write a lot of data.
    do_countdown
fi

if [[ "$(sysinfo | json 'Boot Parameters'.headnode)" == "true" ]]; then
    headnode=true
fi

mkdir -p ${TEMPDIR}

exec 4>${LOGFILE}
export BASH_XTRACEFD=4
export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace

echo "==> Gathering System Information"

cd /

if [[ -z $opt_c ]]; then
    grab_default
else
    for content in $contents; do
        eval grab_${content}
    done
fi

echo "==> packing data to ${OUTFILE}"
# Note: with `tar` the cmd would return while OUTFILE was still growing (!)
# which breaks the subsequent gpg in sdc-sbupload. `gtar` doesn't hit that.
( cd ${TEMPDIR}/.. && gtar -jcvf ${OUTFILE} `basename ${TEMPDIR}` >&4 2>&1 )
mv ${LOGFILE} ${OUTFILE}.log

echo "==> cleaning up"
rm -rf `dirname ${TEMPDIR}`

if [[ -n $opt_u ]]; then
    echo "==> uploading to Joyent support"
    /opt/smartdc/bin/sdc-sbupload -t servicebundle ${OUTFILE} \
        || fatal "upload failed"
fi

echo "==> done"
