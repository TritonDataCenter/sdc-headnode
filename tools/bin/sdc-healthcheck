#!/usr/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# Utility to check the health of various sdc subsystems.
#

already_checked=""

. /lib/sdc/config.sh

res=0
parseflag=false
PATH=/opt/smartdc/bin:/opt/smartdc/agents/bin:$PATH

load_sdc_sysinfo
load_sdc_config_filename
load_sdc_config

#
# Print an error message and exit
#
function fatal() {
  echo "$*" >&2
  exit 1
}

#
# Prints a separator for friendly output
#
function separator() {
  printf -vch "%63s" ""
  printf "%s\n" "${ch// /=}"
}

#
# Check the svcs in the global zone
#
function check_global() {

  zone=global
  state="running"
  role="global"
  status="online"

  #
  # Check the status of SMF svcs in the zone
  #
  err_cnt=$(svcs -x -z ${zone} | nawk \
     'BEGIN{cnt=0}{if ($1 == "Zone:") cnt++} END {print cnt}')
  if [ $err_cnt != 0 ]; then
    status="svc-err"
    res=1
  fi

  if [ $parseflag == true ] ; then
    printf "%s:%s:%s:%s\n" ${role} ${state} "-" "${status}"
  else
    printf "%-36s %-15s %-15s %10s\n" ${role} $state "-" "$status"
  fi
}

function check_end_to_end()
{
  case "$1" in
    amon)
      local got_status=`sdc-amon /pub/admin/probes 2>/dev/null | \
          nawk '{if ($1 == "HTTP/1.1") print $2}'`
      [[ "$got_status" == "200" ]] && return
      ;;
    cloudapi)
      check_cloudapi
      [[ $CLOUDAPI_STATUS -eq 0 ]] && return
      ;;
    cnapi)
      local got_name=`sdc-cnapi /servers?headnode=true 2>/dev/null | \
          json -H -a hostname`
      [[ "$got_name" == "$(hostname)" ]] && return
      ;;
    fwapi)
      local got_status=`sdc-fwapi /rules 2>/dev/null | \
          nawk '{if ($1 == "HTTP/1.1") print $2}'`
      [[ "$got_status" == "200" ]] && return
      ;;
    imgapi)
      local got_status=`sdc-imgapi /images?name=imgapi 2>/dev/null | \
          nawk '{if ($1 == "HTTP/1.1") print $2}'`
      [[ "$got_status" == "200" ]] && return
      ;;
    napi)
      sdc-napi /networks?name=admin 2>/dev/null | json -H -a owner_uuids | \
          grep $CONFIG_ufds_admin_uuid >/dev/null 2>&1
      [[ $? -eq 0 ]] && return
      ;;
    sapi)
      local got_status=`sdc-sapi /services?name=sapi 2>/dev/null | \
          nawk '{if ($1 == "HTTP/1.1") print $2}'`
      [[ "$got_status" == "200" ]] && return
      ;;
    ufds)
      local got_uuid=`sdc-ldap search login=admin 2>/dev/null | \
          nawk '{if ($1 == "uuid:") print $2}'`
      [[ "$got_uuid" == "$CONFIG_ufds_admin_uuid" ]] && return
      ;;
    vmapi)
      local vmapi_uuid=`vmadm lookup -1 tags.smartdc_role=vmapi`
      local got_uuid=`sdc-vmapi /vms/$vmapi_uuid 2>/dev/null | json -H uuid`
      [[ "$vmapi_uuid" == "$got_uuid" ]] && return
      ;;
    workflow)
      local got_flows=`sdc-workflow /workflows | json -a name | \
          grep "provision-"`
      [[ -n "$got_flows" ]] && return
      ;;
    *) return
      ;;
  esac

  status="error"
  res=1
}

function check_cloudapi
{
    CLOUDAPI_STATUS=0

    sdc_zone=$(vmadm list -H -o tags.smartdc_role,uuid,create_timestamp \
        -s create_timestamp owner_uuid=$CONFIG_ufds_admin_uuid | \
        grep '^sdc\>' | tail -1 | awk '{print $2}')
    [[ -z "$sdc_zone" ]] && return

    cloudapi_zone=`vmadm lookup -1 tags.smartdc_role=cloudapi`
    if [[ -z "$cloudapi_zone" ]]; then
        CLOUDAPI_STATUS=1
        return
    fi

    ssh_file=/zones/$sdc_zone/root/root/.ssh/sdc.id_rsa.pub

    # The sdc zone might never have been setup with the admin ssh key.
    if [[ ! -f $ssh_file ]]; then
        CLOUDAPI_STATUS=1
        return
    fi

    fingerprint=`ssh-keygen -l -f $ssh_file | awk '{printf("%s", $2)}'`
    if [[ -z "$fingerprint" ]]; then
        CLOUDAPI_STATUS=1
        return
    fi

    admin_ip=`sdc-vmapi /vms/$cloudapi_zone | json -H nics | \
        json -a nic_tag ip | nawk '{if ($1 == "admin") print $2}'`

    # BEGIN BASHSTYLED
    got=`zlogin $sdc_zone \
        PATH=/opt/smartdc/sdc/bin:/opt/smartdc/sdc/build/node/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin \
        SDC_TESTING=1 \
        /opt/smartdc/sdc/node_modules/smartdc/bin/sdc-listdatacenters \
        -a admin \
        -u https://$admin_ip \
        -k $fingerprint 2>/dev/null | \
        json $CONFIG_datacenter_name | nawk '{print substr($0, 1, 8)}'`
    # END BASHSTYLED
    # We may get back an IP or a DNS name. Just check the prefix
    [[ "$got" != "https://" ]] && CLOUDAPI_STATUS=1
}

#
# Check the zones that are running on the headnode (locally)
#
function check_zones() {

  for zone in $(vmadm lookup owner_uuid=${admin_uuid} tags.smartdc_role=~^[a-z])
  do
    values=$(vmadm get ${zone} | json -a tags.smartdc_role state)
    state=${values##* }
    role=${values%% *}
    status="online"

    [[ "$state" == "" ]] && state="unknown"

    if [ "$state" != "running" ]; then
      res=1
      status="offline"
    else
      #
      # Check the status of SMF svcs in the zone
      #
      err_cnt=$(svcs -x -z ${zone} | nawk \
         'BEGIN{cnt=0}{if ($1 == "Zone:") cnt++} END {print cnt}')
      if [ $err_cnt != 0 ]; then
        status="svc-err"
        res=1
      else
        check_end_to_end $role
      fi
    fi

    if [ $parseflag == true ] ; then
      printf "%s:%s:%s:%s\n" ${role} ${state} "-" "${status}"
    else
      printf "%-36s %-15s %-15s %10s\n" ${role} $state "-" "$status"
    fi

    already_checked="${already_checked} ${zone}"
  done
}

#
# Check the status of the agents.
#
function check_agents() {
  export AMQP_HOST=$(nawk -F= '{
    if ($1 == "rabbitmq") {
      split($2, a, ":")
      print a[3]
    }
  }' $SDC_CONFIG_FILENAME)

  if [ ! -x /opt/smartdc/agents/bin/ping-agent ]; then
    echo "ping-agent is not installed"
    exit 1
  fi

  for i in provisioner zonetracker heartbeat ur; do
    ping-agent $SYSINFO_UUID $i timeout=10000 2>&1 | egrep -s "req_id:"
    if [ $? == 0 ]; then
      status="online"
    else
      status="offline"
      res=1
    fi
    if [ $parseflag == true ] ; then
      printf "%s:%s:%s:%s\n" "global" "running" "$i" "$status"
    else
      printf "%-36s %-15s %-15s %10s\n" "global" "running" "$i" "$status"
    fi
  done

  # Smartlogin is different, and suboptimal
  local sl_status
  sl_status=$(/usr/bin/svcs -H -o STATE smartlogin)
  if [ $parseflag == true ] ; then
    printf "%s:%s:%s:%s\n" "global" "running" "smartlogin" "$sl_status"
  else
    printf "%-36s %-15s %-15s %10s\n" "global" "running" "smartlogin" \
      "$sl_status"
  fi
}

function print_header() {
  printf "%-36s %-15s %-15s %10s\n" "ZONE" "STATE" "AGENT" "STATUS"
}

function print_usage() {
  printf "Usage: $0 [ -p ]\n"
}

# we only run on the headnode
[[ `sysinfo | json '["Boot Parameters"].headnode'` != "true" ]] && \
    fatal "$myname must be run on the headnode"

admin_uuid=${CONFIG_ufds_admin_uuid}
if [[ -z ${admin_uuid} ]]; then
    fatal "$myname: unable to find admin UUID."
fi

# Parse command line
while getopts hp OPT; do
  case "$OPT" in
    p)
      parseflag=true
      ;;
    h)
      print_usage
      exit 0
      ;;
    \?)
      print_usage
      ;;
  esac
done

shift `expr $OPTIND - 1`

if [ $parseflag == false ] ; then
  print_header
fi

check_global
check_zones
check_agents

exit $res
