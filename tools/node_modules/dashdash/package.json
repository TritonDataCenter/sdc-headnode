{
  "name": "dashdash",
  "description": "A light, featureful and explicit option parsing library.",
  "version": "1.2.0",
  "author": {
    "name": "Trent Mick",
    "url": "trentm.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/trentm/node-dashdash.git"
  },
  "main": "./lib/dashdash.js",
  "dependencies": {
    "assert-plus": "0.1.2"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "A light, featureful and explicit option parsing library for node.js.\n\n[Why another one? See below](#why). tl;dr: The others I've tried are one of\ntoo loosey goosey (not explicit), too big/too many deps, or ill specified.\nYMMV.\n\nFollow <a href=\"https://twitter.com/intent/user?screen_name=trentmick\" target=\"_blank\">@trentmick</a>\nfor updates to node-dashdash.\n\n# Install\n\n    npm install dashdash\n\n\n# Usage\n\n```javascript\nvar dashdash = require('dashdash');\n\n// Specify the options. Minimally `name` (or `names`) and `type`\n// must be given for each.\nvar options = [\n    {\n        // `names` or a single `name`. First element is the `opts.KEY`.\n        names: ['help', 'h'],\n        // See \"Option config\" below for types.\n        type: 'bool',\n        help: 'Print this help and exit.'\n    }\n];\n\n// Shortcut form. As called it infers `process.argv`. See below for\n// the longer form to use methods like `.help()` on the Parser object.\nvar opts = dashdash.parse({options: options});\n\nconsole.log(\"opts:\", opts);\nconsole.log(\"args:\", opts._args);\n```\n\n\n# Longer Example\n\nA more realistic [starter script \"foo.js\"](./examples/foo.js) is as follows.\nThis also shows using `parser.help()` for formatted option help.\n\n```javascript\nvar dashdash = require('./lib/dashdash');\n\nvar options = [\n    {\n        name: 'version',\n        type: 'bool',\n        help: 'Print tool version and exit.'\n    },\n    {\n        names: ['help', 'h'],\n        type: 'bool',\n        help: 'Print this help and exit.'\n    },\n    {\n        names: ['verbose', 'v'],\n        type: 'arrayOfBool',\n        help: 'Verbose output. Use multiple times for more verbose.'\n    },\n    {\n        names: ['file', 'f'],\n        type: 'string',\n        help: 'File to process',\n        helpArg: 'FILE'\n    }\n];\n\nvar parser = dashdash.createParser({options: options});\ntry {\n    var opts = parser.parse(process.argv);\n} catch (e) {\n    console.error('foo: error: %s', e.message);\n    process.exit(1);\n}\n\nconsole.log(\"# opts:\", opts);\nconsole.log(\"# args:\", opts._args);\n\n// Use `parser.help()` for formatted options help.\nif (opts.help) {\n    var help = parser.help({includeEnv: true}).trimRight();\n    console.log('usage: node foo.js [OPTIONS]\\n'\n                + 'options:\\n'\n                + help);\n    process.exit(0);\n}\n\n// ...\n```\n\n\nSome example output from this script (foo.js):\n\n```\n$ node foo.js -h\n# opts: { help: true,\n  _order: [ { name: 'help', value: true, from: 'argv' } ],\n  _args: [] }\n# args: []\nusage: node foo.js [OPTIONS]\noptions:\n    --version             Print tool version and exit.\n    -h, --help            Print this help and exit.\n    -v, --verbose         Verbose output. Use multiple times for more verbose.\n    -f FILE, --file=FILE  File to process\n\n$ node foo.js -v\n# opts: { verbose: [ true ],\n  _order: [ { name: 'verbose', value: true, from: 'argv' } ],\n  _args: [] }\n# args: []\n\n$ node foo.js --version arg1\n# opts: { version: true,\n  _order: [ { name: 'version', value: true, from: 'argv' } ],\n  _args: [ 'arg1' ] }\n# args: [ 'arg1' ]\n\n$ node foo.js -f bar.txt\n# opts: { file: 'bar.txt',\n  _order: [ { name: 'file', value: 'bar.txt', from: 'argv' } ],\n  _args: [] }\n# args: []\n\n$ node foo.js -vvv --file=blah\n# opts: { verbose: [ true, true, true ],\n  file: 'blah',\n  _order:\n   [ { name: 'verbose', value: true, from: 'argv' },\n     { name: 'verbose', value: true, from: 'argv' },\n     { name: 'verbose', value: true, from: 'argv' },\n     { name: 'file', value: 'blah', from: 'argv' } ],\n  _args: [] }\n# args: []\n```\n\n\n# Environment variable integration\n\nIf you want to allow environment variables to specify options to your tool,\ndashdash makes this easy. We can change the 'verbose' option in the example\nabove to include an 'env' field:\n\n```javascript\n    {\n        names: ['verbose', 'v'],\n        type: 'arrayOfBool',\n        env: 'FOO_VERBOSE',         // <--- add this line\n        help: 'Verbose output. Use multiple times for more verbose.'\n    },\n```\n\nthen the **\"FOO_VERBOSE\" environment variable** can be used to set this\noption:\n\n```shell\n$ FOO_VERBOSE=1 node foo.js\n# opts: { verbose: [ true ],\n  _order: [ { name: 'verbose', value: true, from: 'env' } ],\n  _args: [] }\n# args: []\n```\n\nWith the `includeEnv: true` config to `parser.help()` the environment\nvariable can also be included in **help output**:\n\n    usage: node foo.js [OPTIONS]\n    options:\n        --version             Print tool version and exit.\n        -h, --help            Print this help and exit.\n        -v, --verbose         Verbose output. Use multiple times for more verbose.\n                              Environment: FOO_VERBOSE=1\n        -f FILE, --file=FILE  File to process\n\n\n# Parser config\n\nParser construction (i.e. `dashdash.createParser(CONFIG)`) takes the\nfollowing fields:\n\n- `options` (Array of option specs). Required. See the\n  [Option specs](#option-specs) section below.\n\n- `interspersed` (Boolean). Option. Default is true. If true this allows\n  interspersed arguments and options. I.e.:\n\n        node ./tool.js -v arg1 arg2 -h   # '-h' is after interspersed args\n\n  Set it to false to have '-h' **not** get parsed as an option in the above\n  example.\n\n\n# Option specs\n\nExample using all fields:\n\n```javascript\n{\n    names: ['file', 'f'],       // Required (or `name`).\n    type: 'string',             // Required.\n    env: 'MYTOOL_FILE',\n    help: 'Config file to load before running \"mytool\"',\n    helpArg: 'PATH',\n    default: path.resolve(process.env.HOME, '.mytoolrc')\n}\n```\n\nEach option spec in the `options` array must/can have the following fields:\n\n- `name` (String) or `names` (Array). Required. These give the option name\n  and aliases. The first name (if more than one given) is the key for the\n  parsed `opts` object.\n\n- `type` (String). Required. One of:\n\n    - bool\n    - string\n    - number\n    - integer\n    - positiveInteger\n    - arrayOfBool\n    - arrayOfString\n    - arrayOfNumber\n    - arrayOfInteger\n    - arrayOfPositiveInteger\n\n  FWIW, these names attempt to match with asserts on\n  [assert-plus](https://github.com/mcavage/node-assert-plus).\n\n- `env` (String or Array of String). Optional. An environment variable name\n  (or names) that can be used as a fallback for this option. For example,\n  given a \"foo.js\" like this:\n\n        var options = [{names: ['dry-run', 'n'], env: 'FOO_DRY_RUN'}];\n        var opts = dashdash.parse({options: options});\n\n  Both `node foo.js --dry-run` and `FOO_DRY_RUN=1 node foo.js` would result\n  in `opts.dry_run = true`.\n\n  An environment variable is only used as a fallback, i.e. it is ignored if\n  the associated option is given in `argv`.\n\n- `help` (String). Optional. Used for `parser.help()` output.\n\n- `helpArg` (String). Optional. Used in help output as the placeholder for\n  the option argument, e.g. the \"PATH\" in:\n\n        ...\n        -f PATH, --file=PATH    File to process\n        ...\n\n- `default`. Optional. A default value used for this option, if the\n  option isn't specified in argv.\n\n\n# Help config\n\nThe `parser.help(...)` function is configurable as follows:\n\n    Options:\n        -w WEAPON, --weapon=WEAPON  Weapon with which to crush. One of: |\n                                    sword, spear, maul                  |\n        -h, --help                  Print this help and exit.           |\n    ^^^^                            ^                                   |\n        `-- indent                   `-- helpCol              maxCol ---'\n\n- `indent` (Number or String). Default 4. Set to a number (for that many\n  spaces) or a string for the literal indent.\n- `nameSort` (String). Default is 'length'. By default the names are\n  sorted to put the short opts first (i.e. '-h, --help' preferred\n  to '--help, -h'). Set to 'none' to not do this sorting.\n- `maxCol` (Number). Default 80. Note that reflow is just done on whitespace\n  so a long token in the option help can overflow maxCol.\n- `helpCol` (Number). If not set a reasonable value will be determined\n  between `minHelpCol` and `maxHelpCol`.\n- `minHelpCol` (Number). Default 20.\n- `maxHelpCol` (Number). Default 40.\n- `includeEnv` (Boolean). Default false. If the option has associated\n  environment variables (via the `env` option spec attribute), then\n  append mentioned of those envvars to the help string.\n\n\n# Why\n\nWhy another node.js option parsing lib?\n\n- `nopt` really is just for \"tools like npm\". Implicit opts (e.g. '--no-foo'\nworks for every '--foo'). Can't disable abbreviated opts. Can't do multiple\nusages of same opt, e.g. '-vvv' (I think). Can't do grouped short opts.\n\n- `optimist` has surprise interpretation of options (at least to me).\n  Implicit opts mean ambiguities and poor error handling for fat-fingering.\n  `process.exit` calls makes it hard to use as a libary.\n\n- `optparse` Incomplete docs. Is this an attempted clone of Python's `optparse`.\n  Not clear. Some divergence. `parser.on(\"name\", ...)` API is weird.\n\n- `argparse` Dep on underscore. No thanks just for option processing.\n  `find lib | wc -l` -> `26`. Overkill.\n  Argparse is a bit different anyway. Not sure I want that.\n\n- `posix-getopt` No type validation. Though that isn't a killer. AFAIK can't\n  have a long opt without a short alias. I.e. no `getopt_long` semantics.\n  Also, no whizbang features like generated help output.\n\n\n# License\n\nMIT. See LICENSE.txt.\n",
  "readmeFilename": "README.md",
  "_id": "dashdash@1.2.0",
  "dist": {
    "shasum": "d617c4725e41d825400b637032bb0c42309e9a26"
  },
  "_from": "dashdash@1.2.0",
  "_resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.2.0.tgz"
}
